
ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00003fca  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800226  00800226  00004184  2**0
                  ALLOC
  3 .stab         000034e0  00000000  00000000  00004184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c2b  00000000  00000000  00007664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000928f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000944f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000bc75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d143  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e450  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000308  00000000  00000000  0000e630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e938  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__vector_14>
      3c:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__vector_25>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ec       	ldi	r30, 0xCA	; 202
      a0:	ff e3       	ldi	r31, 0x3F	; 63
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 33       	cpi	r26, 0x3A	; 58
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f6 18 	call	0x31ec	; 0x31ec <main>
      c6:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a8 e1       	ldi	r26, 0x18	; 24
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	88 e1       	ldi	r24, 0x18	; 24
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	68 e1       	ldi	r22, 0x18	; 24
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__gesf2+0x56>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__gesf2+0x56>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__gesf2+0x58>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x18>

00000886 <__ltsf2>:
     886:	a8 e1       	ldi	r26, 0x18	; 24
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__prologue_saves__+0x18>
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	2d 83       	std	Y+5, r18	; 0x05
     89c:	3e 83       	std	Y+6, r19	; 0x06
     89e:	4f 83       	std	Y+7, r20	; 0x07
     8a0:	58 87       	std	Y+8, r21	; 0x08
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f1 2c       	mov	r15, r1
     8a8:	ec 0e       	add	r14, r28
     8aa:	fd 1e       	adc	r15, r29
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5e       	subi	r16, 0xEF	; 239
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	ce 01       	movw	r24, r28
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	40 f0       	brcs	.+16     	; 0x8dc <__ltsf2+0x56>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__ltsf2+0x56>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fpcmp_parts_f>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__ltsf2+0x58>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	e6 e0       	ldi	r30, 0x06	; 6
     8e2:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__epilogue_restores__+0x18>

000008e6 <__floatsisf>:
     8e6:	a8 e0       	ldi	r26, 0x08	; 8
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x12>
     8f2:	9b 01       	movw	r18, r22
     8f4:	ac 01       	movw	r20, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	da 01       	movw	r26, r20
     8fc:	c9 01       	movw	r24, r18
     8fe:	88 27       	eor	r24, r24
     900:	b7 fd       	sbrc	r27, 7
     902:	83 95       	inc	r24
     904:	99 27       	eor	r25, r25
     906:	aa 27       	eor	r26, r26
     908:	bb 27       	eor	r27, r27
     90a:	b8 2e       	mov	r11, r24
     90c:	21 15       	cp	r18, r1
     90e:	31 05       	cpc	r19, r1
     910:	41 05       	cpc	r20, r1
     912:	51 05       	cpc	r21, r1
     914:	19 f4       	brne	.+6      	; 0x91c <__floatsisf+0x36>
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	3a c0       	rjmp	.+116    	; 0x990 <__floatsisf+0xaa>
     91c:	88 23       	and	r24, r24
     91e:	a9 f0       	breq	.+42     	; 0x94a <__floatsisf+0x64>
     920:	20 30       	cpi	r18, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	38 07       	cpc	r19, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	48 07       	cpc	r20, r24
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	58 07       	cpc	r21, r24
     92e:	29 f4       	brne	.+10     	; 0x93a <__floatsisf+0x54>
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	9f ec       	ldi	r25, 0xCF	; 207
     938:	30 c0       	rjmp	.+96     	; 0x99a <__floatsisf+0xb4>
     93a:	ee 24       	eor	r14, r14
     93c:	ff 24       	eor	r15, r15
     93e:	87 01       	movw	r16, r14
     940:	e2 1a       	sub	r14, r18
     942:	f3 0a       	sbc	r15, r19
     944:	04 0b       	sbc	r16, r20
     946:	15 0b       	sbc	r17, r21
     948:	02 c0       	rjmp	.+4      	; 0x94e <__floatsisf+0x68>
     94a:	79 01       	movw	r14, r18
     94c:	8a 01       	movw	r16, r20
     94e:	8e e1       	ldi	r24, 0x1E	; 30
     950:	c8 2e       	mov	r12, r24
     952:	d1 2c       	mov	r13, r1
     954:	dc 82       	std	Y+4, r13	; 0x04
     956:	cb 82       	std	Y+3, r12	; 0x03
     958:	ed 82       	std	Y+5, r14	; 0x05
     95a:	fe 82       	std	Y+6, r15	; 0x06
     95c:	0f 83       	std	Y+7, r16	; 0x07
     95e:	18 87       	std	Y+8, r17	; 0x08
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__clzsi2>
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	18 16       	cp	r1, r24
     96c:	19 06       	cpc	r1, r25
     96e:	84 f4       	brge	.+32     	; 0x990 <__floatsisf+0xaa>
     970:	08 2e       	mov	r0, r24
     972:	04 c0       	rjmp	.+8      	; 0x97c <__floatsisf+0x96>
     974:	ee 0c       	add	r14, r14
     976:	ff 1c       	adc	r15, r15
     978:	00 1f       	adc	r16, r16
     97a:	11 1f       	adc	r17, r17
     97c:	0a 94       	dec	r0
     97e:	d2 f7       	brpl	.-12     	; 0x974 <__floatsisf+0x8e>
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 1a       	sub	r12, r24
     98a:	d9 0a       	sbc	r13, r25
     98c:	dc 82       	std	Y+4, r13	; 0x04
     98e:	cb 82       	std	Y+3, r12	; 0x03
     990:	ba 82       	std	Y+2, r11	; 0x02
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     99a:	28 96       	adiw	r28, 0x08	; 8
     99c:	e9 e0       	ldi	r30, 0x09	; 9
     99e:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x12>

000009a2 <__fixsfsi>:
     9a2:	ac e0       	ldi	r26, 0x0C	; 12
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__prologue_saves__+0x20>
     9ae:	69 83       	std	Y+1, r22	; 0x01
     9b0:	7a 83       	std	Y+2, r23	; 0x02
     9b2:	8b 83       	std	Y+3, r24	; 0x03
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	be 01       	movw	r22, r28
     9bc:	6b 5f       	subi	r22, 0xFB	; 251
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__unpack_f>
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	61 f1       	breq	.+88     	; 0xa22 <__fixsfsi+0x80>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	50 f1       	brcs	.+84     	; 0xa22 <__fixsfsi+0x80>
     9ce:	84 30       	cpi	r24, 0x04	; 4
     9d0:	21 f4       	brne	.+8      	; 0x9da <__fixsfsi+0x38>
     9d2:	8e 81       	ldd	r24, Y+6	; 0x06
     9d4:	88 23       	and	r24, r24
     9d6:	51 f1       	breq	.+84     	; 0xa2c <__fixsfsi+0x8a>
     9d8:	2e c0       	rjmp	.+92     	; 0xa36 <__fixsfsi+0x94>
     9da:	2f 81       	ldd	r18, Y+7	; 0x07
     9dc:	38 85       	ldd	r19, Y+8	; 0x08
     9de:	37 fd       	sbrc	r19, 7
     9e0:	20 c0       	rjmp	.+64     	; 0xa22 <__fixsfsi+0x80>
     9e2:	6e 81       	ldd	r22, Y+6	; 0x06
     9e4:	2f 31       	cpi	r18, 0x1F	; 31
     9e6:	31 05       	cpc	r19, r1
     9e8:	1c f0       	brlt	.+6      	; 0x9f0 <__fixsfsi+0x4e>
     9ea:	66 23       	and	r22, r22
     9ec:	f9 f0       	breq	.+62     	; 0xa2c <__fixsfsi+0x8a>
     9ee:	23 c0       	rjmp	.+70     	; 0xa36 <__fixsfsi+0x94>
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	82 1b       	sub	r24, r18
     9f6:	93 0b       	sbc	r25, r19
     9f8:	29 85       	ldd	r18, Y+9	; 0x09
     9fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     9fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__fixsfsi+0x68>
     a02:	56 95       	lsr	r21
     a04:	47 95       	ror	r20
     a06:	37 95       	ror	r19
     a08:	27 95       	ror	r18
     a0a:	8a 95       	dec	r24
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__fixsfsi+0x60>
     a0e:	66 23       	and	r22, r22
     a10:	b1 f0       	breq	.+44     	; 0xa3e <__fixsfsi+0x9c>
     a12:	50 95       	com	r21
     a14:	40 95       	com	r20
     a16:	30 95       	com	r19
     a18:	21 95       	neg	r18
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	4f 4f       	sbci	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <__fixsfsi+0x9c>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__fixsfsi+0x9c>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	3f ef       	ldi	r19, 0xFF	; 255
     a30:	4f ef       	ldi	r20, 0xFF	; 255
     a32:	5f e7       	ldi	r21, 0x7F	; 127
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e8       	ldi	r21, 0x80	; 128
     a3e:	b9 01       	movw	r22, r18
     a40:	ca 01       	movw	r24, r20
     a42:	2c 96       	adiw	r28, 0x0c	; 12
     a44:	e2 e0       	ldi	r30, 0x02	; 2
     a46:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__epilogue_restores__+0x20>

00000a4a <__floatunsisf>:
     a4a:	a8 e0       	ldi	r26, 0x08	; 8
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	eb e2       	ldi	r30, 0x2B	; 43
     a50:	f5 e0       	ldi	r31, 0x05	; 5
     a52:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__prologue_saves__+0x10>
     a56:	7b 01       	movw	r14, r22
     a58:	8c 01       	movw	r16, r24
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	81 05       	cpc	r24, r1
     a60:	91 05       	cpc	r25, r1
     a62:	19 f4       	brne	.+6      	; 0xa6a <__floatunsisf+0x20>
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	60 c0       	rjmp	.+192    	; 0xb2a <__floatunsisf+0xe0>
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	8e e1       	ldi	r24, 0x1E	; 30
     a70:	c8 2e       	mov	r12, r24
     a72:	d1 2c       	mov	r13, r1
     a74:	dc 82       	std	Y+4, r13	; 0x04
     a76:	cb 82       	std	Y+3, r12	; 0x03
     a78:	ed 82       	std	Y+5, r14	; 0x05
     a7a:	fe 82       	std	Y+6, r15	; 0x06
     a7c:	0f 83       	std	Y+7, r16	; 0x07
     a7e:	18 87       	std	Y+8, r17	; 0x08
     a80:	c8 01       	movw	r24, r16
     a82:	b7 01       	movw	r22, r14
     a84:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__clzsi2>
     a88:	fc 01       	movw	r30, r24
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	f7 ff       	sbrs	r31, 7
     a8e:	3b c0       	rjmp	.+118    	; 0xb06 <__floatunsisf+0xbc>
     a90:	22 27       	eor	r18, r18
     a92:	33 27       	eor	r19, r19
     a94:	2e 1b       	sub	r18, r30
     a96:	3f 0b       	sbc	r19, r31
     a98:	57 01       	movw	r10, r14
     a9a:	68 01       	movw	r12, r16
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__floatunsisf+0x5e>
     aa0:	d6 94       	lsr	r13
     aa2:	c7 94       	ror	r12
     aa4:	b7 94       	ror	r11
     aa6:	a7 94       	ror	r10
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__floatunsisf+0x56>
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__floatunsisf+0x7c>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	aa 1f       	adc	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	2a 95       	dec	r18
     ac8:	d2 f7       	brpl	.-12     	; 0xabe <__floatunsisf+0x74>
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	a1 09       	sbc	r26, r1
     ace:	b1 09       	sbc	r27, r1
     ad0:	8e 21       	and	r24, r14
     ad2:	9f 21       	and	r25, r15
     ad4:	a0 23       	and	r26, r16
     ad6:	b1 23       	and	r27, r17
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	a1 05       	cpc	r26, r1
     adc:	b1 05       	cpc	r27, r1
     ade:	21 f0       	breq	.+8      	; 0xae8 <__floatunsisf+0x9e>
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	4a 29       	or	r20, r10
     aea:	5b 29       	or	r21, r11
     aec:	6c 29       	or	r22, r12
     aee:	7d 29       	or	r23, r13
     af0:	4d 83       	std	Y+5, r20	; 0x05
     af2:	5e 83       	std	Y+6, r21	; 0x06
     af4:	6f 83       	std	Y+7, r22	; 0x07
     af6:	78 87       	std	Y+8, r23	; 0x08
     af8:	8e e1       	ldi	r24, 0x1E	; 30
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	8e 1b       	sub	r24, r30
     afe:	9f 0b       	sbc	r25, r31
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <__floatunsisf+0xe0>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	81 f0       	breq	.+32     	; 0xb2a <__floatunsisf+0xe0>
     b0a:	0e 2e       	mov	r0, r30
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__floatunsisf+0xcc>
     b0e:	ee 0c       	add	r14, r14
     b10:	ff 1c       	adc	r15, r15
     b12:	00 1f       	adc	r16, r16
     b14:	11 1f       	adc	r17, r17
     b16:	0a 94       	dec	r0
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <__floatunsisf+0xc4>
     b1a:	ed 82       	std	Y+5, r14	; 0x05
     b1c:	fe 82       	std	Y+6, r15	; 0x06
     b1e:	0f 83       	std	Y+7, r16	; 0x07
     b20:	18 87       	std	Y+8, r17	; 0x08
     b22:	ce 1a       	sub	r12, r30
     b24:	df 0a       	sbc	r13, r31
     b26:	dc 82       	std	Y+4, r13	; 0x04
     b28:	cb 82       	std	Y+3, r12	; 0x03
     b2a:	1a 82       	std	Y+2, r1	; 0x02
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	0e 94 ed 05 	call	0xbda	; 0xbda <__pack_f>
     b34:	28 96       	adiw	r28, 0x08	; 8
     b36:	ea e0       	ldi	r30, 0x0A	; 10
     b38:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__epilogue_restores__+0x10>

00000b3c <__clzsi2>:
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	7b 01       	movw	r14, r22
     b46:	8c 01       	movw	r16, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e8 16       	cp	r14, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	f8 06       	cpc	r15, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	08 07       	cpc	r16, r24
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	18 07       	cpc	r17, r24
     b58:	88 f4       	brcc	.+34     	; 0xb7c <__clzsi2+0x40>
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	e8 16       	cp	r14, r24
     b5e:	f1 04       	cpc	r15, r1
     b60:	01 05       	cpc	r16, r1
     b62:	11 05       	cpc	r17, r1
     b64:	31 f0       	breq	.+12     	; 0xb72 <__clzsi2+0x36>
     b66:	28 f0       	brcs	.+10     	; 0xb72 <__clzsi2+0x36>
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	17 c0       	rjmp	.+46     	; 0xba0 <__clzsi2+0x64>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <__clzsi2+0x64>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	e8 16       	cp	r14, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	f8 06       	cpc	r15, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	08 07       	cpc	r16, r24
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	18 07       	cpc	r17, r24
     b8c:	28 f0       	brcs	.+10     	; 0xb98 <__clzsi2+0x5c>
     b8e:	88 e1       	ldi	r24, 0x18	; 24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__clzsi2+0x64>
     b98:	80 e1       	ldi	r24, 0x10	; 16
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	20 e2       	ldi	r18, 0x20	; 32
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	28 1b       	sub	r18, r24
     baa:	39 0b       	sbc	r19, r25
     bac:	4a 0b       	sbc	r20, r26
     bae:	5b 0b       	sbc	r21, r27
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__clzsi2+0x7e>
     bb2:	16 95       	lsr	r17
     bb4:	07 95       	ror	r16
     bb6:	f7 94       	ror	r15
     bb8:	e7 94       	ror	r14
     bba:	8a 95       	dec	r24
     bbc:	d2 f7       	brpl	.-12     	; 0xbb2 <__clzsi2+0x76>
     bbe:	f7 01       	movw	r30, r14
     bc0:	e0 5e       	subi	r30, 0xE0	; 224
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	80 81       	ld	r24, Z
     bc6:	28 1b       	sub	r18, r24
     bc8:	31 09       	sbc	r19, r1
     bca:	41 09       	sbc	r20, r1
     bcc:	51 09       	sbc	r21, r1
     bce:	c9 01       	movw	r24, r18
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	08 95       	ret

00000bda <__pack_f>:
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	fc 01       	movw	r30, r24
     be6:	e4 80       	ldd	r14, Z+4	; 0x04
     be8:	f5 80       	ldd	r15, Z+5	; 0x05
     bea:	06 81       	ldd	r16, Z+6	; 0x06
     bec:	17 81       	ldd	r17, Z+7	; 0x07
     bee:	d1 80       	ldd	r13, Z+1	; 0x01
     bf0:	80 81       	ld	r24, Z
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	48 f4       	brcc	.+18     	; 0xc08 <__pack_f+0x2e>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e1       	ldi	r26, 0x10	; 16
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e8 2a       	or	r14, r24
     c00:	f9 2a       	or	r15, r25
     c02:	0a 2b       	or	r16, r26
     c04:	1b 2b       	or	r17, r27
     c06:	a5 c0       	rjmp	.+330    	; 0xd52 <__pack_f+0x178>
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	09 f4       	brne	.+2      	; 0xc0e <__pack_f+0x34>
     c0c:	9f c0       	rjmp	.+318    	; 0xd4c <__pack_f+0x172>
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	21 f4       	brne	.+8      	; 0xc1a <__pack_f+0x40>
     c12:	ee 24       	eor	r14, r14
     c14:	ff 24       	eor	r15, r15
     c16:	87 01       	movw	r16, r14
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__pack_f+0x4a>
     c1a:	e1 14       	cp	r14, r1
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	19 f4       	brne	.+6      	; 0xc2a <__pack_f+0x50>
     c24:	e0 e0       	ldi	r30, 0x00	; 0
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	96 c0       	rjmp	.+300    	; 0xd56 <__pack_f+0x17c>
     c2a:	62 81       	ldd	r22, Z+2	; 0x02
     c2c:	73 81       	ldd	r23, Z+3	; 0x03
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	62 38       	cpi	r22, 0x82	; 130
     c32:	79 07       	cpc	r23, r25
     c34:	0c f0       	brlt	.+2      	; 0xc38 <__pack_f+0x5e>
     c36:	5b c0       	rjmp	.+182    	; 0xcee <__pack_f+0x114>
     c38:	22 e8       	ldi	r18, 0x82	; 130
     c3a:	3f ef       	ldi	r19, 0xFF	; 255
     c3c:	26 1b       	sub	r18, r22
     c3e:	37 0b       	sbc	r19, r23
     c40:	2a 31       	cpi	r18, 0x1A	; 26
     c42:	31 05       	cpc	r19, r1
     c44:	2c f0       	brlt	.+10     	; 0xc50 <__pack_f+0x76>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	2a c0       	rjmp	.+84     	; 0xca4 <__pack_f+0xca>
     c50:	b8 01       	movw	r22, r16
     c52:	a7 01       	movw	r20, r14
     c54:	02 2e       	mov	r0, r18
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <__pack_f+0x86>
     c58:	76 95       	lsr	r23
     c5a:	67 95       	ror	r22
     c5c:	57 95       	ror	r21
     c5e:	47 95       	ror	r20
     c60:	0a 94       	dec	r0
     c62:	d2 f7       	brpl	.-12     	; 0xc58 <__pack_f+0x7e>
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <__pack_f+0x9c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	aa 1f       	adc	r26, r26
     c74:	bb 1f       	adc	r27, r27
     c76:	2a 95       	dec	r18
     c78:	d2 f7       	brpl	.-12     	; 0xc6e <__pack_f+0x94>
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	a1 09       	sbc	r26, r1
     c7e:	b1 09       	sbc	r27, r1
     c80:	8e 21       	and	r24, r14
     c82:	9f 21       	and	r25, r15
     c84:	a0 23       	and	r26, r16
     c86:	b1 23       	and	r27, r17
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	a1 05       	cpc	r26, r1
     c8c:	b1 05       	cpc	r27, r1
     c8e:	21 f0       	breq	.+8      	; 0xc98 <__pack_f+0xbe>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	9a 01       	movw	r18, r20
     c9a:	ab 01       	movw	r20, r22
     c9c:	28 2b       	or	r18, r24
     c9e:	39 2b       	or	r19, r25
     ca0:	4a 2b       	or	r20, r26
     ca2:	5b 2b       	or	r21, r27
     ca4:	da 01       	movw	r26, r20
     ca6:	c9 01       	movw	r24, r18
     ca8:	8f 77       	andi	r24, 0x7F	; 127
     caa:	90 70       	andi	r25, 0x00	; 0
     cac:	a0 70       	andi	r26, 0x00	; 0
     cae:	b0 70       	andi	r27, 0x00	; 0
     cb0:	80 34       	cpi	r24, 0x40	; 64
     cb2:	91 05       	cpc	r25, r1
     cb4:	a1 05       	cpc	r26, r1
     cb6:	b1 05       	cpc	r27, r1
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <__pack_f+0xee>
     cba:	27 ff       	sbrs	r18, 7
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <__pack_f+0xf6>
     cbe:	20 5c       	subi	r18, 0xC0	; 192
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	4f 4f       	sbci	r20, 0xFF	; 255
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <__pack_f+0xf6>
     cc8:	21 5c       	subi	r18, 0xC1	; 193
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	4f 4f       	sbci	r20, 0xFF	; 255
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
     cd0:	e0 e0       	ldi	r30, 0x00	; 0
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	20 30       	cpi	r18, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	3a 07       	cpc	r19, r26
     cda:	a0 e0       	ldi	r26, 0x00	; 0
     cdc:	4a 07       	cpc	r20, r26
     cde:	a0 e4       	ldi	r26, 0x40	; 64
     ce0:	5a 07       	cpc	r21, r26
     ce2:	10 f0       	brcs	.+4      	; 0xce8 <__pack_f+0x10e>
     ce4:	e1 e0       	ldi	r30, 0x01	; 1
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	79 01       	movw	r14, r18
     cea:	8a 01       	movw	r16, r20
     cec:	27 c0       	rjmp	.+78     	; 0xd3c <__pack_f+0x162>
     cee:	60 38       	cpi	r22, 0x80	; 128
     cf0:	71 05       	cpc	r23, r1
     cf2:	64 f5       	brge	.+88     	; 0xd4c <__pack_f+0x172>
     cf4:	fb 01       	movw	r30, r22
     cf6:	e1 58       	subi	r30, 0x81	; 129
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	d8 01       	movw	r26, r16
     cfc:	c7 01       	movw	r24, r14
     cfe:	8f 77       	andi	r24, 0x7F	; 127
     d00:	90 70       	andi	r25, 0x00	; 0
     d02:	a0 70       	andi	r26, 0x00	; 0
     d04:	b0 70       	andi	r27, 0x00	; 0
     d06:	80 34       	cpi	r24, 0x40	; 64
     d08:	91 05       	cpc	r25, r1
     d0a:	a1 05       	cpc	r26, r1
     d0c:	b1 05       	cpc	r27, r1
     d0e:	39 f4       	brne	.+14     	; 0xd1e <__pack_f+0x144>
     d10:	e7 fe       	sbrs	r14, 7
     d12:	0d c0       	rjmp	.+26     	; 0xd2e <__pack_f+0x154>
     d14:	80 e4       	ldi	r24, 0x40	; 64
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__pack_f+0x14c>
     d1e:	8f e3       	ldi	r24, 0x3F	; 63
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e8 0e       	add	r14, r24
     d28:	f9 1e       	adc	r15, r25
     d2a:	0a 1f       	adc	r16, r26
     d2c:	1b 1f       	adc	r17, r27
     d2e:	17 ff       	sbrs	r17, 7
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <__pack_f+0x162>
     d32:	16 95       	lsr	r17
     d34:	07 95       	ror	r16
     d36:	f7 94       	ror	r15
     d38:	e7 94       	ror	r14
     d3a:	31 96       	adiw	r30, 0x01	; 1
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	16 95       	lsr	r17
     d40:	07 95       	ror	r16
     d42:	f7 94       	ror	r15
     d44:	e7 94       	ror	r14
     d46:	8a 95       	dec	r24
     d48:	d1 f7       	brne	.-12     	; 0xd3e <__pack_f+0x164>
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <__pack_f+0x17c>
     d4c:	ee 24       	eor	r14, r14
     d4e:	ff 24       	eor	r15, r15
     d50:	87 01       	movw	r16, r14
     d52:	ef ef       	ldi	r30, 0xFF	; 255
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	6e 2f       	mov	r22, r30
     d58:	67 95       	ror	r22
     d5a:	66 27       	eor	r22, r22
     d5c:	67 95       	ror	r22
     d5e:	90 2f       	mov	r25, r16
     d60:	9f 77       	andi	r25, 0x7F	; 127
     d62:	d7 94       	ror	r13
     d64:	dd 24       	eor	r13, r13
     d66:	d7 94       	ror	r13
     d68:	8e 2f       	mov	r24, r30
     d6a:	86 95       	lsr	r24
     d6c:	49 2f       	mov	r20, r25
     d6e:	46 2b       	or	r20, r22
     d70:	58 2f       	mov	r21, r24
     d72:	5d 29       	or	r21, r13
     d74:	b7 01       	movw	r22, r14
     d76:	ca 01       	movw	r24, r20
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	08 95       	ret

00000d84 <__unpack_f>:
     d84:	fc 01       	movw	r30, r24
     d86:	db 01       	movw	r26, r22
     d88:	40 81       	ld	r20, Z
     d8a:	51 81       	ldd	r21, Z+1	; 0x01
     d8c:	22 81       	ldd	r18, Z+2	; 0x02
     d8e:	62 2f       	mov	r22, r18
     d90:	6f 77       	andi	r22, 0x7F	; 127
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	22 1f       	adc	r18, r18
     d96:	22 27       	eor	r18, r18
     d98:	22 1f       	adc	r18, r18
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	89 2f       	mov	r24, r25
     d9e:	88 0f       	add	r24, r24
     da0:	82 2b       	or	r24, r18
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	99 1f       	adc	r25, r25
     da8:	99 27       	eor	r25, r25
     daa:	99 1f       	adc	r25, r25
     dac:	11 96       	adiw	r26, 0x01	; 1
     dae:	9c 93       	st	X, r25
     db0:	11 97       	sbiw	r26, 0x01	; 1
     db2:	21 15       	cp	r18, r1
     db4:	31 05       	cpc	r19, r1
     db6:	a9 f5       	brne	.+106    	; 0xe22 <__unpack_f+0x9e>
     db8:	41 15       	cp	r20, r1
     dba:	51 05       	cpc	r21, r1
     dbc:	61 05       	cpc	r22, r1
     dbe:	71 05       	cpc	r23, r1
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <__unpack_f+0x42>
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	37 c0       	rjmp	.+110    	; 0xe34 <__unpack_f+0xb0>
     dc6:	82 e8       	ldi	r24, 0x82	; 130
     dc8:	9f ef       	ldi	r25, 0xFF	; 255
     dca:	13 96       	adiw	r26, 0x03	; 3
     dcc:	9c 93       	st	X, r25
     dce:	8e 93       	st	-X, r24
     dd0:	12 97       	sbiw	r26, 0x02	; 2
     dd2:	9a 01       	movw	r18, r20
     dd4:	ab 01       	movw	r20, r22
     dd6:	67 e0       	ldi	r22, 0x07	; 7
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	44 1f       	adc	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	6a 95       	dec	r22
     de2:	d1 f7       	brne	.-12     	; 0xdd8 <__unpack_f+0x54>
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	8c 93       	st	X, r24
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <__unpack_f+0x80>
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	44 1f       	adc	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	12 96       	adiw	r26, 0x02	; 2
     df4:	8d 91       	ld	r24, X+
     df6:	9c 91       	ld	r25, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	13 96       	adiw	r26, 0x03	; 3
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
     e02:	12 97       	sbiw	r26, 0x02	; 2
     e04:	20 30       	cpi	r18, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	38 07       	cpc	r19, r24
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	48 07       	cpc	r20, r24
     e0e:	80 e4       	ldi	r24, 0x40	; 64
     e10:	58 07       	cpc	r21, r24
     e12:	58 f3       	brcs	.-42     	; 0xdea <__unpack_f+0x66>
     e14:	14 96       	adiw	r26, 0x04	; 4
     e16:	2d 93       	st	X+, r18
     e18:	3d 93       	st	X+, r19
     e1a:	4d 93       	st	X+, r20
     e1c:	5c 93       	st	X, r21
     e1e:	17 97       	sbiw	r26, 0x07	; 7
     e20:	08 95       	ret
     e22:	2f 3f       	cpi	r18, 0xFF	; 255
     e24:	31 05       	cpc	r19, r1
     e26:	79 f4       	brne	.+30     	; 0xe46 <__unpack_f+0xc2>
     e28:	41 15       	cp	r20, r1
     e2a:	51 05       	cpc	r21, r1
     e2c:	61 05       	cpc	r22, r1
     e2e:	71 05       	cpc	r23, r1
     e30:	19 f4       	brne	.+6      	; 0xe38 <__unpack_f+0xb4>
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	8c 93       	st	X, r24
     e36:	08 95       	ret
     e38:	64 ff       	sbrs	r22, 4
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <__unpack_f+0xbe>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8c 93       	st	X, r24
     e40:	12 c0       	rjmp	.+36     	; 0xe66 <__unpack_f+0xe2>
     e42:	1c 92       	st	X, r1
     e44:	10 c0       	rjmp	.+32     	; 0xe66 <__unpack_f+0xe2>
     e46:	2f 57       	subi	r18, 0x7F	; 127
     e48:	30 40       	sbci	r19, 0x00	; 0
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	3c 93       	st	X, r19
     e4e:	2e 93       	st	-X, r18
     e50:	12 97       	sbiw	r26, 0x02	; 2
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	8c 93       	st	X, r24
     e56:	87 e0       	ldi	r24, 0x07	; 7
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	66 1f       	adc	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	8a 95       	dec	r24
     e62:	d1 f7       	brne	.-12     	; 0xe58 <__unpack_f+0xd4>
     e64:	70 64       	ori	r23, 0x40	; 64
     e66:	14 96       	adiw	r26, 0x04	; 4
     e68:	4d 93       	st	X+, r20
     e6a:	5d 93       	st	X+, r21
     e6c:	6d 93       	st	X+, r22
     e6e:	7c 93       	st	X, r23
     e70:	17 97       	sbiw	r26, 0x07	; 7
     e72:	08 95       	ret

00000e74 <__fpcmp_parts_f>:
     e74:	1f 93       	push	r17
     e76:	dc 01       	movw	r26, r24
     e78:	fb 01       	movw	r30, r22
     e7a:	9c 91       	ld	r25, X
     e7c:	92 30       	cpi	r25, 0x02	; 2
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <__fpcmp_parts_f+0xe>
     e80:	47 c0       	rjmp	.+142    	; 0xf10 <__fpcmp_parts_f+0x9c>
     e82:	80 81       	ld	r24, Z
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	08 f4       	brcc	.+2      	; 0xe8a <__fpcmp_parts_f+0x16>
     e88:	43 c0       	rjmp	.+134    	; 0xf10 <__fpcmp_parts_f+0x9c>
     e8a:	94 30       	cpi	r25, 0x04	; 4
     e8c:	51 f4       	brne	.+20     	; 0xea2 <__fpcmp_parts_f+0x2e>
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	1c 91       	ld	r17, X
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	99 f5       	brne	.+102    	; 0xefc <__fpcmp_parts_f+0x88>
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	68 2f       	mov	r22, r24
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	61 1b       	sub	r22, r17
     e9e:	71 09       	sbc	r23, r1
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <__fpcmp_parts_f+0xac>
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	21 f0       	breq	.+8      	; 0xeae <__fpcmp_parts_f+0x3a>
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	31 f4       	brne	.+12     	; 0xeb6 <__fpcmp_parts_f+0x42>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	b9 f1       	breq	.+110    	; 0xf1c <__fpcmp_parts_f+0xa8>
     eae:	81 81       	ldd	r24, Z+1	; 0x01
     eb0:	88 23       	and	r24, r24
     eb2:	89 f1       	breq	.+98     	; 0xf16 <__fpcmp_parts_f+0xa2>
     eb4:	2d c0       	rjmp	.+90     	; 0xf10 <__fpcmp_parts_f+0x9c>
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	1c 91       	ld	r17, X
     eba:	11 97       	sbiw	r26, 0x01	; 1
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	f1 f0       	breq	.+60     	; 0xefc <__fpcmp_parts_f+0x88>
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	18 17       	cp	r17, r24
     ec4:	d9 f4       	brne	.+54     	; 0xefc <__fpcmp_parts_f+0x88>
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	2d 91       	ld	r18, X+
     eca:	3c 91       	ld	r19, X
     ecc:	13 97       	sbiw	r26, 0x03	; 3
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	82 17       	cp	r24, r18
     ed4:	93 07       	cpc	r25, r19
     ed6:	94 f0       	brlt	.+36     	; 0xefc <__fpcmp_parts_f+0x88>
     ed8:	28 17       	cp	r18, r24
     eda:	39 07       	cpc	r19, r25
     edc:	bc f0       	brlt	.+46     	; 0xf0c <__fpcmp_parts_f+0x98>
     ede:	14 96       	adiw	r26, 0x04	; 4
     ee0:	8d 91       	ld	r24, X+
     ee2:	9d 91       	ld	r25, X+
     ee4:	0d 90       	ld	r0, X+
     ee6:	bc 91       	ld	r27, X
     ee8:	a0 2d       	mov	r26, r0
     eea:	24 81       	ldd	r18, Z+4	; 0x04
     eec:	35 81       	ldd	r19, Z+5	; 0x05
     eee:	46 81       	ldd	r20, Z+6	; 0x06
     ef0:	57 81       	ldd	r21, Z+7	; 0x07
     ef2:	28 17       	cp	r18, r24
     ef4:	39 07       	cpc	r19, r25
     ef6:	4a 07       	cpc	r20, r26
     ef8:	5b 07       	cpc	r21, r27
     efa:	18 f4       	brcc	.+6      	; 0xf02 <__fpcmp_parts_f+0x8e>
     efc:	11 23       	and	r17, r17
     efe:	41 f0       	breq	.+16     	; 0xf10 <__fpcmp_parts_f+0x9c>
     f00:	0a c0       	rjmp	.+20     	; 0xf16 <__fpcmp_parts_f+0xa2>
     f02:	82 17       	cp	r24, r18
     f04:	93 07       	cpc	r25, r19
     f06:	a4 07       	cpc	r26, r20
     f08:	b5 07       	cpc	r27, r21
     f0a:	40 f4       	brcc	.+16     	; 0xf1c <__fpcmp_parts_f+0xa8>
     f0c:	11 23       	and	r17, r17
     f0e:	19 f0       	breq	.+6      	; 0xf16 <__fpcmp_parts_f+0xa2>
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <__fpcmp_parts_f+0xac>
     f16:	6f ef       	ldi	r22, 0xFF	; 255
     f18:	7f ef       	ldi	r23, 0xFF	; 255
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__fpcmp_parts_f+0xac>
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	cb 01       	movw	r24, r22
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <ADC_voidInit>:

static void (*ADC_pfNotification)(void)= NULL;
static u8 ADC_u8BusyFlag =0;        //static not to change any file to change  this variable


void ADC_voidInit(void){
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
#if Voltage_Reference == AREF
	CLEAR_BIT(ADMUX,ADMUX_REFS1);
	CLEAR_BIT(ADMUX,ADMUX_REFS0);

#elif Voltage_Reference == AVCC
	CLEAR_BIT(ADMUX,ADMUX_REFS1);
     f2e:	a7 e2       	ldi	r26, 0x27	; 39
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e7 e2       	ldi	r30, 0x27	; 39
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 77       	andi	r24, 0x7F	; 127
     f3a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     f3c:	a7 e2       	ldi	r26, 0x27	; 39
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e2       	ldi	r30, 0x27	; 39
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 64       	ori	r24, 0x40	; 64
     f48:	8c 93       	st	X, r24
#endif

// Selecting ADC Adjustment
#if ADC_ADJUST == RIGHT

	CLEAR_BIT(ADMUX,ADMUX_ADLAR);
     f4a:	a7 e2       	ldi	r26, 0x27	; 39
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e2       	ldi	r30, 0x27	; 39
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8f 7d       	andi	r24, 0xDF	; 223
     f56:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADCSRA_ADPS0);
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
	SET_BIT(ADCSRA,ADCSRA_ADPS2);

#elif ADC_PreScalar == 128
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     f58:	a6 e2       	ldi	r26, 0x26	; 38
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e6 e2       	ldi	r30, 0x26	; 38
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	81 60       	ori	r24, 0x01	; 1
     f64:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     f66:	a6 e2       	ldi	r26, 0x26	; 38
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e6 e2       	ldi	r30, 0x26	; 38
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24


#endif

    //Disable Free Running Mode
	CLEAR_BIT(ADCSRA,ADCSRA_ADFR);
     f82:	a6 e2       	ldi	r26, 0x26	; 38
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e6 e2       	ldi	r30, 0x26	; 38
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7d       	andi	r24, 0xDF	; 223
     f8e:	8c 93       	st	X, r24

	//Enable ADC
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     f90:	a6 e2       	ldi	r26, 0x26	; 38
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e6 e2       	ldi	r30, 0x26	; 38
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 68       	ori	r24, 0x80	; 128
     f9c:	8c 93       	st	X, r24

}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <ADC_u16GetDigitalValue>:


u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNb){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <ADC_u16GetDigitalValue+0x6>
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8b 83       	std	Y+3, r24	; 0x03

	// Clear the mux Bits in ADMUX Reg
	ADMUX &= 0b11100000;
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 7e       	andi	r24, 0xE0	; 224
     fbe:	8c 93       	st	X, r24


	// ADMUX |=(ADMUX_CHANNEL_NUM_MASK);
	ADMUX |=Copy_u8ChannelNb;
     fc0:	a7 e2       	ldi	r26, 0x27	; 39
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e2       	ldi	r30, 0x27	; 39
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	90 81       	ld	r25, Z
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	89 2b       	or	r24, r25
     fce:	8c 93       	st	X, r24

	//START CONVERSION
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24

	//POLLING ON FLAG

	while (GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
     fde:	e6 e2       	ldi	r30, 0x26	; 38
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 95       	swap	r24
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	a9 f3       	breq	.-22     	; 0xfde <ADC_u16GetDigitalValue+0x3a>

		// CLEAR FLAG
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     ff4:	a6 e2       	ldi	r26, 0x26	; 38
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e6 e2       	ldi	r30, 0x26	; 38
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 61       	ori	r24, 0x10	; 16
    1000:	8c 93       	st	X, r24

		//READ ADC VALUE

		u16 res= ADCL ;
    1002:	e4 e2       	ldi	r30, 0x24	; 36
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	89 83       	std	Y+1, r24	; 0x01
		res |= (ADCH << 8) ;  // Reading Both Regs
    1010:	e5 e2       	ldi	r30, 0x25	; 37
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 2f       	mov	r25, r24
    101c:	88 27       	eor	r24, r24
    101e:	9c 01       	movw	r18, r24
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	82 2b       	or	r24, r18
    1026:	93 2b       	or	r25, r19
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
        //u16 res =ADC_REG;
		return res;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <ADC_voidGetDigitalValueAsynch>:

void ADC_voidGetDigitalValueAsynch(u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(void)) {
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <ADC_voidGetDigitalValueAsynch+0x6>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	7b 83       	std	Y+3, r23	; 0x03
    104c:	6a 83       	std	Y+2, r22	; 0x02

	if (ADC_u8BusyFlag==0 && Copy_pfNotification!= NULL){
    104e:	80 91 28 02 	lds	r24, 0x0228
    1052:	88 23       	and	r24, r24
    1054:	19 f5       	brne	.+70     	; 0x109c <ADC_voidGetDigitalValueAsynch+0x60>
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	f9 f0       	breq	.+62     	; 0x109c <ADC_voidGetDigitalValueAsynch+0x60>
	// ADMUX &=(ADMUX_CHANNEL_NUM_MASK);
	ADMUX |=Copy_u8ChannelNb;
    105e:	a7 e2       	ldi	r26, 0x27	; 39
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e2       	ldi	r30, 0x27	; 39
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	90 81       	ld	r25, Z
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	89 2b       	or	r24, r25
    106c:	8c 93       	st	X, r24

	//Set Flag to make ADC is busy

	ADC_u8BusyFlag=1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 28 02 	sts	0x0228, r24

	// Update Global Pointer to a function
	ADC_pfNotification=Copy_pfNotification;
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	90 93 27 02 	sts	0x0227, r25
    107c:	80 93 26 02 	sts	0x0226, r24

	//START CONVERSION
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1080:	a6 e2       	ldi	r26, 0x26	; 38
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e2       	ldi	r30, 0x26	; 38
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	8c 93       	st	X, r24

	//Enable ADC Interrupt
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    108e:	a6 e2       	ldi	r26, 0x26	; 38
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e2       	ldi	r30, 0x26	; 38
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	8c 93       	st	X, r24

	}


}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <__vector_21>:

void __vector_21(void)  __attribute__((signal)); /* Attribute signal to protect from the compiler from optimization*/
void __vector_21(void)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	00 90 5b 00 	lds	r0, 0x005B
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfNotification!= NULL){
    10d8:	80 91 26 02 	lds	r24, 0x0226
    10dc:	90 91 27 02 	lds	r25, 0x0227
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	71 f0       	breq	.+28     	; 0x1100 <__stack+0x1>
		//Clear Busy Flag
		ADC_u8BusyFlag=0;
    10e4:	10 92 28 02 	sts	0x0228, r1
		//Disable ADC Interrupt
		CLEAR_BIT(ADCSRA,ADCSRA_ADIE);
    10e8:	a6 e2       	ldi	r26, 0x26	; 38
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e6 e2       	ldi	r30, 0x26	; 38
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	8c 93       	st	X, r24

		// Calling Notification Function
		ADC_pfNotification();
    10f6:	e0 91 26 02 	lds	r30, 0x0226
    10fa:	f0 91 27 02 	lds	r31, 0x0227
    10fe:	09 95       	icall


	}
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	bf 91       	pop	r27
    110a:	af 91       	pop	r26
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	7f 91       	pop	r23
    1112:	6f 91       	pop	r22
    1114:	5f 91       	pop	r21
    1116:	4f 91       	pop	r20
    1118:	3f 91       	pop	r19
    111a:	2f 91       	pop	r18
    111c:	0f 90       	pop	r0
    111e:	00 92 5b 00 	sts	0x005B, r0
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <ADC_u16GetADCRegValue>:


u16 ADC_u16GetADCRegValue (void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	return ADC_REG;
    1134:	e4 e2       	ldi	r30, 0x24	; 36
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <LDR_u16GetDigitalReading>:




u16 LDR_u16GetDigitalReading(u8 Copy_u8ChannelNb)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <LDR_u16GetDigitalReading+0x6>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_DigitalReading_LDR ;

	ADC_DigitalReading_LDR = ADC_u16GetDigitalValue(Copy_u8ChannelNb);
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <ADC_u16GetDigitalValue>
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01

	return ADC_DigitalReading_LDR ;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02

}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <LDR_u16GetAnalogReading>:

u16 LDR_u16GetAnalogReading(u8 Copy_u8ChannelNb) // o/p >> millivolt
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <LDR_u16GetAnalogReading+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <LDR_u16GetAnalogReading+0x8>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8d 83       	std	Y+5, r24	; 0x05
	u16 ADC_AnalogReading_LDR , ADC_DigitalReading_LDR;

	// output from ADC >> Digital
	ADC_DigitalReading_LDR = ADC_u16GetDigitalValue(Copy_u8ChannelNb);
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <ADC_u16GetDigitalValue>
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01

    // Conversion into Analog voltage in mv
 	ADC_AnalogReading_LDR=((u32)ADC_DigitalReading_LDR * 5000UL)/1024;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	cc 01       	movw	r24, r24
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	28 e8       	ldi	r18, 0x88	; 136
    1190:	33 e1       	ldi	r19, 0x13	; 19
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 80 1c 	call	0x3900	; 0x3900 <__mulsi3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	07 2e       	mov	r0, r23
    11a4:	7a e0       	ldi	r23, 0x0A	; 10
    11a6:	b6 95       	lsr	r27
    11a8:	a7 95       	ror	r26
    11aa:	97 95       	ror	r25
    11ac:	87 95       	ror	r24
    11ae:	7a 95       	dec	r23
    11b0:	d1 f7       	brne	.-12     	; 0x11a6 <LDR_u16GetAnalogReading+0x3c>
    11b2:	70 2d       	mov	r23, r0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03

	return ADC_AnalogReading_LDR ;
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <Dio_SetChannelDirection>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function set direction for single channel ID"*****************************/
/*******************************************************************************************************/

void Dio_SetChannelDirection(Dio_ChannelType ChannelId , Dio_DirectionTypes Direction)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <Dio_SetChannelDirection+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <Dio_SetChannelDirection+0x8>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <Dio_SetChannelDirection+0xa>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	6c 83       	std	Y+4, r22	; 0x04
	Dio_PortType PoId = ChannelId/8;
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	86 95       	lsr	r24
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortType ChId = ChannelId%8;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	87 70       	andi	r24, 0x07	; 7
    11ec:	89 83       	std	Y+1, r24	; 0x01
	switch(PoId)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3e 83       	std	Y+6, r19	; 0x06
    11f6:	2d 83       	std	Y+5, r18	; 0x05
    11f8:	6d 81       	ldd	r22, Y+5	; 0x05
    11fa:	7e 81       	ldd	r23, Y+6	; 0x06
    11fc:	63 30       	cpi	r22, 0x03	; 3
    11fe:	71 05       	cpc	r23, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <Dio_SetChannelDirection+0x38>
    1202:	96 c0       	rjmp	.+300    	; 0x1330 <Dio_SetChannelDirection+0x164>
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	91 05       	cpc	r25, r1
    120c:	94 f4       	brge	.+36     	; 0x1232 <Dio_SetChannelDirection+0x66>
    120e:	ed 81       	ldd	r30, Y+5	; 0x05
    1210:	fe 81       	ldd	r31, Y+6	; 0x06
    1212:	e1 30       	cpi	r30, 0x01	; 1
    1214:	f1 05       	cpc	r31, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <Dio_SetChannelDirection+0x4e>
    1218:	43 c0       	rjmp	.+134    	; 0x12a0 <Dio_SetChannelDirection+0xd4>
    121a:	2d 81       	ldd	r18, Y+5	; 0x05
    121c:	3e 81       	ldd	r19, Y+6	; 0x06
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	0c f0       	brlt	.+2      	; 0x1226 <Dio_SetChannelDirection+0x5a>
    1224:	61 c0       	rjmp	.+194    	; 0x12e8 <Dio_SetChannelDirection+0x11c>
    1226:	6d 81       	ldd	r22, Y+5	; 0x05
    1228:	7e 81       	ldd	r23, Y+6	; 0x06
    122a:	61 15       	cp	r22, r1
    122c:	71 05       	cpc	r23, r1
    122e:	a1 f0       	breq	.+40     	; 0x1258 <Dio_SetChannelDirection+0x8c>
    1230:	12 c1       	rjmp	.+548    	; 0x1456 <Dio_SetChannelDirection+0x28a>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	85 30       	cpi	r24, 0x05	; 5
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <Dio_SetChannelDirection+0x72>
    123c:	c1 c0       	rjmp	.+386    	; 0x13c0 <Dio_SetChannelDirection+0x1f4>
    123e:	ed 81       	ldd	r30, Y+5	; 0x05
    1240:	fe 81       	ldd	r31, Y+6	; 0x06
    1242:	e5 30       	cpi	r30, 0x05	; 5
    1244:	f1 05       	cpc	r31, r1
    1246:	0c f4       	brge	.+2      	; 0x124a <Dio_SetChannelDirection+0x7e>
    1248:	97 c0       	rjmp	.+302    	; 0x1378 <Dio_SetChannelDirection+0x1ac>
    124a:	2d 81       	ldd	r18, Y+5	; 0x05
    124c:	3e 81       	ldd	r19, Y+6	; 0x06
    124e:	26 30       	cpi	r18, 0x06	; 6
    1250:	31 05       	cpc	r19, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <Dio_SetChannelDirection+0x8a>
    1254:	dd c0       	rjmp	.+442    	; 0x1410 <Dio_SetChannelDirection+0x244>
    1256:	ff c0       	rjmp	.+510    	; 0x1456 <Dio_SetChannelDirection+0x28a>
	{
		case DIOA:MOD_BIT(_DIOA_.DDR,ChId,Direction);break;
    1258:	a9 e3       	ldi	r26, 0x39	; 57
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e9 e3       	ldi	r30, 0x39	; 57
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	48 2f       	mov	r20, r24
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <Dio_SetChannelDirection+0xa8>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	2a 95       	dec	r18
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <Dio_SetChannelDirection+0xa4>
    1278:	80 95       	com	r24
    127a:	48 23       	and	r20, r24
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	b9 01       	movw	r22, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <Dio_SetChannelDirection+0xc4>
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <Dio_SetChannelDirection+0xc0>
    1294:	cb 01       	movw	r24, r22
    1296:	84 2b       	or	r24, r20
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	8c 93       	st	X, r24
    129c:	11 97       	sbiw	r26, 0x01	; 1
    129e:	db c0       	rjmp	.+438    	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOB:MOD_BIT(_DIOB_.DDR,ChId,Direction);break;
    12a0:	a6 e3       	ldi	r26, 0x36	; 54
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e3       	ldi	r30, 0x36	; 54
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	81 81       	ldd	r24, Z+1	; 0x01
    12aa:	48 2f       	mov	r20, r24
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <Dio_SetChannelDirection+0xf0>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	2a 95       	dec	r18
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <Dio_SetChannelDirection+0xec>
    12c0:	80 95       	com	r24
    12c2:	48 23       	and	r20, r24
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	f9 01       	movw	r30, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <Dio_SetChannelDirection+0x10c>
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <Dio_SetChannelDirection+0x108>
    12dc:	cf 01       	movw	r24, r30
    12de:	84 2b       	or	r24, r20
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	8c 93       	st	X, r24
    12e4:	11 97       	sbiw	r26, 0x01	; 1
    12e6:	b7 c0       	rjmp	.+366    	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOC:MOD_BIT(_DIOC_.DDR,ChId,Direction);break;
    12e8:	a3 e3       	ldi	r26, 0x33	; 51
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e3 e3       	ldi	r30, 0x33	; 51
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	48 2f       	mov	r20, r24
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <Dio_SetChannelDirection+0x138>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <Dio_SetChannelDirection+0x134>
    1308:	80 95       	com	r24
    130a:	48 23       	and	r20, r24
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	b9 01       	movw	r22, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <Dio_SetChannelDirection+0x154>
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	8a 95       	dec	r24
    1322:	e2 f7       	brpl	.-8      	; 0x131c <Dio_SetChannelDirection+0x150>
    1324:	cb 01       	movw	r24, r22
    1326:	84 2b       	or	r24, r20
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	8c 93       	st	X, r24
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	93 c0       	rjmp	.+294    	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOD:MOD_BIT(_DIOD_.DDR,ChId,Direction);break;
    1330:	a0 e3       	ldi	r26, 0x30	; 48
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e0 e3       	ldi	r30, 0x30	; 48
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	81 81       	ldd	r24, Z+1	; 0x01
    133a:	48 2f       	mov	r20, r24
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <Dio_SetChannelDirection+0x180>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	2a 95       	dec	r18
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <Dio_SetChannelDirection+0x17c>
    1350:	80 95       	com	r24
    1352:	48 23       	and	r20, r24
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <Dio_SetChannelDirection+0x19c>
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <Dio_SetChannelDirection+0x198>
    136c:	cf 01       	movw	r24, r30
    136e:	84 2b       	or	r24, r20
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	8c 93       	st	X, r24
    1374:	11 97       	sbiw	r26, 0x01	; 1
    1376:	6f c0       	rjmp	.+222    	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOE:MOD_BIT(_DIOE_.DDR,ChId,Direction);break;
    1378:	a1 e2       	ldi	r26, 0x21	; 33
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e2       	ldi	r30, 0x21	; 33
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	81 81       	ldd	r24, Z+1	; 0x01
    1382:	48 2f       	mov	r20, r24
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <Dio_SetChannelDirection+0x1c8>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	2a 95       	dec	r18
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <Dio_SetChannelDirection+0x1c4>
    1398:	80 95       	com	r24
    139a:	48 23       	and	r20, r24
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	b9 01       	movw	r22, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <Dio_SetChannelDirection+0x1e4>
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <Dio_SetChannelDirection+0x1e0>
    13b4:	cb 01       	movw	r24, r22
    13b6:	84 2b       	or	r24, r20
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	8c 93       	st	X, r24
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	4b c0       	rjmp	.+150    	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOF:MOD_BIT(_DIOF_.DDR,ChId,Direction);break;
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	ef 5b       	subi	r30, 0xBF	; 191
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	68 2f       	mov	r22, r24
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <Dio_SetChannelDirection+0x216>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	2a 95       	dec	r18
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <Dio_SetChannelDirection+0x212>
    13e6:	80 95       	com	r24
    13e8:	68 23       	and	r22, r24
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <Dio_SetChannelDirection+0x232>
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <Dio_SetChannelDirection+0x22e>
    1402:	cf 01       	movw	r24, r30
    1404:	86 2b       	or	r24, r22
    1406:	fa 01       	movw	r30, r20
    1408:	ef 5b       	subi	r30, 0xBF	; 191
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 83       	st	Z, r24
    140e:	23 c0       	rjmp	.+70     	; 0x1456 <Dio_SetChannelDirection+0x28a>
		case DIOG:MOD_BIT(_DIOG_.DDR,ChId,Direction);break;
    1410:	a3 e6       	ldi	r26, 0x63	; 99
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e3 e6       	ldi	r30, 0x63	; 99
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	81 81       	ldd	r24, Z+1	; 0x01
    141a:	48 2f       	mov	r20, r24
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <Dio_SetChannelDirection+0x260>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	2a 95       	dec	r18
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <Dio_SetChannelDirection+0x25c>
    1430:	80 95       	com	r24
    1432:	48 23       	and	r20, r24
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	b9 01       	movw	r22, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <Dio_SetChannelDirection+0x27c>
    1444:	66 0f       	add	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <Dio_SetChannelDirection+0x278>
    144c:	cb 01       	movw	r24, r22
    144e:	84 2b       	or	r24, r20
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	8c 93       	st	X, r24
    1454:	11 97       	sbiw	r26, 0x01	; 1
		case Dio_PortMax:break;
		default:break;		
	}
}
    1456:	26 96       	adiw	r28, 0x06	; 6
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <Dio_WriteChannel>:
/*	Level		<<Dio_LevelType>>	STD_LOW - STD_HIGH**************************************************/
/*Function return: No return****************************************************************************/
/*Function Description: "This function set level for single channel ID"*********************************/
/*******************************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId , Dio_LevelType Level)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <Dio_WriteChannel+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Dio_WriteChannel+0x8>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <Dio_WriteChannel+0xa>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	6c 83       	std	Y+4, r22	; 0x04
	Dio_PortType PoId = ChannelId/8;
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	86 95       	lsr	r24
    147e:	86 95       	lsr	r24
    1480:	86 95       	lsr	r24
    1482:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortType ChId = ChannelId%8;
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	87 70       	andi	r24, 0x07	; 7
    1488:	89 83       	std	Y+1, r24	; 0x01
	switch(PoId)
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	2d 83       	std	Y+5, r18	; 0x05
    1494:	6d 81       	ldd	r22, Y+5	; 0x05
    1496:	7e 81       	ldd	r23, Y+6	; 0x06
    1498:	63 30       	cpi	r22, 0x03	; 3
    149a:	71 05       	cpc	r23, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <Dio_WriteChannel+0x38>
    149e:	96 c0       	rjmp	.+300    	; 0x15cc <Dio_WriteChannel+0x164>
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	91 05       	cpc	r25, r1
    14a8:	94 f4       	brge	.+36     	; 0x14ce <Dio_WriteChannel+0x66>
    14aa:	ed 81       	ldd	r30, Y+5	; 0x05
    14ac:	fe 81       	ldd	r31, Y+6	; 0x06
    14ae:	e1 30       	cpi	r30, 0x01	; 1
    14b0:	f1 05       	cpc	r31, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <Dio_WriteChannel+0x4e>
    14b4:	43 c0       	rjmp	.+134    	; 0x153c <Dio_WriteChannel+0xd4>
    14b6:	2d 81       	ldd	r18, Y+5	; 0x05
    14b8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <Dio_WriteChannel+0x5a>
    14c0:	61 c0       	rjmp	.+194    	; 0x1584 <Dio_WriteChannel+0x11c>
    14c2:	6d 81       	ldd	r22, Y+5	; 0x05
    14c4:	7e 81       	ldd	r23, Y+6	; 0x06
    14c6:	61 15       	cp	r22, r1
    14c8:	71 05       	cpc	r23, r1
    14ca:	a1 f0       	breq	.+40     	; 0x14f4 <Dio_WriteChannel+0x8c>
    14cc:	12 c1       	rjmp	.+548    	; 0x16f2 <Dio_WriteChannel+0x28a>
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <Dio_WriteChannel+0x72>
    14d8:	c1 c0       	rjmp	.+386    	; 0x165c <Dio_WriteChannel+0x1f4>
    14da:	ed 81       	ldd	r30, Y+5	; 0x05
    14dc:	fe 81       	ldd	r31, Y+6	; 0x06
    14de:	e5 30       	cpi	r30, 0x05	; 5
    14e0:	f1 05       	cpc	r31, r1
    14e2:	0c f4       	brge	.+2      	; 0x14e6 <Dio_WriteChannel+0x7e>
    14e4:	97 c0       	rjmp	.+302    	; 0x1614 <Dio_WriteChannel+0x1ac>
    14e6:	2d 81       	ldd	r18, Y+5	; 0x05
    14e8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ea:	26 30       	cpi	r18, 0x06	; 6
    14ec:	31 05       	cpc	r19, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <Dio_WriteChannel+0x8a>
    14f0:	dd c0       	rjmp	.+442    	; 0x16ac <Dio_WriteChannel+0x244>
    14f2:	ff c0       	rjmp	.+510    	; 0x16f2 <Dio_WriteChannel+0x28a>
	{
		case DIOA:MOD_BIT(_DIOA_.PORT,ChId,Level);break;
    14f4:	a9 e3       	ldi	r26, 0x39	; 57
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e9 e3       	ldi	r30, 0x39	; 57
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	48 2f       	mov	r20, r24
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <Dio_WriteChannel+0xa8>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	2a 95       	dec	r18
    1512:	e2 f7       	brpl	.-8      	; 0x150c <Dio_WriteChannel+0xa4>
    1514:	80 95       	com	r24
    1516:	48 23       	and	r20, r24
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	b9 01       	movw	r22, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <Dio_WriteChannel+0xc4>
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <Dio_WriteChannel+0xc0>
    1530:	cb 01       	movw	r24, r22
    1532:	84 2b       	or	r24, r20
    1534:	12 96       	adiw	r26, 0x02	; 2
    1536:	8c 93       	st	X, r24
    1538:	12 97       	sbiw	r26, 0x02	; 2
    153a:	db c0       	rjmp	.+438    	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOB:MOD_BIT(_DIOB_.PORT,ChId,Level);break;
    153c:	a6 e3       	ldi	r26, 0x36	; 54
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e6 e3       	ldi	r30, 0x36	; 54
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	48 2f       	mov	r20, r24
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <Dio_WriteChannel+0xf0>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	2a 95       	dec	r18
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <Dio_WriteChannel+0xec>
    155c:	80 95       	com	r24
    155e:	48 23       	and	r20, r24
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	f9 01       	movw	r30, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <Dio_WriteChannel+0x10c>
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <Dio_WriteChannel+0x108>
    1578:	cf 01       	movw	r24, r30
    157a:	84 2b       	or	r24, r20
    157c:	12 96       	adiw	r26, 0x02	; 2
    157e:	8c 93       	st	X, r24
    1580:	12 97       	sbiw	r26, 0x02	; 2
    1582:	b7 c0       	rjmp	.+366    	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOC:MOD_BIT(_DIOC_.PORT,ChId,Level);break;
    1584:	a3 e3       	ldi	r26, 0x33	; 51
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e3 e3       	ldi	r30, 0x33	; 51
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	48 2f       	mov	r20, r24
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Dio_WriteChannel+0x138>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	2a 95       	dec	r18
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <Dio_WriteChannel+0x134>
    15a4:	80 95       	com	r24
    15a6:	48 23       	and	r20, r24
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	b9 01       	movw	r22, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <Dio_WriteChannel+0x154>
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	8a 95       	dec	r24
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <Dio_WriteChannel+0x150>
    15c0:	cb 01       	movw	r24, r22
    15c2:	84 2b       	or	r24, r20
    15c4:	12 96       	adiw	r26, 0x02	; 2
    15c6:	8c 93       	st	X, r24
    15c8:	12 97       	sbiw	r26, 0x02	; 2
    15ca:	93 c0       	rjmp	.+294    	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOD:MOD_BIT(_DIOD_.PORT,ChId,Level);break;
    15cc:	a0 e3       	ldi	r26, 0x30	; 48
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e0 e3       	ldi	r30, 0x30	; 48
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	48 2f       	mov	r20, r24
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <Dio_WriteChannel+0x180>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <Dio_WriteChannel+0x17c>
    15ec:	80 95       	com	r24
    15ee:	48 23       	and	r20, r24
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	f9 01       	movw	r30, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <Dio_WriteChannel+0x19c>
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	8a 95       	dec	r24
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <Dio_WriteChannel+0x198>
    1608:	cf 01       	movw	r24, r30
    160a:	84 2b       	or	r24, r20
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	8c 93       	st	X, r24
    1610:	12 97       	sbiw	r26, 0x02	; 2
    1612:	6f c0       	rjmp	.+222    	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOE:MOD_BIT(_DIOE_.PORT,ChId,Level);break;
    1614:	a1 e2       	ldi	r26, 0x21	; 33
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e2       	ldi	r30, 0x21	; 33
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	48 2f       	mov	r20, r24
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <Dio_WriteChannel+0x1c8>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	2a 95       	dec	r18
    1632:	e2 f7       	brpl	.-8      	; 0x162c <Dio_WriteChannel+0x1c4>
    1634:	80 95       	com	r24
    1636:	48 23       	and	r20, r24
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	b9 01       	movw	r22, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <Dio_WriteChannel+0x1e4>
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <Dio_WriteChannel+0x1e0>
    1650:	cb 01       	movw	r24, r22
    1652:	84 2b       	or	r24, r20
    1654:	12 96       	adiw	r26, 0x02	; 2
    1656:	8c 93       	st	X, r24
    1658:	12 97       	sbiw	r26, 0x02	; 2
    165a:	4b c0       	rjmp	.+150    	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOF:MOD_BIT(_DIOF_.PORT,ChId,Level);break;
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fc 01       	movw	r30, r24
    1666:	ee 5b       	subi	r30, 0xBE	; 190
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	68 2f       	mov	r22, r24
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <Dio_WriteChannel+0x216>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	2a 95       	dec	r18
    1680:	e2 f7       	brpl	.-8      	; 0x167a <Dio_WriteChannel+0x212>
    1682:	80 95       	com	r24
    1684:	68 23       	and	r22, r24
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <Dio_WriteChannel+0x232>
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	8a 95       	dec	r24
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <Dio_WriteChannel+0x22e>
    169e:	cf 01       	movw	r24, r30
    16a0:	86 2b       	or	r24, r22
    16a2:	fa 01       	movw	r30, r20
    16a4:	ee 5b       	subi	r30, 0xBE	; 190
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 83       	st	Z, r24
    16aa:	23 c0       	rjmp	.+70     	; 0x16f2 <Dio_WriteChannel+0x28a>
		case DIOG:MOD_BIT(_DIOG_.PORT,ChId,Level);break;
    16ac:	a3 e6       	ldi	r26, 0x63	; 99
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e3 e6       	ldi	r30, 0x63	; 99
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	48 2f       	mov	r20, r24
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <Dio_WriteChannel+0x260>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	2a 95       	dec	r18
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <Dio_WriteChannel+0x25c>
    16cc:	80 95       	com	r24
    16ce:	48 23       	and	r20, r24
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b9 01       	movw	r22, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <Dio_WriteChannel+0x27c>
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	8a 95       	dec	r24
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <Dio_WriteChannel+0x278>
    16e8:	cb 01       	movw	r24, r22
    16ea:	84 2b       	or	r24, r20
    16ec:	12 96       	adiw	r26, 0x02	; 2
    16ee:	8c 93       	st	X, r24
    16f0:	12 97       	sbiw	r26, 0x02	; 2
		case Dio_PortMax:break;
		default:break;
	}
}
    16f2:	26 96       	adiw	r28, 0x06	; 6
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <Dio_ReadChannel>:
/*Function return:**************************************************************************************/
/*	ChannelLevel	<<Dio_LevelType>>	STD_LOW - STD_HIGH**********************************************/
/*Function Description: "This function get level for single channel ID"*********************************/
/*******************************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <Dio_ReadChannel+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <Dio_ReadChannel+0x8>
    170c:	00 d0       	rcall	.+0      	; 0x170e <Dio_ReadChannel+0xa>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	8c 83       	std	Y+4, r24	; 0x04
	Dio_LevelType LocalPinVal = STD_LOW;
    1714:	1b 82       	std	Y+3, r1	; 0x03
	Dio_PortType PoId = ChannelId/8;
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortType ChId = ChannelId%8;
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	87 70       	andi	r24, 0x07	; 7
    1724:	89 83       	std	Y+1, r24	; 0x01
	switch(PoId)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3e 83       	std	Y+6, r19	; 0x06
    172e:	2d 83       	std	Y+5, r18	; 0x05
    1730:	4d 81       	ldd	r20, Y+5	; 0x05
    1732:	5e 81       	ldd	r21, Y+6	; 0x06
    1734:	43 30       	cpi	r20, 0x03	; 3
    1736:	51 05       	cpc	r21, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <Dio_ReadChannel+0x38>
    173a:	5e c0       	rjmp	.+188    	; 0x17f8 <Dio_ReadChannel+0xf4>
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	84 30       	cpi	r24, 0x04	; 4
    1742:	91 05       	cpc	r25, r1
    1744:	84 f4       	brge	.+32     	; 0x1766 <Dio_ReadChannel+0x62>
    1746:	2d 81       	ldd	r18, Y+5	; 0x05
    1748:	3e 81       	ldd	r19, Y+6	; 0x06
    174a:	21 30       	cpi	r18, 0x01	; 1
    174c:	31 05       	cpc	r19, r1
    174e:	81 f1       	breq	.+96     	; 0x17b0 <Dio_ReadChannel+0xac>
    1750:	4d 81       	ldd	r20, Y+5	; 0x05
    1752:	5e 81       	ldd	r21, Y+6	; 0x06
    1754:	42 30       	cpi	r20, 0x02	; 2
    1756:	51 05       	cpc	r21, r1
    1758:	0c f0       	brlt	.+2      	; 0x175c <Dio_ReadChannel+0x58>
    175a:	3c c0       	rjmp	.+120    	; 0x17d4 <Dio_ReadChannel+0xd0>
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	a1 f0       	breq	.+40     	; 0x178c <Dio_ReadChannel+0x88>
    1764:	90 c0       	rjmp	.+288    	; 0x1886 <Dio_ReadChannel+0x182>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	25 30       	cpi	r18, 0x05	; 5
    176c:	31 05       	cpc	r19, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <Dio_ReadChannel+0x6e>
    1770:	67 c0       	rjmp	.+206    	; 0x1840 <Dio_ReadChannel+0x13c>
    1772:	4d 81       	ldd	r20, Y+5	; 0x05
    1774:	5e 81       	ldd	r21, Y+6	; 0x06
    1776:	45 30       	cpi	r20, 0x05	; 5
    1778:	51 05       	cpc	r21, r1
    177a:	0c f4       	brge	.+2      	; 0x177e <Dio_ReadChannel+0x7a>
    177c:	4f c0       	rjmp	.+158    	; 0x181c <Dio_ReadChannel+0x118>
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	86 30       	cpi	r24, 0x06	; 6
    1784:	91 05       	cpc	r25, r1
    1786:	09 f4       	brne	.+2      	; 0x178a <Dio_ReadChannel+0x86>
    1788:	6d c0       	rjmp	.+218    	; 0x1864 <Dio_ReadChannel+0x160>
    178a:	7d c0       	rjmp	.+250    	; 0x1886 <Dio_ReadChannel+0x182>
	{
		case DIOA:LocalPinVal =  GET_BIT(_DIOA_.PIN,ChId);break;
    178c:	e9 e3       	ldi	r30, 0x39	; 57
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <Dio_ReadChannel+0xa0>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <Dio_ReadChannel+0x9c>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	6b c0       	rjmp	.+214    	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOB:LocalPinVal =  GET_BIT(_DIOB_.PIN,ChId);break;
    17b0:	e6 e3       	ldi	r30, 0x36	; 54
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <Dio_ReadChannel+0xc4>
    17c4:	55 95       	asr	r21
    17c6:	47 95       	ror	r20
    17c8:	8a 95       	dec	r24
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <Dio_ReadChannel+0xc0>
    17cc:	ca 01       	movw	r24, r20
    17ce:	81 70       	andi	r24, 0x01	; 1
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	59 c0       	rjmp	.+178    	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOC:LocalPinVal =  GET_BIT(_DIOC_.PIN,ChId);break;
    17d4:	e3 e3       	ldi	r30, 0x33	; 51
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a9 01       	movw	r20, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <Dio_ReadChannel+0xe8>
    17e8:	55 95       	asr	r21
    17ea:	47 95       	ror	r20
    17ec:	8a 95       	dec	r24
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <Dio_ReadChannel+0xe4>
    17f0:	ca 01       	movw	r24, r20
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	8b 83       	std	Y+3, r24	; 0x03
    17f6:	47 c0       	rjmp	.+142    	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOD:LocalPinVal =  GET_BIT(_DIOD_.PIN,ChId);break;
    17f8:	e0 e3       	ldi	r30, 0x30	; 48
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <Dio_ReadChannel+0x10c>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <Dio_ReadChannel+0x108>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	35 c0       	rjmp	.+106    	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOE:LocalPinVal =  GET_BIT(_DIOE_.PIN,ChId);break;
    181c:	e1 e2       	ldi	r30, 0x21	; 33
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a9 01       	movw	r20, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <Dio_ReadChannel+0x130>
    1830:	55 95       	asr	r21
    1832:	47 95       	ror	r20
    1834:	8a 95       	dec	r24
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <Dio_ReadChannel+0x12c>
    1838:	ca 01       	movw	r24, r20
    183a:	81 70       	andi	r24, 0x01	; 1
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	23 c0       	rjmp	.+70     	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOF:LocalPinVal =  GET_BIT(_DIOF_.PIN,ChId);break;
    1840:	e0 e2       	ldi	r30, 0x20	; 32
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <Dio_ReadChannel+0x154>
    1854:	55 95       	asr	r21
    1856:	47 95       	ror	r20
    1858:	8a 95       	dec	r24
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <Dio_ReadChannel+0x150>
    185c:	ca 01       	movw	r24, r20
    185e:	81 70       	andi	r24, 0x01	; 1
    1860:	8b 83       	std	Y+3, r24	; 0x03
    1862:	11 c0       	rjmp	.+34     	; 0x1886 <Dio_ReadChannel+0x182>
		case DIOG:LocalPinVal =  GET_BIT(_DIOG_.PIN,ChId);break;
    1864:	e3 e6       	ldi	r30, 0x63	; 99
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <Dio_ReadChannel+0x178>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <Dio_ReadChannel+0x174>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	8b 83       	std	Y+3, r24	; 0x03
		case Dio_PortMax:break;
		default:break;
	}
	return LocalPinVal;
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1888:	26 96       	adiw	r28, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <Dio_FlipChannel>:
/*	ChannelId	<<Dio_ChannelType>> DIOpc -- p(A,B,C,D,E,F,G) -- c(0...7) # Exp. Max PortG DIOG4********/
/*Function return: No return****************************************************************************/
/*Function Description: "This function toggle or flip level for single channel ID"**********************/
/*******************************************************************************************************/
void Dio_FlipChannel(Dio_ChannelType ChannelId)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <Dio_FlipChannel+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <Dio_FlipChannel+0x8>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	8b 83       	std	Y+3, r24	; 0x03
	Dio_PortType PoId = ChannelId/8;
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	86 95       	lsr	r24
    18ae:	86 95       	lsr	r24
    18b0:	86 95       	lsr	r24
    18b2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortType ChId = ChannelId%8;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	87 70       	andi	r24, 0x07	; 7
    18b8:	89 83       	std	Y+1, r24	; 0x01
	switch(PoId)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3d 83       	std	Y+5, r19	; 0x05
    18c2:	2c 83       	std	Y+4, r18	; 0x04
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <Dio_FlipChannel+0x36>
    18ce:	67 c0       	rjmp	.+206    	; 0x199e <Dio_FlipChannel+0x104>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	24 30       	cpi	r18, 0x04	; 4
    18d6:	31 05       	cpc	r19, r1
    18d8:	84 f4       	brge	.+32     	; 0x18fa <Dio_FlipChannel+0x60>
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	99 f1       	breq	.+102    	; 0x194a <Dio_FlipChannel+0xb0>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	0c f0       	brlt	.+2      	; 0x18f0 <Dio_FlipChannel+0x56>
    18ee:	42 c0       	rjmp	.+132    	; 0x1974 <Dio_FlipChannel+0xda>
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	a1 f0       	breq	.+40     	; 0x1920 <Dio_FlipChannel+0x86>
    18f8:	a9 c0       	rjmp	.+338    	; 0x1a4c <Dio_FlipChannel+0x1b2>
    18fa:	2c 81       	ldd	r18, Y+4	; 0x04
    18fc:	3d 81       	ldd	r19, Y+5	; 0x05
    18fe:	25 30       	cpi	r18, 0x05	; 5
    1900:	31 05       	cpc	r19, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <Dio_FlipChannel+0x6c>
    1904:	76 c0       	rjmp	.+236    	; 0x19f2 <Dio_FlipChannel+0x158>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	85 30       	cpi	r24, 0x05	; 5
    190c:	91 05       	cpc	r25, r1
    190e:	0c f4       	brge	.+2      	; 0x1912 <Dio_FlipChannel+0x78>
    1910:	5b c0       	rjmp	.+182    	; 0x19c8 <Dio_FlipChannel+0x12e>
    1912:	2c 81       	ldd	r18, Y+4	; 0x04
    1914:	3d 81       	ldd	r19, Y+5	; 0x05
    1916:	26 30       	cpi	r18, 0x06	; 6
    1918:	31 05       	cpc	r19, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <Dio_FlipChannel+0x84>
    191c:	83 c0       	rjmp	.+262    	; 0x1a24 <Dio_FlipChannel+0x18a>
    191e:	96 c0       	rjmp	.+300    	; 0x1a4c <Dio_FlipChannel+0x1b2>
	{
		case DIOA:TOGGLE_BIT(_DIOA_.PORT,ChId);break;
    1920:	a9 e3       	ldi	r26, 0x39	; 57
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e9 e3       	ldi	r30, 0x39	; 57
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	42 81       	ldd	r20, Z+2	; 0x02
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <Dio_FlipChannel+0xa2>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <Dio_FlipChannel+0x9e>
    1940:	84 27       	eor	r24, r20
    1942:	12 96       	adiw	r26, 0x02	; 2
    1944:	8c 93       	st	X, r24
    1946:	12 97       	sbiw	r26, 0x02	; 2
    1948:	81 c0       	rjmp	.+258    	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOB:TOGGLE_BIT(_DIOB_.PORT,ChId);break;
    194a:	a6 e3       	ldi	r26, 0x36	; 54
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e6 e3       	ldi	r30, 0x36	; 54
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	42 81       	ldd	r20, Z+2	; 0x02
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <Dio_FlipChannel+0xcc>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <Dio_FlipChannel+0xc8>
    196a:	84 27       	eor	r24, r20
    196c:	12 96       	adiw	r26, 0x02	; 2
    196e:	8c 93       	st	X, r24
    1970:	12 97       	sbiw	r26, 0x02	; 2
    1972:	6c c0       	rjmp	.+216    	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOC:TOGGLE_BIT(_DIOC_.PORT,ChId);break;
    1974:	a3 e3       	ldi	r26, 0x33	; 51
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e3 e3       	ldi	r30, 0x33	; 51
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	42 81       	ldd	r20, Z+2	; 0x02
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <Dio_FlipChannel+0xf6>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <Dio_FlipChannel+0xf2>
    1994:	84 27       	eor	r24, r20
    1996:	12 96       	adiw	r26, 0x02	; 2
    1998:	8c 93       	st	X, r24
    199a:	12 97       	sbiw	r26, 0x02	; 2
    199c:	57 c0       	rjmp	.+174    	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOD:TOGGLE_BIT(_DIOD_.PORT,ChId);break;
    199e:	a0 e3       	ldi	r26, 0x30	; 48
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e0 e3       	ldi	r30, 0x30	; 48
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	42 81       	ldd	r20, Z+2	; 0x02
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <Dio_FlipChannel+0x120>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <Dio_FlipChannel+0x11c>
    19be:	84 27       	eor	r24, r20
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	8c 93       	st	X, r24
    19c4:	12 97       	sbiw	r26, 0x02	; 2
    19c6:	42 c0       	rjmp	.+132    	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOE:TOGGLE_BIT(_DIOE_.PORT,ChId);break;
    19c8:	a1 e2       	ldi	r26, 0x21	; 33
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e1 e2       	ldi	r30, 0x21	; 33
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	42 81       	ldd	r20, Z+2	; 0x02
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <Dio_FlipChannel+0x14a>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <Dio_FlipChannel+0x146>
    19e8:	84 27       	eor	r24, r20
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	8c 93       	st	X, r24
    19ee:	12 97       	sbiw	r26, 0x02	; 2
    19f0:	2d c0       	rjmp	.+90     	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOF:TOGGLE_BIT(_DIOF_.PORT,ChId);break;
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	ee 5b       	subi	r30, 0xBE	; 190
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <Dio_FlipChannel+0x17a>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <Dio_FlipChannel+0x176>
    1a18:	86 27       	eor	r24, r22
    1a1a:	fa 01       	movw	r30, r20
    1a1c:	ee 5b       	subi	r30, 0xBE	; 190
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <Dio_FlipChannel+0x1b2>
		case DIOG:TOGGLE_BIT(_DIOG_.PORT,ChId);break;
    1a24:	a3 e6       	ldi	r26, 0x63	; 99
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e3 e6       	ldi	r30, 0x63	; 99
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	42 81       	ldd	r20, Z+2	; 0x02
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <Dio_FlipChannel+0x1a6>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <Dio_FlipChannel+0x1a2>
    1a44:	84 27       	eor	r24, r20
    1a46:	12 96       	adiw	r26, 0x02	; 2
    1a48:	8c 93       	st	X, r24
    1a4a:	12 97       	sbiw	r26, 0x02	; 2
		case Dio_PortMax:break;
		default:break;
	}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <Dio_SetPortDirection>:
/*	Direction	<<Dio_DirectionTypes>>	INPUT - OUTPUT**************************************************/
/*Function return: No return****************************************************************************/
/*Function Description: "This function set direction for single Port ID"********************************/
/*******************************************************************************************************/	
void Dio_SetPortDirection(Dio_PortType PortId , Dio_DirectionTypes Direction)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	27 97       	sbiw	r28, 0x07	; 7
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	6b 83       	std	Y+3, r22	; 0x03
	u8 DirectionVal = 0;
    1a74:	19 82       	std	Y+1, r1	; 0x01
	switch(Direction)
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3f 83       	std	Y+7, r19	; 0x07
    1a7e:	2e 83       	std	Y+6, r18	; 0x06
    1a80:	8e 81       	ldd	r24, Y+6	; 0x06
    1a82:	9f 81       	ldd	r25, Y+7	; 0x07
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <Dio_SetPortDirection+0x38>
    1a88:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8c:	21 30       	cpi	r18, 0x01	; 1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <Dio_SetPortDirection+0x3c>
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <Dio_SetPortDirection+0x42>
	{
		case INPUT: DirectionVal = 0	;break;
    1a94:	19 82       	std	Y+1, r1	; 0x01
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <Dio_SetPortDirection+0x44>
		case OUTPUT:DirectionVal = 255	;break;
    1a98:	8f ef       	ldi	r24, 0xFF	; 255
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <Dio_SetPortDirection+0x44>
		default:DirectionVal = 0		;break;
    1a9e:	19 82       	std	Y+1, r1	; 0x01
	}
	switch(PortId)
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	3d 83       	std	Y+5, r19	; 0x05
    1aa8:	2c 83       	std	Y+4, r18	; 0x04
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	99 f1       	breq	.+102    	; 0x1b1a <Dio_SetPortDirection+0xbe>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	24 30       	cpi	r18, 0x04	; 4
    1aba:	31 05       	cpc	r19, r1
    1abc:	7c f4       	brge	.+30     	; 0x1adc <Dio_SetPortDirection+0x80>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	f9 f0       	breq	.+62     	; 0x1b06 <Dio_SetPortDirection+0xaa>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	fc f4       	brge	.+62     	; 0x1b10 <Dio_SetPortDirection+0xb4>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	89 f0       	breq	.+34     	; 0x1afc <Dio_SetPortDirection+0xa0>
    1ada:	35 c0       	rjmp	.+106    	; 0x1b46 <Dio_SetPortDirection+0xea>
    1adc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ade:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae0:	25 30       	cpi	r18, 0x05	; 5
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	21 f1       	breq	.+72     	; 0x1b2e <Dio_SetPortDirection+0xd2>
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	85 30       	cpi	r24, 0x05	; 5
    1aec:	91 05       	cpc	r25, r1
    1aee:	d4 f0       	brlt	.+52     	; 0x1b24 <Dio_SetPortDirection+0xc8>
    1af0:	2c 81       	ldd	r18, Y+4	; 0x04
    1af2:	3d 81       	ldd	r19, Y+5	; 0x05
    1af4:	26 30       	cpi	r18, 0x06	; 6
    1af6:	31 05       	cpc	r19, r1
    1af8:	11 f1       	breq	.+68     	; 0x1b3e <Dio_SetPortDirection+0xe2>
    1afa:	25 c0       	rjmp	.+74     	; 0x1b46 <Dio_SetPortDirection+0xea>
	{
		case DIOA:_DIOA_.DDR = DirectionVal;break;
    1afc:	e9 e3       	ldi	r30, 0x39	; 57
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	81 83       	std	Z+1, r24	; 0x01
    1b04:	20 c0       	rjmp	.+64     	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOB:_DIOB_.DDR = DirectionVal;break;
    1b06:	e6 e3       	ldi	r30, 0x36	; 54
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	81 83       	std	Z+1, r24	; 0x01
    1b0e:	1b c0       	rjmp	.+54     	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOC:_DIOC_.DDR = DirectionVal;break;
    1b10:	e3 e3       	ldi	r30, 0x33	; 51
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	81 83       	std	Z+1, r24	; 0x01
    1b18:	16 c0       	rjmp	.+44     	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOD:_DIOD_.DDR = DirectionVal;break;
    1b1a:	e0 e3       	ldi	r30, 0x30	; 48
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	81 83       	std	Z+1, r24	; 0x01
    1b22:	11 c0       	rjmp	.+34     	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOE:_DIOE_.DDR = DirectionVal;break;
    1b24:	e1 e2       	ldi	r30, 0x21	; 33
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	81 83       	std	Z+1, r24	; 0x01
    1b2c:	0c c0       	rjmp	.+24     	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOF:_DIOF_.DDR = DirectionVal;break;
    1b2e:	80 e2       	ldi	r24, 0x20	; 32
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	ef 5b       	subi	r30, 0xBF	; 191
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	80 83       	st	Z, r24
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <Dio_SetPortDirection+0xea>
		case DIOG:_DIOG_.DDR = DirectionVal;break;
    1b3e:	e3 e6       	ldi	r30, 0x63	; 99
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	81 83       	std	Z+1, r24	; 0x01
		case Dio_PortMax:break;
		default:break;
	}
	
}
    1b46:	27 96       	adiw	r28, 0x07	; 7
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <Dio_WritePort>:
/*	Direction	<<Dio_LevelType>>	STD_LOW - STD_HIGH**************************************************/
/*Function return: No return****************************************************************************/
/*Function Description: "This function set level for single Port ID"************************************/
/*******************************************************************************************************/
void Dio_WritePort(Dio_PortType PortId , Dio_LevelType Level)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	27 97       	sbiw	r28, 0x07	; 7
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 LevelVal = 0;
    1b70:	19 82       	std	Y+1, r1	; 0x01
	switch(Level)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3f 83       	std	Y+7, r19	; 0x07
    1b7a:	2e 83       	std	Y+6, r18	; 0x06
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <Dio_WritePort+0x38>
    1b84:	2e 81       	ldd	r18, Y+6	; 0x06
    1b86:	3f 81       	ldd	r19, Y+7	; 0x07
    1b88:	21 30       	cpi	r18, 0x01	; 1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <Dio_WritePort+0x3c>
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <Dio_WritePort+0x42>
	{
		case STD_LOW: LevelVal = 0		;break;
    1b90:	19 82       	std	Y+1, r1	; 0x01
    1b92:	04 c0       	rjmp	.+8      	; 0x1b9c <Dio_WritePort+0x44>
		case STD_HIGH:LevelVal = 255	;break;
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <Dio_WritePort+0x44>
		default:LevelVal = 0			;break;
    1b9a:	19 82       	std	Y+1, r1	; 0x01
	}
	switch(PortId)
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	3d 83       	std	Y+5, r19	; 0x05
    1ba4:	2c 83       	std	Y+4, r18	; 0x04
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	99 f1       	breq	.+102    	; 0x1c16 <Dio_WritePort+0xbe>
    1bb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb4:	24 30       	cpi	r18, 0x04	; 4
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	7c f4       	brge	.+30     	; 0x1bd8 <Dio_WritePort+0x80>
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	f9 f0       	breq	.+62     	; 0x1c02 <Dio_WritePort+0xaa>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	fc f4       	brge	.+62     	; 0x1c0c <Dio_WritePort+0xb4>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	89 f0       	breq	.+34     	; 0x1bf8 <Dio_WritePort+0xa0>
    1bd6:	35 c0       	rjmp	.+106    	; 0x1c42 <Dio_WritePort+0xea>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	25 30       	cpi	r18, 0x05	; 5
    1bde:	31 05       	cpc	r19, r1
    1be0:	21 f1       	breq	.+72     	; 0x1c2a <Dio_WritePort+0xd2>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	85 30       	cpi	r24, 0x05	; 5
    1be8:	91 05       	cpc	r25, r1
    1bea:	d4 f0       	brlt	.+52     	; 0x1c20 <Dio_WritePort+0xc8>
    1bec:	2c 81       	ldd	r18, Y+4	; 0x04
    1bee:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf0:	26 30       	cpi	r18, 0x06	; 6
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	11 f1       	breq	.+68     	; 0x1c3a <Dio_WritePort+0xe2>
    1bf6:	25 c0       	rjmp	.+74     	; 0x1c42 <Dio_WritePort+0xea>
	{
		case DIOA:_DIOA_.PORT = LevelVal;break;
    1bf8:	e9 e3       	ldi	r30, 0x39	; 57
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	82 83       	std	Z+2, r24	; 0x02
    1c00:	20 c0       	rjmp	.+64     	; 0x1c42 <Dio_WritePort+0xea>
		case DIOB:_DIOB_.PORT = LevelVal;break;
    1c02:	e6 e3       	ldi	r30, 0x36	; 54
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	82 83       	std	Z+2, r24	; 0x02
    1c0a:	1b c0       	rjmp	.+54     	; 0x1c42 <Dio_WritePort+0xea>
		case DIOC:_DIOC_.PORT = LevelVal;break;
    1c0c:	e3 e3       	ldi	r30, 0x33	; 51
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	16 c0       	rjmp	.+44     	; 0x1c42 <Dio_WritePort+0xea>
		case DIOD:_DIOD_.PORT = LevelVal;break;
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	82 83       	std	Z+2, r24	; 0x02
    1c1e:	11 c0       	rjmp	.+34     	; 0x1c42 <Dio_WritePort+0xea>
		case DIOE:_DIOE_.PORT = LevelVal;break;
    1c20:	e1 e2       	ldi	r30, 0x21	; 33
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	82 83       	std	Z+2, r24	; 0x02
    1c28:	0c c0       	rjmp	.+24     	; 0x1c42 <Dio_WritePort+0xea>
		case DIOF:_DIOF_.PORT = LevelVal;break;
    1c2a:	80 e2       	ldi	r24, 0x20	; 32
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	fc 01       	movw	r30, r24
    1c30:	ee 5b       	subi	r30, 0xBE	; 190
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	80 83       	st	Z, r24
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <Dio_WritePort+0xea>
		case DIOG:_DIOG_.PORT = LevelVal;break;
    1c3a:	e3 e6       	ldi	r30, 0x63	; 99
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	82 83       	std	Z+2, r24	; 0x02
		case Dio_PortMax:break;
		default:break;
	}
    1c42:	27 96       	adiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_Init>:
/*Function return: No return****************************************************************************/
/*Function Description:"This function Init The Lcd HWC including DIO Channels Acoording To {LCD_Cfg.h}"*/
/*******************************************************************************************************/

void LCD_Init(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
	Dio_SetChannelDirection(Data0,OUTPUT);
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	Dio_SetChannelDirection(Data1,OUTPUT);
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	Dio_SetChannelDirection(Data2,OUTPUT);
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	Dio_SetChannelDirection(Data3,OUTPUT);
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	
	Dio_SetChannelDirection(LCD_RS,OUTPUT);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	Dio_SetChannelDirection(LCD_E,OUTPUT);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	#if RWChannel == ENABLE_Macro
		Dio_SetChannelDirection(LCD_RW,OUTPUT);
    1c98:	8b e0       	ldi	r24, 0x0B	; 11
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	#endif
	Dio_WriteChannel(LCD_E,STD_HIGH);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 ea       	ldi	r26, 0xA0	; 160
    1cae:	b1 e4       	ldi	r27, 0x41	; 65
    1cb0:	89 8f       	std	Y+25, r24	; 0x19
    1cb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4a e7       	ldi	r20, 0x7A	; 122
    1cc6:	55 e4       	ldi	r21, 0x45	; 69
    1cc8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	8d 8b       	std	Y+21, r24	; 0x15
    1cd2:	9e 8b       	std	Y+22, r25	; 0x16
    1cd4:	af 8b       	std	Y+23, r26	; 0x17
    1cd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cda:	7e 89       	ldd	r23, Y+22	; 0x16
    1cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cde:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	2c f4       	brge	.+10     	; 0x1cfa <LCD_Init+0xa6>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	3f c0       	rjmp	.+126    	; 0x1d78 <LCD_Init+0x124>
	else if (__tmp > 65535)
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	3f ef       	ldi	r19, 0xFF	; 255
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	57 e4       	ldi	r21, 0x47	; 71
    1d0a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	4c f5       	brge	.+82     	; 0x1d64 <LCD_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d12:	69 8d       	ldd	r22, Y+25	; 0x19
    1d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9c 8b       	std	Y+20, r25	; 0x14
    1d38:	8b 8b       	std	Y+19, r24	; 0x13
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <LCD_Init+0x106>
    1d3c:	80 e9       	ldi	r24, 0x90	; 144
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	9a 8b       	std	Y+18, r25	; 0x12
    1d42:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d44:	89 89       	ldd	r24, Y+17	; 0x11
    1d46:	9a 89       	ldd	r25, Y+18	; 0x12
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_Init+0xf4>
    1d4c:	9a 8b       	std	Y+18, r25	; 0x12
    1d4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	9c 8b       	std	Y+20, r25	; 0x14
    1d58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	69 f7       	brne	.-38     	; 0x1d3c <LCD_Init+0xe8>
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <LCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	6d 89       	ldd	r22, Y+21	; 0x15
    1d66:	7e 89       	ldd	r23, Y+22	; 0x16
    1d68:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9c 8b       	std	Y+20, r25	; 0x14
    1d76:	8b 8b       	std	Y+19, r24	; 0x13
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	98 8b       	std	Y+16, r25	; 0x10
    1d7e:	8f 87       	std	Y+15, r24	; 0x0f
    1d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d82:	98 89       	ldd	r25, Y+16	; 0x10
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_Init+0x130>
    1d88:	98 8b       	std	Y+16, r25	; 0x10
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_ms(20);
	LCD_Cmd(0x02);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
	LCD_Cmd(0x28);
    1d92:	88 e2       	ldi	r24, 0x28	; 40
    1d94:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
	LCD_Cmd(0x0C);		//Set Function 4Bit - 2Line - 5*8
    1d98:	8c e0       	ldi	r24, 0x0C	; 12
    1d9a:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
	LCD_Cmd(0x06);		//Entry Mode Move Right
    1d9e:	86 e0       	ldi	r24, 0x06	; 6
    1da0:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
	LCD_Cmd(0x01);		//Display ON & courser OFF & No Blinking
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e0       	ldi	r26, 0x00	; 0
    1db0:	b0 e4       	ldi	r27, 0x40	; 64
    1db2:	8b 87       	std	Y+11, r24	; 0x0b
    1db4:	9c 87       	std	Y+12, r25	; 0x0c
    1db6:	ad 87       	std	Y+13, r26	; 0x0d
    1db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a e7       	ldi	r20, 0x7A	; 122
    1dc8:	55 e4       	ldi	r21, 0x45	; 69
    1dca:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8f 83       	std	Y+7, r24	; 0x07
    1dd4:	98 87       	std	Y+8, r25	; 0x08
    1dd6:	a9 87       	std	Y+9, r26	; 0x09
    1dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_Init+0x1a8>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_Init+0x226>
	else if (__tmp > 65535)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_Init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_Init+0x208>
    1e3e:	80 e9       	ldi	r24, 0x90	; 144
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_Init+0x1f6>
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_Init+0x1ea>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_Init+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_Init+0x232>
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e8e:	6c 96       	adiw	r28, 0x1c	; 28
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_Enable>:
/*Function return: No return****************************************************************************/
/*Function Description: "Static Function To Make Enable Pulse"******************************************/
/*******************************************************************************************************/

void LCD_Enable(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	68 97       	sbiw	r28, 0x18	; 24
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(LCD_E,STD_LOW);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	8d 8b       	std	Y+21, r24	; 0x15
    1ec6:	9e 8b       	std	Y+22, r25	; 0x16
    1ec8:	af 8b       	std	Y+23, r26	; 0x17
    1eca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ece:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed4:	2b ea       	ldi	r18, 0xAB	; 171
    1ed6:	3a ea       	ldi	r19, 0xAA	; 170
    1ed8:	4a ea       	ldi	r20, 0xAA	; 170
    1eda:	50 e4       	ldi	r21, 0x40	; 64
    1edc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	89 8b       	std	Y+17, r24	; 0x11
    1ee6:	9a 8b       	std	Y+18, r25	; 0x12
    1ee8:	ab 8b       	std	Y+19, r26	; 0x13
    1eea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eec:	69 89       	ldd	r22, Y+17	; 0x11
    1eee:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	1c f4       	brge	.+6      	; 0x1f0a <LCD_Enable+0x6a>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	88 8b       	std	Y+16, r24	; 0x10
    1f08:	91 c0       	rjmp	.+290    	; 0x202c <LCD_Enable+0x18c>
	else if (__tmp > 255)
    1f0a:	69 89       	ldd	r22, Y+17	; 0x11
    1f0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	9c 89       	ldd	r25, Y+20	; 0x14
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	53 e4       	ldi	r21, 0x43	; 67
    1f1a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <LCD_Enable+0x84>
    1f22:	7b c0       	rjmp	.+246    	; 0x201a <LCD_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    1f24:	6d 89       	ldd	r22, Y+21	; 0x15
    1f26:	7e 89       	ldd	r23, Y+22	; 0x16
    1f28:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a e7       	ldi	r20, 0x7A	; 122
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8c 87       	std	Y+12, r24	; 0x0c
    1f3e:	9d 87       	std	Y+13, r25	; 0x0d
    1f40:	ae 87       	std	Y+14, r26	; 0x0e
    1f42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a e7       	ldi	r20, 0x7A	; 122
    1f52:	55 e4       	ldi	r21, 0x45	; 69
    1f54:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	88 87       	std	Y+8, r24	; 0x08
    1f5e:	99 87       	std	Y+9, r25	; 0x09
    1f60:	aa 87       	std	Y+10, r26	; 0x0a
    1f62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f64:	68 85       	ldd	r22, Y+8	; 0x08
    1f66:	79 85       	ldd	r23, Y+9	; 0x09
    1f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <LCD_Enable+0xe6>
		__ticks = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9f 83       	std	Y+7, r25	; 0x07
    1f82:	8e 83       	std	Y+6, r24	; 0x06
    1f84:	3f c0       	rjmp	.+126    	; 0x2004 <LCD_Enable+0x164>
	else if (__tmp > 65535)
    1f86:	68 85       	ldd	r22, Y+8	; 0x08
    1f88:	79 85       	ldd	r23, Y+9	; 0x09
    1f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	4c f5       	brge	.+82     	; 0x1ff0 <LCD_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9f 83       	std	Y+7, r25	; 0x07
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <LCD_Enable+0x146>
    1fc8:	80 e9       	ldi	r24, 0x90	; 144
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	9d 83       	std	Y+5, r25	; 0x05
    1fce:	8c 83       	std	Y+4, r24	; 0x04
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_Enable+0x134>
    1fd8:	9d 83       	std	Y+5, r25	; 0x05
    1fda:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	9f 83       	std	Y+7, r25	; 0x07
    1fe4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <LCD_Enable+0x128>
    1fee:	24 c0       	rjmp	.+72     	; 0x2038 <LCD_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	68 85       	ldd	r22, Y+8	; 0x08
    1ff2:	79 85       	ldd	r23, Y+9	; 0x09
    1ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9f 83       	std	Y+7, r25	; 0x07
    2002:	8e 83       	std	Y+6, r24	; 0x06
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	9b 83       	std	Y+3, r25	; 0x03
    200a:	8a 83       	std	Y+2, r24	; 0x02
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_Enable+0x170>
    2014:	9b 83       	std	Y+3, r25	; 0x03
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    201a:	69 89       	ldd	r22, Y+17	; 0x11
    201c:	7a 89       	ldd	r23, Y+18	; 0x12
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	88 8b       	std	Y+16, r24	; 0x10
    202c:	88 89       	ldd	r24, Y+16	; 0x10
    202e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	8a 95       	dec	r24
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_Enable+0x192>
    2036:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	Dio_WriteChannel(LCD_E,STD_HIGH);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
}
    2040:	68 96       	adiw	r28, 0x18	; 24
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <LCD_Cmd>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function Send Command to LCD"*********************************************/
/*******************************************************************************************************/

void LCD_Cmd(u8 Cmd)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	a7 97       	sbiw	r28, 0x27	; 39
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	8f a3       	std	Y+39, r24	; 0x27
	Dio_WriteChannel(LCD_RS,STD_LOW);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	/*for (u8 i = 0 ;i<4 ; i++)
	{
		Dio_WriteChannel(LCD_DataPinsArr[i],GET_BIT(Cmd,i));
	}*/
	Dio_WriteChannel(LCD_DataPinsArr[0],GET_BIT(Cmd,4));
    2070:	20 91 21 02 	lds	r18, 0x0221
    2074:	8f a1       	ldd	r24, Y+39	; 0x27
    2076:	82 95       	swap	r24
    2078:	8f 70       	andi	r24, 0x0F	; 15
    207a:	98 2f       	mov	r25, r24
    207c:	91 70       	andi	r25, 0x01	; 1
    207e:	82 2f       	mov	r24, r18
    2080:	69 2f       	mov	r22, r25
    2082:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[1],GET_BIT(Cmd,5));
    2086:	20 91 22 02 	lds	r18, 0x0222
    208a:	8f a1       	ldd	r24, Y+39	; 0x27
    208c:	82 95       	swap	r24
    208e:	86 95       	lsr	r24
    2090:	87 70       	andi	r24, 0x07	; 7
    2092:	98 2f       	mov	r25, r24
    2094:	91 70       	andi	r25, 0x01	; 1
    2096:	82 2f       	mov	r24, r18
    2098:	69 2f       	mov	r22, r25
    209a:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[2],GET_BIT(Cmd,6));
    209e:	20 91 23 02 	lds	r18, 0x0223
    20a2:	8f a1       	ldd	r24, Y+39	; 0x27
    20a4:	82 95       	swap	r24
    20a6:	86 95       	lsr	r24
    20a8:	86 95       	lsr	r24
    20aa:	83 70       	andi	r24, 0x03	; 3
    20ac:	98 2f       	mov	r25, r24
    20ae:	91 70       	andi	r25, 0x01	; 1
    20b0:	82 2f       	mov	r24, r18
    20b2:	69 2f       	mov	r22, r25
    20b4:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[3],GET_BIT(Cmd,7));
    20b8:	20 91 24 02 	lds	r18, 0x0224
    20bc:	8f a1       	ldd	r24, Y+39	; 0x27
    20be:	98 2f       	mov	r25, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	99 27       	eor	r25, r25
    20c4:	99 1f       	adc	r25, r25
    20c6:	82 2f       	mov	r24, r18
    20c8:	69 2f       	mov	r22, r25
    20ca:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	
	LCD_Enable();
    20ce:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_Enable>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a8 e4       	ldi	r26, 0x48	; 72
    20d8:	b3 e4       	ldi	r27, 0x43	; 67
    20da:	8b a3       	std	Y+35, r24	; 0x23
    20dc:	9c a3       	std	Y+36, r25	; 0x24
    20de:	ad a3       	std	Y+37, r26	; 0x25
    20e0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e2:	6b a1       	ldd	r22, Y+35	; 0x23
    20e4:	7c a1       	ldd	r23, Y+36	; 0x24
    20e6:	8d a1       	ldd	r24, Y+37	; 0x25
    20e8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ea:	2b ea       	ldi	r18, 0xAB	; 171
    20ec:	3a ea       	ldi	r19, 0xAA	; 170
    20ee:	4a ea       	ldi	r20, 0xAA	; 170
    20f0:	50 e4       	ldi	r21, 0x40	; 64
    20f2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8f 8f       	std	Y+31, r24	; 0x1f
    20fc:	98 a3       	std	Y+32, r25	; 0x20
    20fe:	a9 a3       	std	Y+33, r26	; 0x21
    2100:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2102:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2104:	78 a1       	ldd	r23, Y+32	; 0x20
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	1c f4       	brge	.+6      	; 0x2120 <LCD_Cmd+0xce>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	8e 8f       	std	Y+30, r24	; 0x1e
    211e:	91 c0       	rjmp	.+290    	; 0x2242 <LCD_Cmd+0x1f0>
	else if (__tmp > 255)
    2120:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2122:	78 a1       	ldd	r23, Y+32	; 0x20
    2124:	89 a1       	ldd	r24, Y+33	; 0x21
    2126:	9a a1       	ldd	r25, Y+34	; 0x22
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	0c f0       	brlt	.+2      	; 0x213a <LCD_Cmd+0xe8>
    2138:	7b c0       	rjmp	.+246    	; 0x2230 <LCD_Cmd+0x1de>
	{
		_delay_ms(__us / 1000.0);
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8a 8f       	std	Y+26, r24	; 0x1a
    2154:	9b 8f       	std	Y+27, r25	; 0x1b
    2156:	ac 8f       	std	Y+28, r26	; 0x1c
    2158:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    215c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    215e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2160:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	55 e4       	ldi	r21, 0x45	; 69
    216a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8e 8b       	std	Y+22, r24	; 0x16
    2174:	9f 8b       	std	Y+23, r25	; 0x17
    2176:	a8 8f       	std	Y+24, r26	; 0x18
    2178:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    217a:	6e 89       	ldd	r22, Y+22	; 0x16
    217c:	7f 89       	ldd	r23, Y+23	; 0x17
    217e:	88 8d       	ldd	r24, Y+24	; 0x18
    2180:	99 8d       	ldd	r25, Y+25	; 0x19
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_Cmd+0x14a>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9d 8b       	std	Y+21, r25	; 0x15
    2198:	8c 8b       	std	Y+20, r24	; 0x14
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_Cmd+0x1c8>
	else if (__tmp > 65535)
    219c:	6e 89       	ldd	r22, Y+22	; 0x16
    219e:	7f 89       	ldd	r23, Y+23	; 0x17
    21a0:	88 8d       	ldd	r24, Y+24	; 0x18
    21a2:	99 8d       	ldd	r25, Y+25	; 0x19
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_Cmd+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21b6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9d 8b       	std	Y+21, r25	; 0x15
    21da:	8c 8b       	std	Y+20, r24	; 0x14
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_Cmd+0x1aa>
    21de:	80 e9       	ldi	r24, 0x90	; 144
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	9b 8b       	std	Y+19, r25	; 0x13
    21e4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e6:	8a 89       	ldd	r24, Y+18	; 0x12
    21e8:	9b 89       	ldd	r25, Y+19	; 0x13
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_Cmd+0x198>
    21ee:	9b 8b       	std	Y+19, r25	; 0x13
    21f0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	8c 89       	ldd	r24, Y+20	; 0x14
    21f4:	9d 89       	ldd	r25, Y+21	; 0x15
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9d 8b       	std	Y+21, r25	; 0x15
    21fa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	8c 89       	ldd	r24, Y+20	; 0x14
    21fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_Cmd+0x18c>
    2204:	24 c0       	rjmp	.+72     	; 0x224e <LCD_Cmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6e 89       	ldd	r22, Y+22	; 0x16
    2208:	7f 89       	ldd	r23, Y+23	; 0x17
    220a:	88 8d       	ldd	r24, Y+24	; 0x18
    220c:	99 8d       	ldd	r25, Y+25	; 0x19
    220e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9d 8b       	std	Y+21, r25	; 0x15
    2218:	8c 8b       	std	Y+20, r24	; 0x14
    221a:	8c 89       	ldd	r24, Y+20	; 0x14
    221c:	9d 89       	ldd	r25, Y+21	; 0x15
    221e:	99 8b       	std	Y+17, r25	; 0x11
    2220:	88 8b       	std	Y+16, r24	; 0x10
    2222:	88 89       	ldd	r24, Y+16	; 0x10
    2224:	99 89       	ldd	r25, Y+17	; 0x11
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_Cmd+0x1d4>
    222a:	99 8b       	std	Y+17, r25	; 0x11
    222c:	88 8b       	std	Y+16, r24	; 0x10
    222e:	0f c0       	rjmp	.+30     	; 0x224e <LCD_Cmd+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2230:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2232:	78 a1       	ldd	r23, Y+32	; 0x20
    2234:	89 a1       	ldd	r24, Y+33	; 0x21
    2236:	9a a1       	ldd	r25, Y+34	; 0x22
    2238:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8e 8f       	std	Y+30, r24	; 0x1e
    2242:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	8a 95       	dec	r24
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_Cmd+0x1f6>
    224c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(200);
	/*for (u8 i = 0 ;i<4 ; i++)
	{
		Dio_WriteChannel(LCD_DataPinsArr[i],GET_BIT(Cmd,(i+4)));
	}*/
	Dio_WriteChannel(LCD_DataPinsArr[0],GET_BIT(Cmd,0));
    224e:	20 91 21 02 	lds	r18, 0x0221
    2252:	8f a1       	ldd	r24, Y+39	; 0x27
    2254:	98 2f       	mov	r25, r24
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	82 2f       	mov	r24, r18
    225a:	69 2f       	mov	r22, r25
    225c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[1],GET_BIT(Cmd,1));
    2260:	20 91 22 02 	lds	r18, 0x0222
    2264:	8f a1       	ldd	r24, Y+39	; 0x27
    2266:	86 95       	lsr	r24
    2268:	98 2f       	mov	r25, r24
    226a:	91 70       	andi	r25, 0x01	; 1
    226c:	82 2f       	mov	r24, r18
    226e:	69 2f       	mov	r22, r25
    2270:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[2],GET_BIT(Cmd,2));
    2274:	20 91 23 02 	lds	r18, 0x0223
    2278:	8f a1       	ldd	r24, Y+39	; 0x27
    227a:	86 95       	lsr	r24
    227c:	86 95       	lsr	r24
    227e:	98 2f       	mov	r25, r24
    2280:	91 70       	andi	r25, 0x01	; 1
    2282:	82 2f       	mov	r24, r18
    2284:	69 2f       	mov	r22, r25
    2286:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[3],GET_BIT(Cmd,3));
    228a:	20 91 24 02 	lds	r18, 0x0224
    228e:	8f a1       	ldd	r24, Y+39	; 0x27
    2290:	86 95       	lsr	r24
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	98 2f       	mov	r25, r24
    2298:	91 70       	andi	r25, 0x01	; 1
    229a:	82 2f       	mov	r24, r18
    229c:	69 2f       	mov	r22, r25
    229e:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	LCD_Enable();
    22a2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_Enable>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e0       	ldi	r26, 0x00	; 0
    22ac:	b0 e4       	ldi	r27, 0x40	; 64
    22ae:	8b 87       	std	Y+11, r24	; 0x0b
    22b0:	9c 87       	std	Y+12, r25	; 0x0c
    22b2:	ad 87       	std	Y+13, r26	; 0x0d
    22b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	55 e4       	ldi	r21, 0x45	; 69
    22c6:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	98 87       	std	Y+8, r25	; 0x08
    22d2:	a9 87       	std	Y+9, r26	; 0x09
    22d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_Cmd+0x2a6>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_Cmd+0x324>
	else if (__tmp > 65535)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_Cmd+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_Cmd+0x306>
    233a:	80 e9       	ldi	r24, 0x90	; 144
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	9c 83       	std	Y+4, r25	; 0x04
    2340:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_Cmd+0x2f4>
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_Cmd+0x2e8>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_Cmd+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_Cmd+0x330>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    238a:	a7 96       	adiw	r28, 0x27	; 39
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LCD_Char>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function Send Character to LCD"*******************************************/
/*******************************************************************************************************/

void LCD_Char(s8 Data)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	a7 97       	sbiw	r28, 0x27	; 39
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	8f a3       	std	Y+39, r24	; 0x27
	Dio_WriteChannel(LCD_RS,STD_HIGH);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	/*for (u8 i = 0 ;i<4 ; i++)
	{
		Dio_WriteChannel(LCD_DataPinsArr[i],GET_BIT(Cmd,i));
	}*/
	Dio_WriteChannel(LCD_DataPinsArr[0],GET_BIT(Data,4));
    23ba:	20 91 21 02 	lds	r18, 0x0221
    23be:	8f a1       	ldd	r24, Y+39	; 0x27
    23c0:	85 95       	asr	r24
    23c2:	85 95       	asr	r24
    23c4:	85 95       	asr	r24
    23c6:	85 95       	asr	r24
    23c8:	98 2f       	mov	r25, r24
    23ca:	91 70       	andi	r25, 0x01	; 1
    23cc:	82 2f       	mov	r24, r18
    23ce:	69 2f       	mov	r22, r25
    23d0:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[1],GET_BIT(Data,5));
    23d4:	20 91 22 02 	lds	r18, 0x0222
    23d8:	8f a1       	ldd	r24, Y+39	; 0x27
    23da:	85 95       	asr	r24
    23dc:	85 95       	asr	r24
    23de:	85 95       	asr	r24
    23e0:	85 95       	asr	r24
    23e2:	85 95       	asr	r24
    23e4:	98 2f       	mov	r25, r24
    23e6:	91 70       	andi	r25, 0x01	; 1
    23e8:	82 2f       	mov	r24, r18
    23ea:	69 2f       	mov	r22, r25
    23ec:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[2],GET_BIT(Data,6));
    23f0:	20 91 23 02 	lds	r18, 0x0223
    23f4:	8f a1       	ldd	r24, Y+39	; 0x27
    23f6:	86 fb       	bst	r24, 6
    23f8:	88 0f       	add	r24, r24
    23fa:	88 0b       	sbc	r24, r24
    23fc:	80 f9       	bld	r24, 0
    23fe:	98 2f       	mov	r25, r24
    2400:	91 70       	andi	r25, 0x01	; 1
    2402:	82 2f       	mov	r24, r18
    2404:	69 2f       	mov	r22, r25
    2406:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[3],GET_BIT(Data,7));
    240a:	20 91 24 02 	lds	r18, 0x0224
    240e:	8f a1       	ldd	r24, Y+39	; 0x27
    2410:	98 2f       	mov	r25, r24
    2412:	99 1f       	adc	r25, r25
    2414:	99 27       	eor	r25, r25
    2416:	99 1f       	adc	r25, r25
    2418:	82 2f       	mov	r24, r18
    241a:	69 2f       	mov	r22, r25
    241c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	
	LCD_Enable();
    2420:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_Enable>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a8 e4       	ldi	r26, 0x48	; 72
    242a:	b3 e4       	ldi	r27, 0x43	; 67
    242c:	8b a3       	std	Y+35, r24	; 0x23
    242e:	9c a3       	std	Y+36, r25	; 0x24
    2430:	ad a3       	std	Y+37, r26	; 0x25
    2432:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2434:	6b a1       	ldd	r22, Y+35	; 0x23
    2436:	7c a1       	ldd	r23, Y+36	; 0x24
    2438:	8d a1       	ldd	r24, Y+37	; 0x25
    243a:	9e a1       	ldd	r25, Y+38	; 0x26
    243c:	2b ea       	ldi	r18, 0xAB	; 171
    243e:	3a ea       	ldi	r19, 0xAA	; 170
    2440:	4a ea       	ldi	r20, 0xAA	; 170
    2442:	50 e4       	ldi	r21, 0x40	; 64
    2444:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8f 8f       	std	Y+31, r24	; 0x1f
    244e:	98 a3       	std	Y+32, r25	; 0x20
    2450:	a9 a3       	std	Y+33, r26	; 0x21
    2452:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2454:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2456:	78 a1       	ldd	r23, Y+32	; 0x20
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	1c f4       	brge	.+6      	; 0x2472 <LCD_Char+0xd6>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	8e 8f       	std	Y+30, r24	; 0x1e
    2470:	91 c0       	rjmp	.+290    	; 0x2594 <LCD_Char+0x1f8>
	else if (__tmp > 255)
    2472:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2474:	78 a1       	ldd	r23, Y+32	; 0x20
    2476:	89 a1       	ldd	r24, Y+33	; 0x21
    2478:	9a a1       	ldd	r25, Y+34	; 0x22
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	0c f0       	brlt	.+2      	; 0x248c <LCD_Char+0xf0>
    248a:	7b c0       	rjmp	.+246    	; 0x2582 <LCD_Char+0x1e6>
	{
		_delay_ms(__us / 1000.0);
    248c:	6b a1       	ldd	r22, Y+35	; 0x23
    248e:	7c a1       	ldd	r23, Y+36	; 0x24
    2490:	8d a1       	ldd	r24, Y+37	; 0x25
    2492:	9e a1       	ldd	r25, Y+38	; 0x26
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8a 8f       	std	Y+26, r24	; 0x1a
    24a6:	9b 8f       	std	Y+27, r25	; 0x1b
    24a8:	ac 8f       	std	Y+28, r26	; 0x1c
    24aa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a e7       	ldi	r20, 0x7A	; 122
    24ba:	55 e4       	ldi	r21, 0x45	; 69
    24bc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8e 8b       	std	Y+22, r24	; 0x16
    24c6:	9f 8b       	std	Y+23, r25	; 0x17
    24c8:	a8 8f       	std	Y+24, r26	; 0x18
    24ca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24cc:	6e 89       	ldd	r22, Y+22	; 0x16
    24ce:	7f 89       	ldd	r23, Y+23	; 0x17
    24d0:	88 8d       	ldd	r24, Y+24	; 0x18
    24d2:	99 8d       	ldd	r25, Y+25	; 0x19
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <LCD_Char+0x152>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9d 8b       	std	Y+21, r25	; 0x15
    24ea:	8c 8b       	std	Y+20, r24	; 0x14
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <LCD_Char+0x1d0>
	else if (__tmp > 65535)
    24ee:	6e 89       	ldd	r22, Y+22	; 0x16
    24f0:	7f 89       	ldd	r23, Y+23	; 0x17
    24f2:	88 8d       	ldd	r24, Y+24	; 0x18
    24f4:	99 8d       	ldd	r25, Y+25	; 0x19
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <LCD_Char+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2508:	7b 8d       	ldd	r23, Y+27	; 0x1b
    250a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    250c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9d 8b       	std	Y+21, r25	; 0x15
    252c:	8c 8b       	std	Y+20, r24	; 0x14
    252e:	0f c0       	rjmp	.+30     	; 0x254e <LCD_Char+0x1b2>
    2530:	80 e9       	ldi	r24, 0x90	; 144
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	9b 8b       	std	Y+19, r25	; 0x13
    2536:	8a 8b       	std	Y+18, r24	; 0x12
    2538:	8a 89       	ldd	r24, Y+18	; 0x12
    253a:	9b 89       	ldd	r25, Y+19	; 0x13
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_Char+0x1a0>
    2540:	9b 8b       	std	Y+19, r25	; 0x13
    2542:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8c 89       	ldd	r24, Y+20	; 0x14
    2546:	9d 89       	ldd	r25, Y+21	; 0x15
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9d 8b       	std	Y+21, r25	; 0x15
    254c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8c 89       	ldd	r24, Y+20	; 0x14
    2550:	9d 89       	ldd	r25, Y+21	; 0x15
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <LCD_Char+0x194>
    2556:	24 c0       	rjmp	.+72     	; 0x25a0 <LCD_Char+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6e 89       	ldd	r22, Y+22	; 0x16
    255a:	7f 89       	ldd	r23, Y+23	; 0x17
    255c:	88 8d       	ldd	r24, Y+24	; 0x18
    255e:	99 8d       	ldd	r25, Y+25	; 0x19
    2560:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9d 8b       	std	Y+21, r25	; 0x15
    256a:	8c 8b       	std	Y+20, r24	; 0x14
    256c:	8c 89       	ldd	r24, Y+20	; 0x14
    256e:	9d 89       	ldd	r25, Y+21	; 0x15
    2570:	99 8b       	std	Y+17, r25	; 0x11
    2572:	88 8b       	std	Y+16, r24	; 0x10
    2574:	88 89       	ldd	r24, Y+16	; 0x10
    2576:	99 89       	ldd	r25, Y+17	; 0x11
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_Char+0x1dc>
    257c:	99 8b       	std	Y+17, r25	; 0x11
    257e:	88 8b       	std	Y+16, r24	; 0x10
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <LCD_Char+0x204>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2582:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2584:	78 a1       	ldd	r23, Y+32	; 0x20
    2586:	89 a1       	ldd	r24, Y+33	; 0x21
    2588:	9a a1       	ldd	r25, Y+34	; 0x22
    258a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8e 8f       	std	Y+30, r24	; 0x1e
    2594:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2596:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2598:	8f 85       	ldd	r24, Y+15	; 0x0f
    259a:	8a 95       	dec	r24
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_Char+0x1fe>
    259e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(200);
	/*for (u8 i = 0 ;i<4 ; i++)
	{
		Dio_WriteChannel(LCD_DataPinsArr[i],GET_BIT(Cmd,(i+4)));
	}*/
	Dio_WriteChannel(LCD_DataPinsArr[0],GET_BIT(Data,0));
    25a0:	20 91 21 02 	lds	r18, 0x0221
    25a4:	8f a1       	ldd	r24, Y+39	; 0x27
    25a6:	98 2f       	mov	r25, r24
    25a8:	91 70       	andi	r25, 0x01	; 1
    25aa:	82 2f       	mov	r24, r18
    25ac:	69 2f       	mov	r22, r25
    25ae:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[1],GET_BIT(Data,1));
    25b2:	20 91 22 02 	lds	r18, 0x0222
    25b6:	8f a1       	ldd	r24, Y+39	; 0x27
    25b8:	85 95       	asr	r24
    25ba:	98 2f       	mov	r25, r24
    25bc:	91 70       	andi	r25, 0x01	; 1
    25be:	82 2f       	mov	r24, r18
    25c0:	69 2f       	mov	r22, r25
    25c2:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[2],GET_BIT(Data,2));
    25c6:	20 91 23 02 	lds	r18, 0x0223
    25ca:	8f a1       	ldd	r24, Y+39	; 0x27
    25cc:	85 95       	asr	r24
    25ce:	85 95       	asr	r24
    25d0:	98 2f       	mov	r25, r24
    25d2:	91 70       	andi	r25, 0x01	; 1
    25d4:	82 2f       	mov	r24, r18
    25d6:	69 2f       	mov	r22, r25
    25d8:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_DataPinsArr[3],GET_BIT(Data,3));
    25dc:	20 91 24 02 	lds	r18, 0x0224
    25e0:	8f a1       	ldd	r24, Y+39	; 0x27
    25e2:	85 95       	asr	r24
    25e4:	85 95       	asr	r24
    25e6:	85 95       	asr	r24
    25e8:	98 2f       	mov	r25, r24
    25ea:	91 70       	andi	r25, 0x01	; 1
    25ec:	82 2f       	mov	r24, r18
    25ee:	69 2f       	mov	r22, r25
    25f0:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	LCD_Enable();
    25f4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_Enable>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e4       	ldi	r27, 0x40	; 64
    2600:	8b 87       	std	Y+11, r24	; 0x0b
    2602:	9c 87       	std	Y+12, r25	; 0x0c
    2604:	ad 87       	std	Y+13, r26	; 0x0d
    2606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	55 e4       	ldi	r21, 0x45	; 69
    2618:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8f 83       	std	Y+7, r24	; 0x07
    2622:	98 87       	std	Y+8, r25	; 0x08
    2624:	a9 87       	std	Y+9, r26	; 0x09
    2626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_Char+0x2ae>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_Char+0x32c>
	else if (__tmp > 65535)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_Char+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_Char+0x30e>
    268c:	80 e9       	ldi	r24, 0x90	; 144
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_Char+0x2fc>
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_Char+0x2f0>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_Char+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_Char+0x338>
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    26dc:	a7 96       	adiw	r28, 0x27	; 39
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <LCD_String>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function Display Array String terminated with '/0' "**********************/
/*******************************************************************************************************/

void LCD_String(s8 * String)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <LCD_String+0x6>
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9b 83       	std	Y+3, r25	; 0x03
    26fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i=0;String[i] != '\0';i++)
    26fe:	19 82       	std	Y+1, r1	; 0x01
    2700:	0e c0       	rjmp	.+28     	; 0x271e <LCD_String+0x30>
	LCD_Char(String[i]);
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	fc 01       	movw	r30, r24
    270e:	e2 0f       	add	r30, r18
    2710:	f3 1f       	adc	r31, r19
    2712:	80 81       	ld	r24, Z
    2714:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_Char>
/*******************************************************************************************************/

void LCD_String(s8 * String)
{
	u8 i;
	for (i=0;String[i] != '\0';i++)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	9b 81       	ldd	r25, Y+3	; 0x03
    2728:	fc 01       	movw	r30, r24
    272a:	e2 0f       	add	r30, r18
    272c:	f3 1f       	adc	r31, r19
    272e:	80 81       	ld	r24, Z
    2730:	88 23       	and	r24, r24
    2732:	39 f7       	brne	.-50     	; 0x2702 <LCD_String+0x14>
	LCD_Char(String[i]);
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <LCD_SetPosition>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function set cursor Position Through LCD "********************************/
/*******************************************************************************************************/

void LCD_SetPosition(u8 LineNo, u8 Position)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_SetPosition+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LCD_SetPosition+0x8>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Position)
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	00 96       	adiw	r24, 0x00	; 0
    2758:	84 31       	cpi	r24, 0x14	; 20
    275a:	91 05       	cpc	r25, r1
    275c:	98 f5       	brcc	.+102    	; 0x27c4 <LCD_SetPosition+0x84>
	{
		case 0 ... 19 :
		{
			switch(LineNo)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	3c 83       	std	Y+4, r19	; 0x04
    2766:	2b 83       	std	Y+3, r18	; 0x03
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	91 05       	cpc	r25, r1
    2770:	d9 f0       	breq	.+54     	; 0x27a8 <LCD_SetPosition+0x68>
    2772:	2b 81       	ldd	r18, Y+3	; 0x03
    2774:	3c 81       	ldd	r19, Y+4	; 0x04
    2776:	23 30       	cpi	r18, 0x03	; 3
    2778:	31 05       	cpc	r19, r1
    277a:	34 f4       	brge	.+12     	; 0x2788 <LCD_SetPosition+0x48>
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	91 05       	cpc	r25, r1
    2784:	61 f0       	breq	.+24     	; 0x279e <LCD_SetPosition+0x5e>
    2786:	1e c0       	rjmp	.+60     	; 0x27c4 <LCD_SetPosition+0x84>
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	3c 81       	ldd	r19, Y+4	; 0x04
    278c:	23 30       	cpi	r18, 0x03	; 3
    278e:	31 05       	cpc	r19, r1
    2790:	81 f0       	breq	.+32     	; 0x27b2 <LCD_SetPosition+0x72>
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	84 30       	cpi	r24, 0x04	; 4
    2798:	91 05       	cpc	r25, r1
    279a:	81 f0       	breq	.+32     	; 0x27bc <LCD_SetPosition+0x7c>
    279c:	13 c0       	rjmp	.+38     	; 0x27c4 <LCD_SetPosition+0x84>
			{
				case 1: LCD_Cmd((0x80 | (Position & 0xFF)));break;
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	80 68       	ori	r24, 0x80	; 128
    27a2:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
    27a6:	0e c0       	rjmp	.+28     	; 0x27c4 <LCD_SetPosition+0x84>
				case 2: LCD_Cmd((0xC0 | (Position & 0xFF)));break;
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	80 6c       	ori	r24, 0xC0	; 192
    27ac:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
    27b0:	09 c0       	rjmp	.+18     	; 0x27c4 <LCD_SetPosition+0x84>
				case 3: LCD_Cmd((0x94 | (Position & 0xFF)));break;
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	84 69       	ori	r24, 0x94	; 148
    27b6:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <LCD_SetPosition+0x84>
				case 4: LCD_Cmd((0xD4 | (Position & 0xFF)));break;
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	84 6d       	ori	r24, 0xD4	; 212
    27c0:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
			}
		}break;
	}
	
}
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <LCD_NUM>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function Display Int Value "**********************************************/
/*******************************************************************************************************/

void LCD_NUM(u32 IntVal)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	60 97       	sbiw	r28, 0x10	; 16
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	6d 87       	std	Y+13, r22	; 0x0d
    27e8:	7e 87       	std	Y+14, r23	; 0x0e
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
    27ec:	98 8b       	std	Y+16, r25	; 0x10
	s8 StrArr[12]; // Assuming a 32-bit integer can be up to 10 digits, plus one for the null terminator.
	sprintf((char *)StrArr, "%lu",(u32)IntVal);
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	2d b7       	in	r18, 0x3d	; 61
    27f4:	3e b7       	in	r19, 0x3e	; 62
    27f6:	28 50       	subi	r18, 0x08	; 8
    27f8:	30 40       	sbci	r19, 0x00	; 0
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	3e bf       	out	0x3e, r19	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	2d bf       	out	0x3d, r18	; 61
    2804:	ed b7       	in	r30, 0x3d	; 61
    2806:	fe b7       	in	r31, 0x3e	; 62
    2808:	31 96       	adiw	r30, 0x01	; 1
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	93 83       	std	Z+3, r25	; 0x03
    2814:	82 83       	std	Z+2, r24	; 0x02
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	af 85       	ldd	r26, Y+15	; 0x0f
    281c:	b8 89       	ldd	r27, Y+16	; 0x10
    281e:	84 83       	std	Z+4, r24	; 0x04
    2820:	95 83       	std	Z+5, r25	; 0x05
    2822:	a6 83       	std	Z+6, r26	; 0x06
    2824:	b7 83       	std	Z+7, r27	; 0x07
    2826:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <sprintf>
    282a:	8d b7       	in	r24, 0x3d	; 61
    282c:	9e b7       	in	r25, 0x3e	; 62
    282e:	08 96       	adiw	r24, 0x08	; 8
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	9e bf       	out	0x3e, r25	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	8d bf       	out	0x3d, r24	; 61
	LCD_String((s8*)StrArr);
    283a:	ce 01       	movw	r24, r28
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_String>
}
    2842:	60 96       	adiw	r28, 0x10	; 16
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LCD_Clear>:
/*Function return: No return****************************************************************************/
/*Function Description: "This function Clear LCD "******************************************************/
/*******************************************************************************************************/

void LCD_Clear(void)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	LCD_Cmd(CLEAR_CMD);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_Cmd>
}
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <ServoMotor_voidInit>:
#include <util/delay.h>
#include "ServoMotor_Interface.h"
#include "LIB_STD.h"
#include "DIO_Interface.h"
void ServoMotor_voidInit(void)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	// Make the OCIA Pin output
	Dio_SetChannelDirection(DIOB5, OUTPUT);
    2870:	8d e0       	ldi	r24, 0x0D	; 13
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	/* Init Timer 1 with
	T1_FastPWM_M14
	T1_PWM_NONINVERTING
	T1_PRESCALER_64
	*/
	T1_voidInit();
    2878:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <T1_voidInit>
	//Set The frequency 50Hz ("According to SG90 Motor Data sheet")
	T1_SetFreq_Mode14(50);
    287c:	82 e3       	ldi	r24, 0x32	; 50
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <T1_SetFreq_Mode14>
}
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <ServoMotor_SetAngle>:
void ServoMotor_SetAngle(u8 copy_u8Angle)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	0f 92       	push	r0
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	89 83       	std	Y+1, r24	; 0x01
	//input range chick 0 -- 180 degree
	switch (copy_u8Angle)
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	00 96       	adiw	r24, 0x00	; 0
    289e:	85 3b       	cpi	r24, 0xB5	; 181
    28a0:	91 05       	cpc	r25, r1
    28a2:	38 f5       	brcc	.+78     	; 0x28f2 <ServoMotor_SetAngle+0x68>
	{
		case 0 ... 180:
		{
			/*Take angle and make the mapping equation to get 
			the corresponding duty cycle */
			T1_SetDyty_Mode14((f32)(((copy_u8Angle)*((f32)11/180))+2));
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	aa 27       	eor	r26, r26
    28ac:	97 fd       	sbrc	r25, 7
    28ae:	a0 95       	com	r26
    28b0:	ba 2f       	mov	r27, r26
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	25 ea       	ldi	r18, 0xA5	; 165
    28c4:	3f e4       	ldi	r19, 0x4F	; 79
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	5d e3       	ldi	r21, 0x3D	; 61
    28ca:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	50 e4       	ldi	r21, 0x40	; 64
    28de:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <T1_SetDyty_Mode14>
			//Start Timer 1 To Operate
			T1_voidStart();	
    28ee:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <T1_voidStart>
		default:
		{
			
		}
	}
}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <ServoMotor_Off>:

void ServoMotor_Off(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	2e 97       	sbiw	r28, 0x0e	; 14
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a8 ec       	ldi	r26, 0xC8	; 200
    2914:	b3 e4       	ldi	r27, 0x43	; 67
    2916:	8b 87       	std	Y+11, r24	; 0x0b
    2918:	9c 87       	std	Y+12, r25	; 0x0c
    291a:	ad 87       	std	Y+13, r26	; 0x0d
    291c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2920:	7c 85       	ldd	r23, Y+12	; 0x0c
    2922:	8d 85       	ldd	r24, Y+13	; 0x0d
    2924:	9e 85       	ldd	r25, Y+14	; 0x0e
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	55 e4       	ldi	r21, 0x45	; 69
    292e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8f 83       	std	Y+7, r24	; 0x07
    2938:	98 87       	std	Y+8, r25	; 0x08
    293a:	a9 87       	std	Y+9, r26	; 0x09
    293c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293e:	6f 81       	ldd	r22, Y+7	; 0x07
    2940:	78 85       	ldd	r23, Y+8	; 0x08
    2942:	89 85       	ldd	r24, Y+9	; 0x09
    2944:	9a 85       	ldd	r25, Y+10	; 0x0a
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <ServoMotor_Off+0x66>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	3f c0       	rjmp	.+126    	; 0x29de <ServoMotor_Off+0xe4>
	else if (__tmp > 65535)
    2960:	6f 81       	ldd	r22, Y+7	; 0x07
    2962:	78 85       	ldd	r23, Y+8	; 0x08
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	9a 85       	ldd	r25, Y+10	; 0x0a
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <ServoMotor_Off+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	6b 85       	ldd	r22, Y+11	; 0x0b
    297a:	7c 85       	ldd	r23, Y+12	; 0x0c
    297c:	8d 85       	ldd	r24, Y+13	; 0x0d
    297e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <ServoMotor_Off+0xc6>
    29a2:	80 e9       	ldi	r24, 0x90	; 144
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	9c 81       	ldd	r25, Y+4	; 0x04
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <ServoMotor_Off+0xb4>
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <ServoMotor_Off+0xa8>
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <ServoMotor_Off+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <ServoMotor_Off+0xf0>
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
	//Delay to avoid cutting timer operation
	_delay_ms(400);
	//stop the timer
	T1_voidStop();
    29f2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <T1_voidStop>
}
    29f6:	2e 96       	adiw	r28, 0x0e	; 14
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <TMR0_voidInit>:
static volatile u16 CTC_Counter=0;
/*
 *Description:Function that initialize timer mode of operation
 */
void TMR0_voidInit()
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	//Enable Interrupt
	SET_BIT(TIMSK,OCIE0);

#elif TMR0_MODE==TMR0_FAST_PWM_MODE
	//Select mode FAST_PWM_MODE
	SET_BIT(TCCR0,WGM00);
    2a10:	a3 e5       	ldi	r26, 0x53	; 83
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e3 e5       	ldi	r30, 0x53	; 83
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	80 64       	ori	r24, 0x40	; 64
    2a1c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2a1e:	a3 e5       	ldi	r26, 0x53	; 83
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e3 e5       	ldi	r30, 0x53	; 83
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	88 60       	ori	r24, 0x08	; 8
    2a2a:	8c 93       	st	X, r24
	//Select non-Inverting PWM
#if TMR0_PWM_MODE==TMR0_PWM_NON_INVERTING
	SET_BIT(TCCR0,COM01);
    2a2c:	a3 e5       	ldi	r26, 0x53	; 83
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e3 e5       	ldi	r30, 0x53	; 83
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	80 62       	ori	r24, 0x20	; 32
    2a38:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM00);
    2a3a:	a3 e5       	ldi	r26, 0x53	; 83
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e3 e5       	ldi	r30, 0x53	; 83
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 7e       	andi	r24, 0xEF	; 239
    2a46:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM00);
#endif


#endif
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <TMR0_voidStart>:
/*
 * Description:Function starts timer by setting Prescaler value
 * */
void TMR0_voidStart()
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
#elif TMR0_PRESCALER==TMR0_PRESCALER_8
	CLEAR_BIT(TCCR0,CS00);
	SET_BIT(TCCR0,CS01);
	CLEAR_BIT(TCCR0,CS02);
#elif TMR0_PRESCALER==TMR0_PRESCALER_64
	SET_BIT(TCCR0,CS00);
    2a56:	a3 e5       	ldi	r26, 0x53	; 83
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e3 e5       	ldi	r30, 0x53	; 83
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	81 60       	ori	r24, 0x01	; 1
    2a62:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2a64:	a3 e5       	ldi	r26, 0x53	; 83
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e3 e5       	ldi	r30, 0x53	; 83
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	82 60       	ori	r24, 0x02	; 2
    2a70:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    2a72:	a3 e5       	ldi	r26, 0x53	; 83
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e3 e5       	ldi	r30, 0x53	; 83
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8b 7f       	andi	r24, 0xFB	; 251
    2a7e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS00);
	CLEAR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);

#endif
}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <TMR0_voidStop>:
/*
 * Description:Function stops timer by setting Prescaler value to zero
 * */
void TMR0_voidStop()
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,CS00);
    2a8e:	a3 e5       	ldi	r26, 0x53	; 83
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e3 e5       	ldi	r30, 0x53	; 83
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	8e 7f       	andi	r24, 0xFE	; 254
    2a9a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    2a9c:	a3 e5       	ldi	r26, 0x53	; 83
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8d 7f       	andi	r24, 0xFD	; 253
    2aa8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    2aaa:	a3 e5       	ldi	r26, 0x53	; 83
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e3 e5       	ldi	r30, 0x53	; 83
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8b 7f       	andi	r24, 0xFB	; 251
    2ab6:	8c 93       	st	X, r24

}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <TMR0_voidSetCallBackOVF>:
/*
 * Description:Function that set Callback function for Normal mode
 */
void TMR0_voidSetCallBackOVF(void (*ptrfun)(void))
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <TMR0_voidSetCallBackOVF+0x6>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfun!=NULL)
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	31 f0       	breq	.+12     	; 0x2ae0 <TMR0_voidSetCallBackOVF+0x22>
	{
		CallbackFunOVF=ptrfun;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad8:	90 93 2a 02 	sts	0x022A, r25
    2adc:	80 93 29 02 	sts	0x0229, r24
	}
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <TMR0_voidSetCallBackCTC>:
/*
 * Description:Function that set Callback function for CTC mode
 */
void TMR0_voidSetCallBackCTC(void (*ptrfun)(void))
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <TMR0_voidSetCallBackCTC+0x6>
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfun!=NULL)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	31 f0       	breq	.+12     	; 0x2b0c <TMR0_voidSetCallBackCTC+0x22>
	{
		CallbackFunCTC=ptrfun;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	90 93 2c 02 	sts	0x022C, r25
    2b08:	80 93 2b 02 	sts	0x022B, r24
	}
}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <TMR0_voidSetCompareMatchvalue>:
/*
 * Description:Function that set Compare match register value
 */
void TMR0_voidSetCompareMatchvalue(u8 copy_u8CompareValue)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	0f 92       	push	r0
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_u8CompareValue;
    2b22:	e1 e5       	ldi	r30, 0x51	; 81
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	80 83       	st	Z, r24
}
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <TMR0_voidSetDelay_ms_usingCTC>:
/*
 * Description:Function that set delay for CTC mode
 */
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	CTC_Counter=copy_u16Delay_ms*400;
#elif TMR0_PRESCALER==TMR0_PRESCALER_8
	OCR0=249;
	CTC_Counter=copy_u16Delay_ms*8;
#elif TMR0_PRESCALER==TMR0_PRESCALER_64
	OCR0=249;
    2b40:	e1 e5       	ldi	r30, 0x51	; 81
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	89 ef       	ldi	r24, 0xF9	; 249
    2b46:	80 83       	st	Z, r24
	CTC_Counter=copy_u16Delay_ms;
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	90 93 2e 02 	sts	0x022E, r25
    2b50:	80 93 2d 02 	sts	0x022D, r24
	OCR0=3;
	CTC_Counter=copy_u16Delay_ms*4;


#endif
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <TMR0_voidSetDutycycle>:
/*
 * Description:Function that set Duty cycle for all PWM modes
 */
void TMR0_voidSetDutycycle(u8 copy_u8Duty)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Duty<=100)
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	85 36       	cpi	r24, 0x65	; 101
    2b6e:	78 f4       	brcc	.+30     	; 0x2b8e <TMR0_voidSetDutycycle+0x30>
	{
#if TMR0_PWM_MODE==TMR0_PWM_NON_INVERTING
		OCR0=((u16)(copy_u8Duty*256)/100)-1;
    2b70:	e1 e5       	ldi	r30, 0x51	; 81
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	88 27       	eor	r24, r24
    2b7e:	24 e6       	ldi	r18, 0x64	; 100
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	b9 01       	movw	r22, r18
    2b84:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    2b88:	cb 01       	movw	r24, r22
    2b8a:	81 50       	subi	r24, 0x01	; 1
    2b8c:	80 83       	st	Z, r24
#elif TMR0_PWM_MODE==TMR0_PWM_INVERTING
		//OCR0=255-(((uint16)copy_u8Duty*256)/100);
		OCR0=((uint16)((100-copy_u8Duty)*256)/100)-1;
#endif
	}
}
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <__vector_14>:
/*
 * Description:ISR for Timer0 Normal mode
 */
void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    2b96:	1f 92       	push	r1
    2b98:	0f 92       	push	r0
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	0f 92       	push	r0
    2b9e:	00 90 5b 00 	lds	r0, 0x005B
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	2f 93       	push	r18
    2ba8:	3f 93       	push	r19
    2baa:	4f 93       	push	r20
    2bac:	5f 93       	push	r21
    2bae:	6f 93       	push	r22
    2bb0:	7f 93       	push	r23
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	ef 93       	push	r30
    2bbc:	ff 93       	push	r31
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16counter=0;
	local_u16counter++;
    2bc6:	80 91 2f 02 	lds	r24, 0x022F
    2bca:	90 91 30 02 	lds	r25, 0x0230
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	90 93 30 02 	sts	0x0230, r25
    2bd4:	80 93 2f 02 	sts	0x022F, r24
	if(TMR0_OVER_FLOW_COUNTER==local_u16counter)
    2bd8:	80 91 2f 02 	lds	r24, 0x022F
    2bdc:	90 91 30 02 	lds	r25, 0x0230
    2be0:	23 e0       	ldi	r18, 0x03	; 3
    2be2:	81 3d       	cpi	r24, 0xD1	; 209
    2be4:	92 07       	cpc	r25, r18
    2be6:	99 f4       	brne	.+38     	; 0x2c0e <__vector_14+0x78>
	{
		TCNT0=TMRO_PRELOAD_VALUE;
    2be8:	e2 e5       	ldi	r30, 0x52	; 82
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	81 e7       	ldi	r24, 0x71	; 113
    2bee:	80 83       	st	Z, r24
		local_u16counter=0;
    2bf0:	10 92 30 02 	sts	0x0230, r1
    2bf4:	10 92 2f 02 	sts	0x022F, r1

		if(CallbackFunOVF!=NULL)
    2bf8:	80 91 29 02 	lds	r24, 0x0229
    2bfc:	90 91 2a 02 	lds	r25, 0x022A
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	29 f0       	breq	.+10     	; 0x2c0e <__vector_14+0x78>
		{
			CallbackFunOVF();
    2c04:	e0 91 29 02 	lds	r30, 0x0229
    2c08:	f0 91 2a 02 	lds	r31, 0x022A
    2c0c:	09 95       	icall
		}
	}

}
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	ff 91       	pop	r31
    2c14:	ef 91       	pop	r30
    2c16:	bf 91       	pop	r27
    2c18:	af 91       	pop	r26
    2c1a:	9f 91       	pop	r25
    2c1c:	8f 91       	pop	r24
    2c1e:	7f 91       	pop	r23
    2c20:	6f 91       	pop	r22
    2c22:	5f 91       	pop	r21
    2c24:	4f 91       	pop	r20
    2c26:	3f 91       	pop	r19
    2c28:	2f 91       	pop	r18
    2c2a:	0f 90       	pop	r0
    2c2c:	00 92 5b 00 	sts	0x005B, r0
    2c30:	0f 90       	pop	r0
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	0f 90       	pop	r0
    2c36:	1f 90       	pop	r1
    2c38:	18 95       	reti

00002c3a <__vector_15>:
/*
 * Description:ISR for Timer0 CTC mode
 */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    2c3a:	1f 92       	push	r1
    2c3c:	0f 92       	push	r0
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	0f 92       	push	r0
    2c42:	00 90 5b 00 	lds	r0, 0x005B
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	2f 93       	push	r18
    2c4c:	3f 93       	push	r19
    2c4e:	4f 93       	push	r20
    2c50:	5f 93       	push	r21
    2c52:	6f 93       	push	r22
    2c54:	7f 93       	push	r23
    2c56:	8f 93       	push	r24
    2c58:	9f 93       	push	r25
    2c5a:	af 93       	push	r26
    2c5c:	bf 93       	push	r27
    2c5e:	ef 93       	push	r30
    2c60:	ff 93       	push	r31
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16counter=0;
	local_u16counter++;
    2c6a:	80 91 31 02 	lds	r24, 0x0231
    2c6e:	90 91 32 02 	lds	r25, 0x0232
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	90 93 32 02 	sts	0x0232, r25
    2c78:	80 93 31 02 	sts	0x0231, r24
	if(CTC_Counter==local_u16counter)
    2c7c:	20 91 2d 02 	lds	r18, 0x022D
    2c80:	30 91 2e 02 	lds	r19, 0x022E
    2c84:	80 91 31 02 	lds	r24, 0x0231
    2c88:	90 91 32 02 	lds	r25, 0x0232
    2c8c:	28 17       	cp	r18, r24
    2c8e:	39 07       	cpc	r19, r25
    2c90:	79 f4       	brne	.+30     	; 0x2cb0 <__vector_15+0x76>
	{
		local_u16counter=0;
    2c92:	10 92 32 02 	sts	0x0232, r1
    2c96:	10 92 31 02 	sts	0x0231, r1
		if(CallbackFunCTC!=NULL)
    2c9a:	80 91 2b 02 	lds	r24, 0x022B
    2c9e:	90 91 2c 02 	lds	r25, 0x022C
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	29 f0       	breq	.+10     	; 0x2cb0 <__vector_15+0x76>
		{
			CallbackFunCTC();
    2ca6:	e0 91 2b 02 	lds	r30, 0x022B
    2caa:	f0 91 2c 02 	lds	r31, 0x022C
    2cae:	09 95       	icall
		}
	}
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	ff 91       	pop	r31
    2cb6:	ef 91       	pop	r30
    2cb8:	bf 91       	pop	r27
    2cba:	af 91       	pop	r26
    2cbc:	9f 91       	pop	r25
    2cbe:	8f 91       	pop	r24
    2cc0:	7f 91       	pop	r23
    2cc2:	6f 91       	pop	r22
    2cc4:	5f 91       	pop	r21
    2cc6:	4f 91       	pop	r20
    2cc8:	3f 91       	pop	r19
    2cca:	2f 91       	pop	r18
    2ccc:	0f 90       	pop	r0
    2cce:	00 92 5b 00 	sts	0x005B, r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	0f 90       	pop	r0
    2cd8:	1f 90       	pop	r1
    2cda:	18 95       	reti

00002cdc <T1_voidInit>:
#include "Timer1_Private.h"
#include "Timer1_Interface.h"


void T1_voidInit(void)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
	//SetMode
	#if T1_MODE == T1_FastPWM_M14
	CLEAR_BIT(TCCR1A,WGM10);
    2ce4:	af e4       	ldi	r26, 0x4F	; 79
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	ef e4       	ldi	r30, 0x4F	; 79
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8e 7f       	andi	r24, 0xFE	; 254
    2cf0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2cf2:	af e4       	ldi	r26, 0x4F	; 79
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	ef e4       	ldi	r30, 0x4F	; 79
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	82 60       	ori	r24, 0x02	; 2
    2cfe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2d00:	ae e4       	ldi	r26, 0x4E	; 78
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	ee e4       	ldi	r30, 0x4E	; 78
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 60       	ori	r24, 0x08	; 8
    2d0c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    2d0e:	ae e4       	ldi	r26, 0x4E	; 78
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ee e4       	ldi	r30, 0x4E	; 78
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	80 61       	ori	r24, 0x10	; 16
    2d1a:	8c 93       	st	X, r24
#endif
		#if		T1_PWM_Mode == T1_PWM_NONINVERTING
			CLEAR_BIT(TCCR1A,COM1A0);
    2d1c:	af e4       	ldi	r26, 0x4F	; 79
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ef e4       	ldi	r30, 0x4F	; 79
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 7b       	andi	r24, 0xBF	; 191
    2d28:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);
    2d2a:	af e4       	ldi	r26, 0x4F	; 79
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ef e4       	ldi	r30, 0x4F	; 79
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 68       	ori	r24, 0x80	; 128
    2d36:	8c 93       	st	X, r24
	#endif
}
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <T1_voidStart>:
void T1_voidStart(void)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
	#elif	T1_PRESCALER ==	T1_PRESCALER_8
		T1.TCCR1B.Bits.CS10_Bit	= LOW;
		T1.TCCR1B.Bits.CS11_Bit	= HIGH;
		T1.TCCR1B.Bits.CS12_Bit	= LOW;
	#elif	T1_PRESCALER ==	T1_PRESCALER_64
		SET_BIT(TCCR1B,CS10);
    2d46:	ae e4       	ldi	r26, 0x4E	; 78
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	ee e4       	ldi	r30, 0x4E	; 78
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	81 60       	ori	r24, 0x01	; 1
    2d52:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS11);
    2d54:	ae e4       	ldi	r26, 0x4E	; 78
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ee e4       	ldi	r30, 0x4E	; 78
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 60       	ori	r24, 0x02	; 2
    2d60:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,CS12);
    2d62:	ae e4       	ldi	r26, 0x4E	; 78
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	ee e4       	ldi	r30, 0x4E	; 78
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8b 7f       	andi	r24, 0xFB	; 251
    2d6e:	8c 93       	st	X, r24
		T1.TCCR1B.Bits.CS11_Bit	= LOW;
		T1.TCCR1B.Bits.CS12_Bit	= HIGH;
	#endif
	
	
}
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <T1_voidStop>:
void T1_voidStop(void)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    2d7e:	ae e4       	ldi	r26, 0x4E	; 78
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	ee e4       	ldi	r30, 0x4E	; 78
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8e 7f       	andi	r24, 0xFE	; 254
    2d8a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    2d8c:	ae e4       	ldi	r26, 0x4E	; 78
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ee e4       	ldi	r30, 0x4E	; 78
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8d 7f       	andi	r24, 0xFD	; 253
    2d98:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    2d9a:	ae e4       	ldi	r26, 0x4E	; 78
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ee e4       	ldi	r30, 0x4E	; 78
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8b 7f       	andi	r24, 0xFB	; 251
    2da6:	8c 93       	st	X, r24
}
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <T1_voidSetCompMatchValA>:
void T1_voidSetCompMatchValA(u16 copy_u16CompareMatchVal)
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <T1_voidSetCompMatchValA+0x6>
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u16CompareMatchVal;
    2dbc:	ea e4       	ldi	r30, 0x4A	; 74
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <T1_SetDyty_Mode14>:
void T1_SetDyty_Mode14(f32 copy_f32DytyCycleVal)
{
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <T1_SetDyty_Mode14+0xa>
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <T1_SetDyty_Mode14+0xc>
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	69 83       	std	Y+1, r22	; 0x01
    2de4:	7a 83       	std	Y+2, r23	; 0x02
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    2de8:	9c 83       	std	Y+4, r25	; 0x04
	#if T1_MODE == T1_FastPWM_M14
		#if		T1_PWM_Mode == T1_PWM_NONINVERTING
			OCR1A = (((copy_f32DytyCycleVal*(ICR1 +1))/100)-1);
    2dea:	0a e4       	ldi	r16, 0x4A	; 74
    2dec:	10 e0       	ldi	r17, 0x00	; 0
    2dee:	e6 e4       	ldi	r30, 0x46	; 70
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	cc 01       	movw	r24, r24
    2dfa:	a0 e0       	ldi	r26, 0x00	; 0
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 25 05 	call	0xa4a	; 0xa4a <__floatunsisf>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	29 81       	ldd	r18, Y+1	; 0x01
    2e10:	3a 81       	ldd	r19, Y+2	; 0x02
    2e12:	4b 81       	ldd	r20, Y+3	; 0x03
    2e14:	5c 81       	ldd	r21, Y+4	; 0x04
    2e16:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	48 ec       	ldi	r20, 0xC8	; 200
    2e28:	52 e4       	ldi	r21, 0x42	; 66
    2e2a:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	f8 01       	movw	r30, r16
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
	#endif
	
	
	
	
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

00002e6a <T1_SetFreq_Mode14>:
void T1_SetFreq_Mode14(u16 copy_u16FreqVal)
{
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <T1_SetFreq_Mode14+0xa>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	9a 83       	std	Y+2, r25	; 0x02
    2e7a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = (((1000000UL/copy_u16FreqVal)/4)-1);
    2e7c:	06 e4       	ldi	r16, 0x46	; 70
    2e7e:	10 e0       	ldi	r17, 0x00	; 0
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	9a 81       	ldd	r25, Y+2	; 0x02
    2e84:	9c 01       	movw	r18, r24
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	80 e9       	ldi	r24, 0x90	; 144
    2e8c:	90 ed       	ldi	r25, 0xD0	; 208
    2e8e:	a3 e0       	ldi	r26, 0x03	; 3
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodsi4>
    2e9a:	da 01       	movw	r26, r20
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	08 95       	ret

00002eb4 <UART0_init>:
#include "UART0_interface.h"
#include "UART0_Register.h"
#include"UART0_Config.h"
#include"UART0_Private.h"
void UART0_init()
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
	//Enable RX and TX
	UCSR0B|=(1<<TXEN0)|(1<<RXEN0);
    2ebc:	aa e2       	ldi	r26, 0x2A	; 42
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	ea e2       	ldi	r30, 0x2A	; 42
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 61       	ori	r24, 0x18	; 24
    2ec8:	8c 93       	st	X, r24
#if  UART0_BAUDRATE==BAUDRATE_9600
	UBRR0L=103;
    2eca:	e9 e2       	ldi	r30, 0x29	; 41
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	87 e6       	ldi	r24, 0x67	; 103
    2ed0:	80 83       	st	Z, r24

#if UART0_PARITY==EVEN_PARITY
	SET_BIT(UCSR0C,UMP01);
	CLEAR_BIT(UCSR0C,UMP00);
#elif UART0_PARITY==ODD_PARTY
	SET_BIT(UCSR0C,UMP01);
    2ed2:	a5 e9       	ldi	r26, 0x95	; 149
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e5 e9       	ldi	r30, 0x95	; 149
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	80 62       	ori	r24, 0x20	; 32
    2ede:	8c 93       	st	X, r24
	SET_BIT(UCSR0C,UMP00);
    2ee0:	a5 e9       	ldi	r26, 0x95	; 149
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e5 e9       	ldi	r30, 0x95	; 149
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 61       	ori	r24, 0x10	; 16
    2eec:	8c 93       	st	X, r24
#elif UART0_PARITY==NO_PARITY
	CLEAR_BIT(UCSR0C,UMP01);
	CLEAR_BIT(UCSR0C,UMP00);
#endif
#if   UART0_STOP_BIT==ONE_STOPBIT
	CLEAR_BIT(UCSR0C,USBS0);
    2eee:	a5 e9       	ldi	r26, 0x95	; 149
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e5 e9       	ldi	r30, 0x95	; 149
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	87 7f       	andi	r24, 0xF7	; 247
    2efa:	8c 93       	st	X, r24
#elif UART0_STOP_BIT==TWO_STOPBIT
	SET_BIT(UCSR0C,USBS0);
#endif
	/*8 BIT mode*/
	SET_BIT(UCSR0C,UCSZ00);
    2efc:	a5 e9       	ldi	r26, 0x95	; 149
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e5 e9       	ldi	r30, 0x95	; 149
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	82 60       	ori	r24, 0x02	; 2
    2f08:	8c 93       	st	X, r24
	SET_BIT(UCSR0C,UCSZ01);
    2f0a:	a5 e9       	ldi	r26, 0x95	; 149
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e5 e9       	ldi	r30, 0x95	; 149
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	84 60       	ori	r24, 0x04	; 4
    2f16:	8c 93       	st	X, r24
}
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <UART0_SendByte>:
void UART0_SendByte(u8 copyu8Data)
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	0f 92       	push	r0
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSR0A,UDRE0));
    2f2a:	eb e2       	ldi	r30, 0x2B	; 43
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	82 95       	swap	r24
    2f32:	86 95       	lsr	r24
    2f34:	87 70       	andi	r24, 0x07	; 7
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	81 70       	andi	r24, 0x01	; 1
    2f3c:	90 70       	andi	r25, 0x00	; 0
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	a1 f3       	breq	.-24     	; 0x2f2a <UART0_SendByte+0xc>
	UDR0=copyu8Data;
    2f42:	ec e2       	ldi	r30, 0x2C	; 44
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	80 83       	st	Z, r24

}
    2f4a:	0f 90       	pop	r0
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <UART0_RecieveByte>:
u8 UART0_RecieveByte()
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSR0A,RXC0));
    2f5a:	eb e2       	ldi	r30, 0x2B	; 43
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	88 23       	and	r24, r24
    2f62:	dc f7       	brge	.-10     	; 0x2f5a <UART0_RecieveByte+0x8>
	return UDR0;
    2f64:	ec e2       	ldi	r30, 0x2C	; 44
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z

}
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <__vector_25>:
#include <avr/interrupt.h>

/* a pointer to function to capture the passed address of call back function */
void (*callBack)(void);
ISR(TIMER3_CAPT_vect)
{
    2f70:	1f 92       	push	r1
    2f72:	0f 92       	push	r0
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	0f 92       	push	r0
    2f78:	00 90 5b 00 	lds	r0, 0x005B
    2f7c:	0f 92       	push	r0
    2f7e:	11 24       	eor	r1, r1
    2f80:	2f 93       	push	r18
    2f82:	3f 93       	push	r19
    2f84:	4f 93       	push	r20
    2f86:	5f 93       	push	r21
    2f88:	6f 93       	push	r22
    2f8a:	7f 93       	push	r23
    2f8c:	8f 93       	push	r24
    2f8e:	9f 93       	push	r25
    2f90:	af 93       	push	r26
    2f92:	bf 93       	push	r27
    2f94:	ef 93       	push	r30
    2f96:	ff 93       	push	r31
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
	/* call the call back function  */
	(*callBack)();
    2fa0:	e0 91 38 02 	lds	r30, 0x0238
    2fa4:	f0 91 39 02 	lds	r31, 0x0239
    2fa8:	09 95       	icall

}
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	ff 91       	pop	r31
    2fb0:	ef 91       	pop	r30
    2fb2:	bf 91       	pop	r27
    2fb4:	af 91       	pop	r26
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	7f 91       	pop	r23
    2fbc:	6f 91       	pop	r22
    2fbe:	5f 91       	pop	r21
    2fc0:	4f 91       	pop	r20
    2fc2:	3f 91       	pop	r19
    2fc4:	2f 91       	pop	r18
    2fc6:	0f 90       	pop	r0
    2fc8:	00 92 5b 00 	sts	0x005B, r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	0f 90       	pop	r0
    2fd2:	1f 90       	pop	r1
    2fd4:	18 95       	reti

00002fd6 <ICU_init>:
 * 	edge detection: 0 for falling edge an 1 for rising edge
 *  prescaler: 8,64,256,1024 and default 1
 *  RETURNS: none
 */
void ICU_init(u8 edge_select, u16 prescaler)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <ICU_init+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <ICU_init+0x8>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	7b 83       	std	Y+3, r23	; 0x03
    2fe8:	6a 83       	std	Y+2, r22	; 0x02
	TCCR3A=0;
    2fea:	eb e8       	ldi	r30, 0x8B	; 139
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	10 82       	st	Z, r1
	TCCR3B=0;
    2ff0:	ea e8       	ldi	r30, 0x8A	; 138
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	10 82       	st	Z, r1
	ETIFR=0;
    2ff6:	ec e7       	ldi	r30, 0x7C	; 124
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	10 82       	st	Z, r1
	ETIMSK=0;
    2ffc:	ed e7       	ldi	r30, 0x7D	; 125
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	10 82       	st	Z, r1
    ICR3=0;
    3002:	e0 e8       	ldi	r30, 0x80	; 128
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	11 82       	std	Z+1, r1	; 0x01
    3008:	10 82       	st	Z, r1
    TCNT3=0;
    300a:	e8 e8       	ldi	r30, 0x88	; 136
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	11 82       	std	Z+1, r1	; 0x01
    3010:	10 82       	st	Z, r1

	DDRE &= ~(1<<7);             /* set ICP3/PE7 as i/p pin */
    3012:	a2 e2       	ldi	r26, 0x22	; 34
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e2 e2       	ldi	r30, 0x22	; 34
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	8f 77       	andi	r24, 0x7F	; 127
    301e:	8c 93       	st	X, r24

	/* select capture edge rising or falling */
	if (edge_select==HIGH)
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	41 f4       	brne	.+16     	; 0x3036 <ICU_init+0x60>
		SET_BIT(TCCR3B,ICES3);   /* rising edge */
    3026:	aa e8       	ldi	r26, 0x8A	; 138
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	ea e8       	ldi	r30, 0x8A	; 138
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	80 64       	ori	r24, 0x40	; 64
    3032:	8c 93       	st	X, r24
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <ICU_init+0x6e>
	else
		CLEAR_BIT(TCCR3B,ICES3); /* falling edge */
    3036:	aa e8       	ldi	r26, 0x8A	; 138
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	ea e8       	ldi	r30, 0x8A	; 138
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	8f 7b       	andi	r24, 0xBF	; 191
    3042:	8c 93       	st	X, r24


/* clear first three bits in TCCR1B Register to insert prescaler in them */
	TCCR3B &=(0xf8);
    3044:	aa e8       	ldi	r26, 0x8A	; 138
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	ea e8       	ldi	r30, 0x8A	; 138
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	88 7f       	andi	r24, 0xF8	; 248
    3050:	8c 93       	st	X, r24


	TCNT3=0;               /* initialize timer3 value  */
    3052:	e8 e8       	ldi	r30, 0x88	; 136
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	11 82       	std	Z+1, r1	; 0x01
    3058:	10 82       	st	Z, r1
	ICR3=0;                /* initialize input capture unit value  */
    305a:	e0 e8       	ldi	r30, 0x80	; 128
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	11 82       	std	Z+1, r1	; 0x01
    3060:	10 82       	st	Z, r1

	SET_BIT(ETIMSK,TICIE3); /* enable input capture interrupt */
    3062:	ad e7       	ldi	r26, 0x7D	; 125
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	ed e7       	ldi	r30, 0x7D	; 125
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	80 62       	ori	r24, 0x20	; 32
    306e:	8c 93       	st	X, r24
	SET_BIT(ETIFR,ICF3);    /* enable input capture interrupt flag */
    3070:	ac e7       	ldi	r26, 0x7C	; 124
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	ec e7       	ldi	r30, 0x7C	; 124
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	80 62       	ori	r24, 0x20	; 32
    307c:	8c 93       	st	X, r24
	SET_BIT(SREG,7);       /* enable global interrupts */
    307e:	af e5       	ldi	r26, 0x5F	; 95
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ef e5       	ldi	r30, 0x5F	; 95
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 68       	ori	r24, 0x80	; 128
    308a:	8c 93       	st	X, r24

	switch (prescaler)
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	9d 83       	std	Y+5, r25	; 0x05
    3092:	8c 83       	std	Y+4, r24	; 0x04
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	9d 81       	ldd	r25, Y+5	; 0x05
    3098:	80 34       	cpi	r24, 0x40	; 64
    309a:	91 05       	cpc	r25, r1
    309c:	01 f1       	breq	.+64     	; 0x30de <ICU_init+0x108>
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	9d 81       	ldd	r25, Y+5	; 0x05
    30a2:	81 34       	cpi	r24, 0x41	; 65
    30a4:	91 05       	cpc	r25, r1
    30a6:	30 f4       	brcc	.+12     	; 0x30b4 <ICU_init+0xde>
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	9d 81       	ldd	r25, Y+5	; 0x05
    30ac:	88 30       	cpi	r24, 0x08	; 8
    30ae:	91 05       	cpc	r25, r1
    30b0:	71 f0       	breq	.+28     	; 0x30ce <ICU_init+0xf8>
    30b2:	2d c0       	rjmp	.+90     	; 0x310e <ICU_init+0x138>
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	21 e0       	ldi	r18, 0x01	; 1
    30ba:	80 30       	cpi	r24, 0x00	; 0
    30bc:	92 07       	cpc	r25, r18
    30be:	b9 f0       	breq	.+46     	; 0x30ee <ICU_init+0x118>
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	9d 81       	ldd	r25, Y+5	; 0x05
    30c4:	24 e0       	ldi	r18, 0x04	; 4
    30c6:	80 30       	cpi	r24, 0x00	; 0
    30c8:	92 07       	cpc	r25, r18
    30ca:	c9 f0       	breq	.+50     	; 0x30fe <ICU_init+0x128>
    30cc:	20 c0       	rjmp	.+64     	; 0x310e <ICU_init+0x138>
	{
	case 8:
		TCCR3B |=(0x02);      /* set the prescaler of ICU 8 */
    30ce:	aa e8       	ldi	r26, 0x8A	; 138
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	ea e8       	ldi	r30, 0x8A	; 138
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	82 60       	ori	r24, 0x02	; 2
    30da:	8c 93       	st	X, r24
    30dc:	1f c0       	rjmp	.+62     	; 0x311c <ICU_init+0x146>
	break;

	case 64:
		TCCR3B |=(0x03);      /* set the prescaler of ICU 64 */
    30de:	aa e8       	ldi	r26, 0x8A	; 138
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	ea e8       	ldi	r30, 0x8A	; 138
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	83 60       	ori	r24, 0x03	; 3
    30ea:	8c 93       	st	X, r24
    30ec:	17 c0       	rjmp	.+46     	; 0x311c <ICU_init+0x146>
	break;

	case 256:
		TCCR3B |=(0x04);      /* set the prescaler of ICU 256 */
    30ee:	aa e8       	ldi	r26, 0x8A	; 138
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ea e8       	ldi	r30, 0x8A	; 138
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	84 60       	ori	r24, 0x04	; 4
    30fa:	8c 93       	st	X, r24
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <ICU_init+0x146>
	break;

	case 1024:
		TCCR3B |=(0x05);      /* set the prescaler of ICU 1024 */
    30fe:	aa e8       	ldi	r26, 0x8A	; 138
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ea e8       	ldi	r30, 0x8A	; 138
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	85 60       	ori	r24, 0x05	; 5
    310a:	8c 93       	st	X, r24
    310c:	07 c0       	rjmp	.+14     	; 0x311c <ICU_init+0x146>
	break;
	default:
		TCCR3B |=(0x01);      /* set the prescaler of ICU 1 */
    310e:	aa e8       	ldi	r26, 0x8A	; 138
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	ea e8       	ldi	r30, 0x8A	; 138
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	81 60       	ori	r24, 0x01	; 1
    311a:	8c 93       	st	X, r24
	break;

	}

}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <ICU_setCallBack>:
 * Description: Function to set the Call Back function address
 * INPUTS: a pointer to function
 * RETURNS: none
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <ICU_setCallBack+0x6>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
/* load the given call back function in a global pointer to function */
 callBack=a_ptr;
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	9a 81       	ldd	r25, Y+2	; 0x02
    313e:	90 93 39 02 	sts	0x0239, r25
    3142:	80 93 38 02 	sts	0x0238, r24
}
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <Icu_setEdgeDetectionType>:
 * 	INPUTS: required edge detection
 * 	edge detection: 0 for falling edge an 1 for rising edge
 * RETURNS: none
 */
void Icu_setEdgeDetectionType(u8 edge_select)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	0f 92       	push	r0
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	89 83       	std	Y+1, r24	; 0x01
/* select capture edge rising or falling */
	if (edge_select==HIGH)
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	41 f4       	brne	.+16     	; 0x3172 <Icu_setEdgeDetectionType+0x22>
		SET_BIT(TCCR3B,ICES3);    /* rising edge */
    3162:	aa e8       	ldi	r26, 0x8A	; 138
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	ea e8       	ldi	r30, 0x8A	; 138
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	80 64       	ori	r24, 0x40	; 64
    316e:	8c 93       	st	X, r24
    3170:	07 c0       	rjmp	.+14     	; 0x3180 <Icu_setEdgeDetectionType+0x30>
	else
		CLEAR_BIT(TCCR3B,ICES3);  /* falling edge */
    3172:	aa e8       	ldi	r26, 0x8A	; 138
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ea e8       	ldi	r30, 0x8A	; 138
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8f 7b       	andi	r24, 0xBF	; 191
    317e:	8c 93       	st	X, r24
}
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <Icu_getInputCaptureValue>:
 * The value stored at Input Capture Register ICR1
 * INPUTS: none
 * RETURNS: timer1 value
 */
u16 Icu_getInputCaptureValue(void)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
	return ICR3;
    3190:	e0 e8       	ldi	r30, 0x80	; 128
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
}
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <Icu_clearTimerValue>:
 * Description: Function to clear the Timer1 Value to start count from ZERO
 * INPUTS: none
 * RETURNS:none
 */
void Icu_clearTimerValue(void)
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
	TCNT3 = 0;                 /* clear timer1 value */
    31a6:	e8 e8       	ldi	r30, 0x88	; 136
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	11 82       	std	Z+1, r1	; 0x01
    31ac:	10 82       	st	Z, r1
}
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <Icu_DeInit>:
 * Description: Function to disable the Timer1 to stop the ICU Drive
 * INPUTS: none
 * RETURNS:none
 */
void Icu_DeInit(void)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR3A = 0;
    31bc:	eb e8       	ldi	r30, 0x8B	; 139
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	10 82       	st	Z, r1
	TCCR3B = 0;
    31c2:	ea e8       	ldi	r30, 0x8A	; 138
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	10 82       	st	Z, r1
	TCNT3 = 0;
    31c8:	e8 e8       	ldi	r30, 0x88	; 136
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	11 82       	std	Z+1, r1	; 0x01
    31ce:	10 82       	st	Z, r1
	ICR3 = 0;
    31d0:	e0 e8       	ldi	r30, 0x80	; 128
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	11 82       	std	Z+1, r1	; 0x01
    31d6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	ETIMSK &= ~(1<<TICIE3);
    31d8:	ad e7       	ldi	r26, 0x7D	; 125
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	ed e7       	ldi	r30, 0x7D	; 125
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8f 7d       	andi	r24, 0xDF	; 223
    31e4:	8c 93       	st	X, r24
}
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <main>:
/*
 * a function to initialize the system
 * */
void system_init(void);
int main(void)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	2e 97       	sbiw	r28, 0x0e	; 14
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
	 system_init();
    3200:	0e 94 c0 19 	call	0x3380	; 0x3380 <system_init>

	while(1)
	{
		blind_spot();
    3204:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <blind_spot>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a6 e9       	ldi	r26, 0x96	; 150
    320e:	b3 e4       	ldi	r27, 0x43	; 67
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <main+0x6e>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <main+0xec>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <main+0xce>
    329c:	80 e9       	ldi	r24, 0x90	; 144
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <main+0xbc>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <main+0xb0>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <main+0xf8>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		adaptive_lighting();
    32ec:	0e 94 ae 19 	call	0x335c	; 0x335c <adaptive_lighting>
		adaptive_lighting_position();
    32f0:	0e 94 e6 19 	call	0x33cc	; 0x33cc <adaptive_lighting_position>
    32f4:	87 cf       	rjmp	.-242    	; 0x3204 <main+0x18>

000032f6 <blind_spot>:

	}
	return 0;
	}
void blind_spot(void)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	if (Ultrasonic_1_readDistance()<=20)
    32fe:	0e 94 04 1c 	call	0x3808	; 0x3808 <Ultrasonic_1_readDistance>
    3302:	85 31       	cpi	r24, 0x15	; 21
    3304:	91 05       	cpc	r25, r1
    3306:	68 f4       	brcc	.+26     	; 0x3322 <blind_spot+0x2c>
	{
		LCD_Clear();
    3308:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_Clear>
		LCD_SetPosition(1,2);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	62 e0       	ldi	r22, 0x02	; 2
    3310:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_SetPosition>
		LCD_String("an object detected\0");
    3314:	84 e0       	ldi	r24, 0x04	; 4
    3316:	91 e0       	ldi	r25, 0x01	; 1
    3318:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_String>
		blind_spot_led_on();
    331c:	0e 94 98 19 	call	0x3330	; 0x3330 <blind_spot_led_on>
    3320:	04 c0       	rjmp	.+8      	; 0x332a <blind_spot+0x34>

	}
	else
	{
		LCD_Clear();
    3322:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_Clear>
		blind_spot_led_off();
    3326:	0e 94 a3 19 	call	0x3346	; 0x3346 <blind_spot_led_off>
	}
}
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <blind_spot_led_on>:
void blind_spot_led_on(void)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DIOE4 , STD_HIGH);
    3338:	84 e2       	ldi	r24, 0x24	; 36
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	}
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <blind_spot_led_off>:
void blind_spot_led_off(void)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DIOE4 , STD_LOW);
    334e:	84 e2       	ldi	r24, 0x24	; 36
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
	}
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <adaptive_lighting>:
void adaptive_lighting(void)
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
	TMR0_voidSetDutycycle(LDR_u16GetDigitalReading(0)/7);
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 a1 08 	call	0x1142	; 0x1142 <LDR_u16GetDigitalReading>
    336a:	27 e0       	ldi	r18, 0x07	; 7
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	b9 01       	movw	r22, r18
    3370:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    3374:	cb 01       	movw	r24, r22
    3376:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <TMR0_voidSetDutycycle>
	}
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <system_init>:
void system_init(void)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_init();
    3388:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Ultrasonic_init>
	LCD_Init();
    338c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Init>
	 Dio_SetChannelDirection(DIOE4 ,OUTPUT);
    3390:	84 e2       	ldi	r24, 0x24	; 36
    3392:	61 e0       	ldi	r22, 0x01	; 1
    3394:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	 Dio_WriteChannel(DIOE4 , STD_LOW);
    3398:	84 e2       	ldi	r24, 0x24	; 36
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
		ADC_voidInit();
    33a0:	0e 94 93 07 	call	0xf26	; 0xf26 <ADC_voidInit>
		TMR0_voidInit();
    33a4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <TMR0_voidInit>
		TMR0_voidSetDutycycle(0);
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <TMR0_voidSetDutycycle>
		TMR0_voidStart();
    33ae:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <TMR0_voidStart>
		 Dio_SetChannelDirection(DIOB4 ,OUTPUT);
    33b2:	8c e0       	ldi	r24, 0x0C	; 12
    33b4:	61 e0       	ldi	r22, 0x01	; 1
    33b6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
		 Dio_SetChannelDirection(DIOD3 ,OUTPUT);
    33ba:	8b e1       	ldi	r24, 0x1B	; 27
    33bc:	61 e0       	ldi	r22, 0x01	; 1
    33be:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
		 ServoMotor_voidInit();
    33c2:	0e 94 34 14 	call	0x2868	; 0x2868 <ServoMotor_voidInit>
	}
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <adaptive_lighting_position>:
void adaptive_lighting_position(void)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
	measured_distance=Ultrasonic_2_readDistance();
    33d4:	0e 94 42 1c 	call	0x3884	; 0x3884 <Ultrasonic_2_readDistance>
    33d8:	90 93 34 02 	sts	0x0234, r25
    33dc:	80 93 33 02 	sts	0x0233, r24
	if( measured_distance <10)
    33e0:	80 91 33 02 	lds	r24, 0x0233
    33e4:	90 91 34 02 	lds	r25, 0x0234
    33e8:	8a 30       	cpi	r24, 0x0A	; 10
    33ea:	91 05       	cpc	r25, r1
    33ec:	20 f4       	brcc	.+8      	; 0x33f6 <adaptive_lighting_position+0x2a>
	{

		ServoMotor_SetAngle(0);
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	0e 94 45 14 	call	0x288a	; 0x288a <ServoMotor_SetAngle>
    33f4:	19 c0       	rjmp	.+50     	; 0x3428 <adaptive_lighting_position+0x5c>
	}
	else if(10<=measured_distance && measured_distance <50)
    33f6:	80 91 33 02 	lds	r24, 0x0233
    33fa:	90 91 34 02 	lds	r25, 0x0234
    33fe:	8a 30       	cpi	r24, 0x0A	; 10
    3400:	91 05       	cpc	r25, r1
    3402:	78 f0       	brcs	.+30     	; 0x3422 <adaptive_lighting_position+0x56>
    3404:	80 91 33 02 	lds	r24, 0x0233
    3408:	90 91 34 02 	lds	r25, 0x0234
    340c:	82 33       	cpi	r24, 0x32	; 50
    340e:	91 05       	cpc	r25, r1
    3410:	40 f4       	brcc	.+16     	; 0x3422 <adaptive_lighting_position+0x56>
	{
		ServoMotor_SetAngle(measured_distance+40 );
    3412:	80 91 33 02 	lds	r24, 0x0233
    3416:	90 91 34 02 	lds	r25, 0x0234
    341a:	88 5d       	subi	r24, 0xD8	; 216
    341c:	0e 94 45 14 	call	0x288a	; 0x288a <ServoMotor_SetAngle>
    3420:	03 c0       	rjmp	.+6      	; 0x3428 <adaptive_lighting_position+0x5c>
	}
	else
		ServoMotor_SetAngle(90);
    3422:	8a e5       	ldi	r24, 0x5A	; 90
    3424:	0e 94 45 14 	call	0x288a	; 0x288a <ServoMotor_SetAngle>
	}
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <Ultrasonic_edgeProcessing>:
/*
 * Description :Call-Back Function used to calculate g_InputCaptureValue (high time)
 * of the Ultra_sonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
	/* increment g_number_of_calling_call_back_function variable by 1 */
	g_number_of_calling_call_back_function++;
    3436:	80 91 35 02 	lds	r24, 0x0235
    343a:	8f 5f       	subi	r24, 0xFF	; 255
    343c:	80 93 35 02 	sts	0x0235, r24
	/* check if this is the first captured edge */
	if (g_number_of_calling_call_back_function==1)
    3440:	80 91 35 02 	lds	r24, 0x0235
    3444:	81 30       	cpi	r24, 0x01	; 1
    3446:	31 f4       	brne	.+12     	; 0x3454 <Ultrasonic_edgeProcessing+0x26>
	{
		/* clear timer value to start measuring high time from 0 */
		Icu_clearTimerValue();
    3448:	0e 94 cf 18 	call	0x319e	; 0x319e <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(0); /* set ICU to capture a falling edge */
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	0e 94 a8 18 	call	0x3150	; 0x3150 <Icu_setEdgeDetectionType>
    3452:	0d c0       	rjmp	.+26     	; 0x346e <Ultrasonic_edgeProcessing+0x40>
	}
	/* check if this is the second captured edge */
	else if (g_number_of_calling_call_back_function==2)
    3454:	80 91 35 02 	lds	r24, 0x0235
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	49 f4       	brne	.+18     	; 0x346e <Ultrasonic_edgeProcessing+0x40>
	{
		/* store the high time in g_InputCaptureValue variable */
		g_InputCaptureValue=Icu_getInputCaptureValue();
    345c:	0e 94 c4 18 	call	0x3188	; 0x3188 <Icu_getInputCaptureValue>
    3460:	90 93 37 02 	sts	0x0237, r25
    3464:	80 93 36 02 	sts	0x0236, r24
		/* set ICU to capture a rising edge for the following measuring process */
		Icu_setEdgeDetectionType(1);
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	0e 94 a8 18 	call	0x3150	; 0x3150 <Icu_setEdgeDetectionType>
	}
}
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <Ultrasonic_init>:
 * Description : Initialize the Ultra_sonic driver
 * 1- set the Trigger pin as output pin
 * 2- Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
/* check on working frequency to choose the suitable prescaler */
#if(F_CPU==16000000UL)
	ICU_init(1,8);    /* Initialize the ICU with rising edge and suitable prescaler */
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	68 e0       	ldi	r22, 0x08	; 8
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <ICU_init>
	ICU_init(1,8);    /* Initialize the ICU with rising edge and suitable prescaler */
#elif(F_CPU==1000000UL)
	ICU_init(1,1);    /* Initialize the ICU with rising edge and suitable prescaler */
#endif
	/* set Call back function of ICU */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    3486:	87 e1       	ldi	r24, 0x17	; 23
    3488:	9a e1       	ldi	r25, 0x1A	; 26
    348a:	0e 94 96 18 	call	0x312c	; 0x312c <ICU_setCallBack>
	/* set the Trigger pin as output pin */
	Dio_SetChannelDirection(TRIGGER_1_PIN_CHANNEL_ID   , OUTPUT);
    348e:	80 e2       	ldi	r24, 0x20	; 32
    3490:	61 e0       	ldi	r22, 0x01	; 1
    3492:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
	Dio_SetChannelDirection(TRIGGER_2_PIN_CHANNEL_ID   , OUTPUT);
    3496:	8f e1       	ldi	r24, 0x1F	; 31
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Dio_SetChannelDirection>
}
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <Ultrasonic_1_Trigger>:

/*
 * Description :Function to send trigger pulse for Ultra_sonic to start working
 */
static void Ultrasonic_1_Trigger(void)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	68 97       	sbiw	r28, 0x18	; 24
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
	/* write logic high on the Trigger pin */
	Dio_WriteChannel(TRIGGER_1_PIN_CHANNEL_ID   , STD_HIGH);
    34b8:	80 e2       	ldi	r24, 0x20	; 32
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	a0 e7       	ldi	r26, 0x70	; 112
    34c6:	b1 e4       	ldi	r27, 0x41	; 65
    34c8:	8d 8b       	std	Y+21, r24	; 0x15
    34ca:	9e 8b       	std	Y+22, r25	; 0x16
    34cc:	af 8b       	std	Y+23, r26	; 0x17
    34ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34d0:	6d 89       	ldd	r22, Y+21	; 0x15
    34d2:	7e 89       	ldd	r23, Y+22	; 0x16
    34d4:	8f 89       	ldd	r24, Y+23	; 0x17
    34d6:	98 8d       	ldd	r25, Y+24	; 0x18
    34d8:	2b ea       	ldi	r18, 0xAB	; 171
    34da:	3a ea       	ldi	r19, 0xAA	; 170
    34dc:	4a ea       	ldi	r20, 0xAA	; 170
    34de:	50 e4       	ldi	r21, 0x40	; 64
    34e0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	89 8b       	std	Y+17, r24	; 0x11
    34ea:	9a 8b       	std	Y+18, r25	; 0x12
    34ec:	ab 8b       	std	Y+19, r26	; 0x13
    34ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34f0:	69 89       	ldd	r22, Y+17	; 0x11
    34f2:	7a 89       	ldd	r23, Y+18	; 0x12
    34f4:	8b 89       	ldd	r24, Y+19	; 0x13
    34f6:	9c 89       	ldd	r25, Y+20	; 0x14
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e8       	ldi	r20, 0x80	; 128
    34fe:	5f e3       	ldi	r21, 0x3F	; 63
    3500:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    3504:	88 23       	and	r24, r24
    3506:	1c f4       	brge	.+6      	; 0x350e <Ultrasonic_1_Trigger+0x6a>
		__ticks = 1;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	88 8b       	std	Y+16, r24	; 0x10
    350c:	91 c0       	rjmp	.+290    	; 0x3630 <Ultrasonic_1_Trigger+0x18c>
	else if (__tmp > 255)
    350e:	69 89       	ldd	r22, Y+17	; 0x11
    3510:	7a 89       	ldd	r23, Y+18	; 0x12
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	53 e4       	ldi	r21, 0x43	; 67
    351e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	0c f0       	brlt	.+2      	; 0x3528 <Ultrasonic_1_Trigger+0x84>
    3526:	7b c0       	rjmp	.+246    	; 0x361e <Ultrasonic_1_Trigger+0x17a>
	{
		_delay_ms(__us / 1000.0);
    3528:	6d 89       	ldd	r22, Y+21	; 0x15
    352a:	7e 89       	ldd	r23, Y+22	; 0x16
    352c:	8f 89       	ldd	r24, Y+23	; 0x17
    352e:	98 8d       	ldd	r25, Y+24	; 0x18
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a e7       	ldi	r20, 0x7A	; 122
    3536:	54 e4       	ldi	r21, 0x44	; 68
    3538:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8c 87       	std	Y+12, r24	; 0x0c
    3542:	9d 87       	std	Y+13, r25	; 0x0d
    3544:	ae 87       	std	Y+14, r26	; 0x0e
    3546:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	6c 85       	ldd	r22, Y+12	; 0x0c
    354a:	7d 85       	ldd	r23, Y+13	; 0x0d
    354c:	8e 85       	ldd	r24, Y+14	; 0x0e
    354e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4a e7       	ldi	r20, 0x7A	; 122
    3556:	55 e4       	ldi	r21, 0x45	; 69
    3558:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	88 87       	std	Y+8, r24	; 0x08
    3562:	99 87       	std	Y+9, r25	; 0x09
    3564:	aa 87       	std	Y+10, r26	; 0x0a
    3566:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3568:	68 85       	ldd	r22, Y+8	; 0x08
    356a:	79 85       	ldd	r23, Y+9	; 0x09
    356c:	8a 85       	ldd	r24, Y+10	; 0x0a
    356e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <Ultrasonic_1_Trigger+0xe6>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9f 83       	std	Y+7, r25	; 0x07
    3586:	8e 83       	std	Y+6, r24	; 0x06
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <Ultrasonic_1_Trigger+0x164>
	else if (__tmp > 65535)
    358a:	68 85       	ldd	r22, Y+8	; 0x08
    358c:	79 85       	ldd	r23, Y+9	; 0x09
    358e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3590:	9b 85       	ldd	r25, Y+11	; 0x0b
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	3f ef       	ldi	r19, 0xFF	; 255
    3596:	4f e7       	ldi	r20, 0x7F	; 127
    3598:	57 e4       	ldi	r21, 0x47	; 71
    359a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <Ultrasonic_1_Trigger+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    35a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    35a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    35a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9f 83       	std	Y+7, r25	; 0x07
    35c8:	8e 83       	std	Y+6, r24	; 0x06
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <Ultrasonic_1_Trigger+0x146>
    35cc:	80 e9       	ldi	r24, 0x90	; 144
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	9d 83       	std	Y+5, r25	; 0x05
    35d2:	8c 83       	std	Y+4, r24	; 0x04
    35d4:	8c 81       	ldd	r24, Y+4	; 0x04
    35d6:	9d 81       	ldd	r25, Y+5	; 0x05
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <Ultrasonic_1_Trigger+0x134>
    35dc:	9d 83       	std	Y+5, r25	; 0x05
    35de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	8e 81       	ldd	r24, Y+6	; 0x06
    35e2:	9f 81       	ldd	r25, Y+7	; 0x07
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9f 83       	std	Y+7, r25	; 0x07
    35e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	8e 81       	ldd	r24, Y+6	; 0x06
    35ec:	9f 81       	ldd	r25, Y+7	; 0x07
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	69 f7       	brne	.-38     	; 0x35cc <Ultrasonic_1_Trigger+0x128>
    35f2:	24 c0       	rjmp	.+72     	; 0x363c <Ultrasonic_1_Trigger+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	68 85       	ldd	r22, Y+8	; 0x08
    35f6:	79 85       	ldd	r23, Y+9	; 0x09
    35f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    35fc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9f 83       	std	Y+7, r25	; 0x07
    3606:	8e 83       	std	Y+6, r24	; 0x06
    3608:	8e 81       	ldd	r24, Y+6	; 0x06
    360a:	9f 81       	ldd	r25, Y+7	; 0x07
    360c:	9b 83       	std	Y+3, r25	; 0x03
    360e:	8a 83       	std	Y+2, r24	; 0x02
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <Ultrasonic_1_Trigger+0x170>
    3618:	9b 83       	std	Y+3, r25	; 0x03
    361a:	8a 83       	std	Y+2, r24	; 0x02
    361c:	0f c0       	rjmp	.+30     	; 0x363c <Ultrasonic_1_Trigger+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    361e:	69 89       	ldd	r22, Y+17	; 0x11
    3620:	7a 89       	ldd	r23, Y+18	; 0x12
    3622:	8b 89       	ldd	r24, Y+19	; 0x13
    3624:	9c 89       	ldd	r25, Y+20	; 0x14
    3626:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	88 8b       	std	Y+16, r24	; 0x10
    3630:	88 89       	ldd	r24, Y+16	; 0x10
    3632:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	8a 95       	dec	r24
    3638:	f1 f7       	brne	.-4      	; 0x3636 <Ultrasonic_1_Trigger+0x192>
    363a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15); /* the required time for triggering the Ultra_sonic  */
	/* write logic low on the Trigger pin */
	Dio_WriteChannel(TRIGGER_1_PIN_CHANNEL_ID   ,STD_LOW);
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
}
    3644:	68 96       	adiw	r28, 0x18	; 24
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <Ultrasonic_2_Trigger>:
static void Ultrasonic_2_Trigger(void)
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	68 97       	sbiw	r28, 0x18	; 24
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
	/* write logic high on the Trigger pin */
	Dio_WriteChannel(TRIGGER_2_PIN_CHANNEL_ID   , STD_HIGH);
    366a:	8f e1       	ldi	r24, 0x1F	; 31
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a0 e7       	ldi	r26, 0x70	; 112
    3678:	b1 e4       	ldi	r27, 0x41	; 65
    367a:	8d 8b       	std	Y+21, r24	; 0x15
    367c:	9e 8b       	std	Y+22, r25	; 0x16
    367e:	af 8b       	std	Y+23, r26	; 0x17
    3680:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3682:	6d 89       	ldd	r22, Y+21	; 0x15
    3684:	7e 89       	ldd	r23, Y+22	; 0x16
    3686:	8f 89       	ldd	r24, Y+23	; 0x17
    3688:	98 8d       	ldd	r25, Y+24	; 0x18
    368a:	2b ea       	ldi	r18, 0xAB	; 171
    368c:	3a ea       	ldi	r19, 0xAA	; 170
    368e:	4a ea       	ldi	r20, 0xAA	; 170
    3690:	50 e4       	ldi	r21, 0x40	; 64
    3692:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	89 8b       	std	Y+17, r24	; 0x11
    369c:	9a 8b       	std	Y+18, r25	; 0x12
    369e:	ab 8b       	std	Y+19, r26	; 0x13
    36a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    36a2:	69 89       	ldd	r22, Y+17	; 0x11
    36a4:	7a 89       	ldd	r23, Y+18	; 0x12
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	1c f4       	brge	.+6      	; 0x36c0 <Ultrasonic_2_Trigger+0x6a>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	88 8b       	std	Y+16, r24	; 0x10
    36be:	91 c0       	rjmp	.+290    	; 0x37e2 <Ultrasonic_2_Trigger+0x18c>
	else if (__tmp > 255)
    36c0:	69 89       	ldd	r22, Y+17	; 0x11
    36c2:	7a 89       	ldd	r23, Y+18	; 0x12
    36c4:	8b 89       	ldd	r24, Y+19	; 0x13
    36c6:	9c 89       	ldd	r25, Y+20	; 0x14
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4f e7       	ldi	r20, 0x7F	; 127
    36ce:	53 e4       	ldi	r21, 0x43	; 67
    36d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    36d4:	18 16       	cp	r1, r24
    36d6:	0c f0       	brlt	.+2      	; 0x36da <Ultrasonic_2_Trigger+0x84>
    36d8:	7b c0       	rjmp	.+246    	; 0x37d0 <Ultrasonic_2_Trigger+0x17a>
	{
		_delay_ms(__us / 1000.0);
    36da:	6d 89       	ldd	r22, Y+21	; 0x15
    36dc:	7e 89       	ldd	r23, Y+22	; 0x16
    36de:	8f 89       	ldd	r24, Y+23	; 0x17
    36e0:	98 8d       	ldd	r25, Y+24	; 0x18
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a e7       	ldi	r20, 0x7A	; 122
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8c 87       	std	Y+12, r24	; 0x0c
    36f4:	9d 87       	std	Y+13, r25	; 0x0d
    36f6:	ae 87       	std	Y+14, r26	; 0x0e
    36f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    36fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    36fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3700:	9f 85       	ldd	r25, Y+15	; 0x0f
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a e7       	ldi	r20, 0x7A	; 122
    3708:	55 e4       	ldi	r21, 0x45	; 69
    370a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	88 87       	std	Y+8, r24	; 0x08
    3714:	99 87       	std	Y+9, r25	; 0x09
    3716:	aa 87       	std	Y+10, r26	; 0x0a
    3718:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    371a:	68 85       	ldd	r22, Y+8	; 0x08
    371c:	79 85       	ldd	r23, Y+9	; 0x09
    371e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3720:	9b 85       	ldd	r25, Y+11	; 0x0b
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <Ultrasonic_2_Trigger+0xe6>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9f 83       	std	Y+7, r25	; 0x07
    3738:	8e 83       	std	Y+6, r24	; 0x06
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <Ultrasonic_2_Trigger+0x164>
	else if (__tmp > 65535)
    373c:	68 85       	ldd	r22, Y+8	; 0x08
    373e:	79 85       	ldd	r23, Y+9	; 0x09
    3740:	8a 85       	ldd	r24, Y+10	; 0x0a
    3742:	9b 85       	ldd	r25, Y+11	; 0x0b
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <Ultrasonic_2_Trigger+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6c 85       	ldd	r22, Y+12	; 0x0c
    3756:	7d 85       	ldd	r23, Y+13	; 0x0d
    3758:	8e 85       	ldd	r24, Y+14	; 0x0e
    375a:	9f 85       	ldd	r25, Y+15	; 0x0f
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9f 83       	std	Y+7, r25	; 0x07
    377a:	8e 83       	std	Y+6, r24	; 0x06
    377c:	0f c0       	rjmp	.+30     	; 0x379c <Ultrasonic_2_Trigger+0x146>
    377e:	80 e9       	ldi	r24, 0x90	; 144
    3780:	91 e0       	ldi	r25, 0x01	; 1
    3782:	9d 83       	std	Y+5, r25	; 0x05
    3784:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3786:	8c 81       	ldd	r24, Y+4	; 0x04
    3788:	9d 81       	ldd	r25, Y+5	; 0x05
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <Ultrasonic_2_Trigger+0x134>
    378e:	9d 83       	std	Y+5, r25	; 0x05
    3790:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8e 81       	ldd	r24, Y+6	; 0x06
    3794:	9f 81       	ldd	r25, Y+7	; 0x07
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9f 83       	std	Y+7, r25	; 0x07
    379a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8e 81       	ldd	r24, Y+6	; 0x06
    379e:	9f 81       	ldd	r25, Y+7	; 0x07
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <Ultrasonic_2_Trigger+0x128>
    37a4:	24 c0       	rjmp	.+72     	; 0x37ee <Ultrasonic_2_Trigger+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	68 85       	ldd	r22, Y+8	; 0x08
    37a8:	79 85       	ldd	r23, Y+9	; 0x09
    37aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    37ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    37ae:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9f 83       	std	Y+7, r25	; 0x07
    37b8:	8e 83       	std	Y+6, r24	; 0x06
    37ba:	8e 81       	ldd	r24, Y+6	; 0x06
    37bc:	9f 81       	ldd	r25, Y+7	; 0x07
    37be:	9b 83       	std	Y+3, r25	; 0x03
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	9b 81       	ldd	r25, Y+3	; 0x03
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <Ultrasonic_2_Trigger+0x170>
    37ca:	9b 83       	std	Y+3, r25	; 0x03
    37cc:	8a 83       	std	Y+2, r24	; 0x02
    37ce:	0f c0       	rjmp	.+30     	; 0x37ee <Ultrasonic_2_Trigger+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37d0:	69 89       	ldd	r22, Y+17	; 0x11
    37d2:	7a 89       	ldd	r23, Y+18	; 0x12
    37d4:	8b 89       	ldd	r24, Y+19	; 0x13
    37d6:	9c 89       	ldd	r25, Y+20	; 0x14
    37d8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	88 8b       	std	Y+16, r24	; 0x10
    37e2:	88 89       	ldd	r24, Y+16	; 0x10
    37e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	8a 95       	dec	r24
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <Ultrasonic_2_Trigger+0x192>
    37ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15); /* the required time for triggering the Ultra_sonic  */
	/* write logic low on the Trigger pin */
	Dio_WriteChannel(TRIGGER_2_PIN_CHANNEL_ID   ,STD_LOW);
    37ee:	8f e1       	ldi	r24, 0x1F	; 31
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	0e 94 34 0a 	call	0x1468	; 0x1468 <Dio_WriteChannel>
}
    37f6:	68 96       	adiw	r28, 0x18	; 24
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <Ultrasonic_1_readDistance>:
 * Description :Function calculates the distance measured by the Ultra_sonic
 * 1- Trigger the Ultra_sonic by call Ultrasonic_Trigger function
 * 2. Calculate the distance in Centimeter and returns its value (uint16)
 */
u16 Ultrasonic_1_readDistance(void)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	00 d0       	rcall	.+0      	; 0x380e <Ultrasonic_1_readDistance+0x6>
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
	/* clear used variables value to make sure that their values are not old */
	g_number_of_calling_call_back_function=0;
    3812:	10 92 35 02 	sts	0x0235, r1
	g_InputCaptureValue=0;
    3816:	10 92 37 02 	sts	0x0237, r1
    381a:	10 92 36 02 	sts	0x0236, r1
	Icu_clearTimerValue(); /* clear timer value to start counting from 0 */
    381e:	0e 94 cf 18 	call	0x319e	; 0x319e <Icu_clearTimerValue>
	Ultrasonic_1_Trigger();  /* call Ultrasonic_Trigger function */
    3822:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <Ultrasonic_1_Trigger>
	/* wait the measuring process to be completed it needs two edges one rising and another falling*/
	while(g_number_of_calling_call_back_function!=2);
    3826:	80 91 35 02 	lds	r24, 0x0235
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	e1 f7       	brne	.-8      	; 0x3826 <Ultrasonic_1_readDistance+0x1e>
#if(F_CPU==16000000UL)
	if(((g_InputCaptureValue/58)+1)/2>400)
    382e:	80 91 36 02 	lds	r24, 0x0236
    3832:	90 91 37 02 	lds	r25, 0x0237
    3836:	2a e3       	ldi	r18, 0x3A	; 58
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	b9 01       	movw	r22, r18
    383c:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    3840:	cb 01       	movw	r24, r22
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	23 e0       	ldi	r18, 0x03	; 3
    3846:	82 32       	cpi	r24, 0x22	; 34
    3848:	92 07       	cpc	r25, r18
    384a:	28 f0       	brcs	.+10     	; 0x3856 <Ultrasonic_1_readDistance+0x4e>
		return 500;
    384c:	84 ef       	ldi	r24, 0xF4	; 244
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	10 c0       	rjmp	.+32     	; 0x3876 <Ultrasonic_1_readDistance+0x6e>
	return (((g_InputCaptureValue/58)+1)/2);  /* return the distance value in Centimeter */
    3856:	80 91 36 02 	lds	r24, 0x0236
    385a:	90 91 37 02 	lds	r25, 0x0237
    385e:	2a e3       	ldi	r18, 0x3A	; 58
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	b9 01       	movw	r22, r18
    3864:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    3868:	cb 01       	movw	r24, r22
    386a:	01 96       	adiw	r24, 0x01	; 1
    386c:	9c 01       	movw	r18, r24
    386e:	36 95       	lsr	r19
    3870:	27 95       	ror	r18
    3872:	3a 83       	std	Y+2, r19	; 0x02
    3874:	29 83       	std	Y+1, r18	; 0x01
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
#endif
	if(((g_InputCaptureValue/58)+1)>400)
		return 500;
	return ((g_InputCaptureValue/58)+1);  /* return the distance value in Centimeter */
}
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <Ultrasonic_2_readDistance>:
u16 Ultrasonic_2_readDistance(void)
{
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	00 d0       	rcall	.+0      	; 0x388a <Ultrasonic_2_readDistance+0x6>
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
	/* clear used variables value to make sure that their values are not old */
	g_number_of_calling_call_back_function=0;
    388e:	10 92 35 02 	sts	0x0235, r1
	g_InputCaptureValue=0;
    3892:	10 92 37 02 	sts	0x0237, r1
    3896:	10 92 36 02 	sts	0x0236, r1
	Icu_clearTimerValue(); /* clear timer value to start counting from 0 */
    389a:	0e 94 cf 18 	call	0x319e	; 0x319e <Icu_clearTimerValue>
	Ultrasonic_2_Trigger();  /* call Ultrasonic_Trigger function */
    389e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <Ultrasonic_2_Trigger>
	/* wait the measuring process to be completed it needs two edges one rising and another falling*/
	while(g_number_of_calling_call_back_function!=2);
    38a2:	80 91 35 02 	lds	r24, 0x0235
    38a6:	82 30       	cpi	r24, 0x02	; 2
    38a8:	e1 f7       	brne	.-8      	; 0x38a2 <Ultrasonic_2_readDistance+0x1e>
#if(F_CPU==16000000UL)
	if(((g_InputCaptureValue/58)+1)/2>400)
    38aa:	80 91 36 02 	lds	r24, 0x0236
    38ae:	90 91 37 02 	lds	r25, 0x0237
    38b2:	2a e3       	ldi	r18, 0x3A	; 58
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	b9 01       	movw	r22, r18
    38b8:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    38bc:	cb 01       	movw	r24, r22
    38be:	01 96       	adiw	r24, 0x01	; 1
    38c0:	23 e0       	ldi	r18, 0x03	; 3
    38c2:	82 32       	cpi	r24, 0x22	; 34
    38c4:	92 07       	cpc	r25, r18
    38c6:	28 f0       	brcs	.+10     	; 0x38d2 <Ultrasonic_2_readDistance+0x4e>
		return 500;
    38c8:	84 ef       	ldi	r24, 0xF4	; 244
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	10 c0       	rjmp	.+32     	; 0x38f2 <Ultrasonic_2_readDistance+0x6e>
	return (((g_InputCaptureValue/58)+1)/2);  /* return the distance value in Centimeter */
    38d2:	80 91 36 02 	lds	r24, 0x0236
    38d6:	90 91 37 02 	lds	r25, 0x0237
    38da:	2a e3       	ldi	r18, 0x3A	; 58
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	b9 01       	movw	r22, r18
    38e0:	0e 94 9f 1c 	call	0x393e	; 0x393e <__udivmodhi4>
    38e4:	cb 01       	movw	r24, r22
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	9c 01       	movw	r18, r24
    38ea:	36 95       	lsr	r19
    38ec:	27 95       	ror	r18
    38ee:	3a 83       	std	Y+2, r19	; 0x02
    38f0:	29 83       	std	Y+1, r18	; 0x01
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
#endif
	if(((g_InputCaptureValue/58)+1)>400)
		return 500;
	return ((g_InputCaptureValue/58)+1);  /* return the distance value in Centimeter */
}
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <__mulsi3>:
    3900:	62 9f       	mul	r22, r18
    3902:	d0 01       	movw	r26, r0
    3904:	73 9f       	mul	r23, r19
    3906:	f0 01       	movw	r30, r0
    3908:	82 9f       	mul	r24, r18
    390a:	e0 0d       	add	r30, r0
    390c:	f1 1d       	adc	r31, r1
    390e:	64 9f       	mul	r22, r20
    3910:	e0 0d       	add	r30, r0
    3912:	f1 1d       	adc	r31, r1
    3914:	92 9f       	mul	r25, r18
    3916:	f0 0d       	add	r31, r0
    3918:	83 9f       	mul	r24, r19
    391a:	f0 0d       	add	r31, r0
    391c:	74 9f       	mul	r23, r20
    391e:	f0 0d       	add	r31, r0
    3920:	65 9f       	mul	r22, r21
    3922:	f0 0d       	add	r31, r0
    3924:	99 27       	eor	r25, r25
    3926:	72 9f       	mul	r23, r18
    3928:	b0 0d       	add	r27, r0
    392a:	e1 1d       	adc	r30, r1
    392c:	f9 1f       	adc	r31, r25
    392e:	63 9f       	mul	r22, r19
    3930:	b0 0d       	add	r27, r0
    3932:	e1 1d       	adc	r30, r1
    3934:	f9 1f       	adc	r31, r25
    3936:	bd 01       	movw	r22, r26
    3938:	cf 01       	movw	r24, r30
    393a:	11 24       	eor	r1, r1
    393c:	08 95       	ret

0000393e <__udivmodhi4>:
    393e:	aa 1b       	sub	r26, r26
    3940:	bb 1b       	sub	r27, r27
    3942:	51 e1       	ldi	r21, 0x11	; 17
    3944:	07 c0       	rjmp	.+14     	; 0x3954 <__udivmodhi4_ep>

00003946 <__udivmodhi4_loop>:
    3946:	aa 1f       	adc	r26, r26
    3948:	bb 1f       	adc	r27, r27
    394a:	a6 17       	cp	r26, r22
    394c:	b7 07       	cpc	r27, r23
    394e:	10 f0       	brcs	.+4      	; 0x3954 <__udivmodhi4_ep>
    3950:	a6 1b       	sub	r26, r22
    3952:	b7 0b       	sbc	r27, r23

00003954 <__udivmodhi4_ep>:
    3954:	88 1f       	adc	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	5a 95       	dec	r21
    395a:	a9 f7       	brne	.-22     	; 0x3946 <__udivmodhi4_loop>
    395c:	80 95       	com	r24
    395e:	90 95       	com	r25
    3960:	bc 01       	movw	r22, r24
    3962:	cd 01       	movw	r24, r26
    3964:	08 95       	ret

00003966 <__udivmodsi4>:
    3966:	a1 e2       	ldi	r26, 0x21	; 33
    3968:	1a 2e       	mov	r1, r26
    396a:	aa 1b       	sub	r26, r26
    396c:	bb 1b       	sub	r27, r27
    396e:	fd 01       	movw	r30, r26
    3970:	0d c0       	rjmp	.+26     	; 0x398c <__udivmodsi4_ep>

00003972 <__udivmodsi4_loop>:
    3972:	aa 1f       	adc	r26, r26
    3974:	bb 1f       	adc	r27, r27
    3976:	ee 1f       	adc	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	a2 17       	cp	r26, r18
    397c:	b3 07       	cpc	r27, r19
    397e:	e4 07       	cpc	r30, r20
    3980:	f5 07       	cpc	r31, r21
    3982:	20 f0       	brcs	.+8      	; 0x398c <__udivmodsi4_ep>
    3984:	a2 1b       	sub	r26, r18
    3986:	b3 0b       	sbc	r27, r19
    3988:	e4 0b       	sbc	r30, r20
    398a:	f5 0b       	sbc	r31, r21

0000398c <__udivmodsi4_ep>:
    398c:	66 1f       	adc	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	88 1f       	adc	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	1a 94       	dec	r1
    3996:	69 f7       	brne	.-38     	; 0x3972 <__udivmodsi4_loop>
    3998:	60 95       	com	r22
    399a:	70 95       	com	r23
    399c:	80 95       	com	r24
    399e:	90 95       	com	r25
    39a0:	9b 01       	movw	r18, r22
    39a2:	ac 01       	movw	r20, r24
    39a4:	bd 01       	movw	r22, r26
    39a6:	cf 01       	movw	r24, r30
    39a8:	08 95       	ret

000039aa <__prologue_saves__>:
    39aa:	2f 92       	push	r2
    39ac:	3f 92       	push	r3
    39ae:	4f 92       	push	r4
    39b0:	5f 92       	push	r5
    39b2:	6f 92       	push	r6
    39b4:	7f 92       	push	r7
    39b6:	8f 92       	push	r8
    39b8:	9f 92       	push	r9
    39ba:	af 92       	push	r10
    39bc:	bf 92       	push	r11
    39be:	cf 92       	push	r12
    39c0:	df 92       	push	r13
    39c2:	ef 92       	push	r14
    39c4:	ff 92       	push	r15
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	ca 1b       	sub	r28, r26
    39d4:	db 0b       	sbc	r29, r27
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	cd bf       	out	0x3d, r28	; 61
    39e0:	09 94       	ijmp

000039e2 <__epilogue_restores__>:
    39e2:	2a 88       	ldd	r2, Y+18	; 0x12
    39e4:	39 88       	ldd	r3, Y+17	; 0x11
    39e6:	48 88       	ldd	r4, Y+16	; 0x10
    39e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f4:	b9 84       	ldd	r11, Y+9	; 0x09
    39f6:	c8 84       	ldd	r12, Y+8	; 0x08
    39f8:	df 80       	ldd	r13, Y+7	; 0x07
    39fa:	ee 80       	ldd	r14, Y+6	; 0x06
    39fc:	fd 80       	ldd	r15, Y+5	; 0x05
    39fe:	0c 81       	ldd	r16, Y+4	; 0x04
    3a00:	1b 81       	ldd	r17, Y+3	; 0x03
    3a02:	aa 81       	ldd	r26, Y+2	; 0x02
    3a04:	b9 81       	ldd	r27, Y+1	; 0x01
    3a06:	ce 0f       	add	r28, r30
    3a08:	d1 1d       	adc	r29, r1
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	ed 01       	movw	r28, r26
    3a16:	08 95       	ret

00003a18 <sprintf>:
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	2e 97       	sbiw	r28, 0x0e	; 14
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	0d 89       	ldd	r16, Y+21	; 0x15
    3a32:	1e 89       	ldd	r17, Y+22	; 0x16
    3a34:	86 e0       	ldi	r24, 0x06	; 6
    3a36:	8c 83       	std	Y+4, r24	; 0x04
    3a38:	1a 83       	std	Y+2, r17	; 0x02
    3a3a:	09 83       	std	Y+1, r16	; 0x01
    3a3c:	8f ef       	ldi	r24, 0xFF	; 255
    3a3e:	9f e7       	ldi	r25, 0x7F	; 127
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	9e 01       	movw	r18, r28
    3a46:	27 5e       	subi	r18, 0xE7	; 231
    3a48:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	6f 89       	ldd	r22, Y+23	; 0x17
    3a50:	78 8d       	ldd	r23, Y+24	; 0x18
    3a52:	a9 01       	movw	r20, r18
    3a54:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <vfprintf>
    3a58:	2f 81       	ldd	r18, Y+7	; 0x07
    3a5a:	38 85       	ldd	r19, Y+8	; 0x08
    3a5c:	02 0f       	add	r16, r18
    3a5e:	13 1f       	adc	r17, r19
    3a60:	f8 01       	movw	r30, r16
    3a62:	10 82       	st	Z, r1
    3a64:	2e 96       	adiw	r28, 0x0e	; 14
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	08 95       	ret

00003a7a <vfprintf>:
    3a7a:	2f 92       	push	r2
    3a7c:	3f 92       	push	r3
    3a7e:	4f 92       	push	r4
    3a80:	5f 92       	push	r5
    3a82:	6f 92       	push	r6
    3a84:	7f 92       	push	r7
    3a86:	8f 92       	push	r8
    3a88:	9f 92       	push	r9
    3a8a:	af 92       	push	r10
    3a8c:	bf 92       	push	r11
    3a8e:	cf 92       	push	r12
    3a90:	df 92       	push	r13
    3a92:	ef 92       	push	r14
    3a94:	ff 92       	push	r15
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	2b 97       	sbiw	r28, 0x0b	; 11
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	3c 01       	movw	r6, r24
    3ab0:	2b 01       	movw	r4, r22
    3ab2:	5a 01       	movw	r10, r20
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	17 82       	std	Z+7, r1	; 0x07
    3ab8:	16 82       	std	Z+6, r1	; 0x06
    3aba:	83 81       	ldd	r24, Z+3	; 0x03
    3abc:	81 fd       	sbrc	r24, 1
    3abe:	03 c0       	rjmp	.+6      	; 0x3ac6 <vfprintf+0x4c>
    3ac0:	6f ef       	ldi	r22, 0xFF	; 255
    3ac2:	7f ef       	ldi	r23, 0xFF	; 255
    3ac4:	c6 c1       	rjmp	.+908    	; 0x3e52 <vfprintf+0x3d8>
    3ac6:	9a e0       	ldi	r25, 0x0A	; 10
    3ac8:	89 2e       	mov	r8, r25
    3aca:	1e 01       	movw	r2, r28
    3acc:	08 94       	sec
    3ace:	21 1c       	adc	r2, r1
    3ad0:	31 1c       	adc	r3, r1
    3ad2:	f3 01       	movw	r30, r6
    3ad4:	23 81       	ldd	r18, Z+3	; 0x03
    3ad6:	f2 01       	movw	r30, r4
    3ad8:	23 fd       	sbrc	r18, 3
    3ada:	85 91       	lpm	r24, Z+
    3adc:	23 ff       	sbrs	r18, 3
    3ade:	81 91       	ld	r24, Z+
    3ae0:	2f 01       	movw	r4, r30
    3ae2:	88 23       	and	r24, r24
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <vfprintf+0x6e>
    3ae6:	b2 c1       	rjmp	.+868    	; 0x3e4c <vfprintf+0x3d2>
    3ae8:	85 32       	cpi	r24, 0x25	; 37
    3aea:	39 f4       	brne	.+14     	; 0x3afa <vfprintf+0x80>
    3aec:	23 fd       	sbrc	r18, 3
    3aee:	85 91       	lpm	r24, Z+
    3af0:	23 ff       	sbrs	r18, 3
    3af2:	81 91       	ld	r24, Z+
    3af4:	2f 01       	movw	r4, r30
    3af6:	85 32       	cpi	r24, 0x25	; 37
    3af8:	29 f4       	brne	.+10     	; 0x3b04 <vfprintf+0x8a>
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	b3 01       	movw	r22, r6
    3afe:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3b02:	e7 cf       	rjmp	.-50     	; 0x3ad2 <vfprintf+0x58>
    3b04:	98 2f       	mov	r25, r24
    3b06:	ff 24       	eor	r15, r15
    3b08:	ee 24       	eor	r14, r14
    3b0a:	99 24       	eor	r9, r9
    3b0c:	ff e1       	ldi	r31, 0x1F	; 31
    3b0e:	ff 15       	cp	r31, r15
    3b10:	d0 f0       	brcs	.+52     	; 0x3b46 <vfprintf+0xcc>
    3b12:	9b 32       	cpi	r25, 0x2B	; 43
    3b14:	69 f0       	breq	.+26     	; 0x3b30 <vfprintf+0xb6>
    3b16:	9c 32       	cpi	r25, 0x2C	; 44
    3b18:	28 f4       	brcc	.+10     	; 0x3b24 <vfprintf+0xaa>
    3b1a:	90 32       	cpi	r25, 0x20	; 32
    3b1c:	59 f0       	breq	.+22     	; 0x3b34 <vfprintf+0xba>
    3b1e:	93 32       	cpi	r25, 0x23	; 35
    3b20:	91 f4       	brne	.+36     	; 0x3b46 <vfprintf+0xcc>
    3b22:	0e c0       	rjmp	.+28     	; 0x3b40 <vfprintf+0xc6>
    3b24:	9d 32       	cpi	r25, 0x2D	; 45
    3b26:	49 f0       	breq	.+18     	; 0x3b3a <vfprintf+0xc0>
    3b28:	90 33       	cpi	r25, 0x30	; 48
    3b2a:	69 f4       	brne	.+26     	; 0x3b46 <vfprintf+0xcc>
    3b2c:	41 e0       	ldi	r20, 0x01	; 1
    3b2e:	24 c0       	rjmp	.+72     	; 0x3b78 <vfprintf+0xfe>
    3b30:	52 e0       	ldi	r21, 0x02	; 2
    3b32:	f5 2a       	or	r15, r21
    3b34:	84 e0       	ldi	r24, 0x04	; 4
    3b36:	f8 2a       	or	r15, r24
    3b38:	28 c0       	rjmp	.+80     	; 0x3b8a <vfprintf+0x110>
    3b3a:	98 e0       	ldi	r25, 0x08	; 8
    3b3c:	f9 2a       	or	r15, r25
    3b3e:	25 c0       	rjmp	.+74     	; 0x3b8a <vfprintf+0x110>
    3b40:	e0 e1       	ldi	r30, 0x10	; 16
    3b42:	fe 2a       	or	r15, r30
    3b44:	22 c0       	rjmp	.+68     	; 0x3b8a <vfprintf+0x110>
    3b46:	f7 fc       	sbrc	r15, 7
    3b48:	29 c0       	rjmp	.+82     	; 0x3b9c <vfprintf+0x122>
    3b4a:	89 2f       	mov	r24, r25
    3b4c:	80 53       	subi	r24, 0x30	; 48
    3b4e:	8a 30       	cpi	r24, 0x0A	; 10
    3b50:	70 f4       	brcc	.+28     	; 0x3b6e <vfprintf+0xf4>
    3b52:	f6 fe       	sbrs	r15, 6
    3b54:	05 c0       	rjmp	.+10     	; 0x3b60 <vfprintf+0xe6>
    3b56:	98 9c       	mul	r9, r8
    3b58:	90 2c       	mov	r9, r0
    3b5a:	11 24       	eor	r1, r1
    3b5c:	98 0e       	add	r9, r24
    3b5e:	15 c0       	rjmp	.+42     	; 0x3b8a <vfprintf+0x110>
    3b60:	e8 9c       	mul	r14, r8
    3b62:	e0 2c       	mov	r14, r0
    3b64:	11 24       	eor	r1, r1
    3b66:	e8 0e       	add	r14, r24
    3b68:	f0 e2       	ldi	r31, 0x20	; 32
    3b6a:	ff 2a       	or	r15, r31
    3b6c:	0e c0       	rjmp	.+28     	; 0x3b8a <vfprintf+0x110>
    3b6e:	9e 32       	cpi	r25, 0x2E	; 46
    3b70:	29 f4       	brne	.+10     	; 0x3b7c <vfprintf+0x102>
    3b72:	f6 fc       	sbrc	r15, 6
    3b74:	6b c1       	rjmp	.+726    	; 0x3e4c <vfprintf+0x3d2>
    3b76:	40 e4       	ldi	r20, 0x40	; 64
    3b78:	f4 2a       	or	r15, r20
    3b7a:	07 c0       	rjmp	.+14     	; 0x3b8a <vfprintf+0x110>
    3b7c:	9c 36       	cpi	r25, 0x6C	; 108
    3b7e:	19 f4       	brne	.+6      	; 0x3b86 <vfprintf+0x10c>
    3b80:	50 e8       	ldi	r21, 0x80	; 128
    3b82:	f5 2a       	or	r15, r21
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <vfprintf+0x110>
    3b86:	98 36       	cpi	r25, 0x68	; 104
    3b88:	49 f4       	brne	.+18     	; 0x3b9c <vfprintf+0x122>
    3b8a:	f2 01       	movw	r30, r4
    3b8c:	23 fd       	sbrc	r18, 3
    3b8e:	95 91       	lpm	r25, Z+
    3b90:	23 ff       	sbrs	r18, 3
    3b92:	91 91       	ld	r25, Z+
    3b94:	2f 01       	movw	r4, r30
    3b96:	99 23       	and	r25, r25
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <vfprintf+0x122>
    3b9a:	b8 cf       	rjmp	.-144    	; 0x3b0c <vfprintf+0x92>
    3b9c:	89 2f       	mov	r24, r25
    3b9e:	85 54       	subi	r24, 0x45	; 69
    3ba0:	83 30       	cpi	r24, 0x03	; 3
    3ba2:	18 f0       	brcs	.+6      	; 0x3baa <vfprintf+0x130>
    3ba4:	80 52       	subi	r24, 0x20	; 32
    3ba6:	83 30       	cpi	r24, 0x03	; 3
    3ba8:	38 f4       	brcc	.+14     	; 0x3bb8 <vfprintf+0x13e>
    3baa:	44 e0       	ldi	r20, 0x04	; 4
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	a4 0e       	add	r10, r20
    3bb0:	b5 1e       	adc	r11, r21
    3bb2:	5f e3       	ldi	r21, 0x3F	; 63
    3bb4:	59 83       	std	Y+1, r21	; 0x01
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <vfprintf+0x15c>
    3bb8:	93 36       	cpi	r25, 0x63	; 99
    3bba:	31 f0       	breq	.+12     	; 0x3bc8 <vfprintf+0x14e>
    3bbc:	93 37       	cpi	r25, 0x73	; 115
    3bbe:	79 f0       	breq	.+30     	; 0x3bde <vfprintf+0x164>
    3bc0:	93 35       	cpi	r25, 0x53	; 83
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <vfprintf+0x14c>
    3bc4:	56 c0       	rjmp	.+172    	; 0x3c72 <vfprintf+0x1f8>
    3bc6:	20 c0       	rjmp	.+64     	; 0x3c08 <vfprintf+0x18e>
    3bc8:	f5 01       	movw	r30, r10
    3bca:	80 81       	ld	r24, Z
    3bcc:	89 83       	std	Y+1, r24	; 0x01
    3bce:	42 e0       	ldi	r20, 0x02	; 2
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
    3bd2:	a4 0e       	add	r10, r20
    3bd4:	b5 1e       	adc	r11, r21
    3bd6:	61 01       	movw	r12, r2
    3bd8:	01 e0       	ldi	r16, 0x01	; 1
    3bda:	10 e0       	ldi	r17, 0x00	; 0
    3bdc:	12 c0       	rjmp	.+36     	; 0x3c02 <vfprintf+0x188>
    3bde:	f5 01       	movw	r30, r10
    3be0:	c0 80       	ld	r12, Z
    3be2:	d1 80       	ldd	r13, Z+1	; 0x01
    3be4:	f6 fc       	sbrc	r15, 6
    3be6:	03 c0       	rjmp	.+6      	; 0x3bee <vfprintf+0x174>
    3be8:	6f ef       	ldi	r22, 0xFF	; 255
    3bea:	7f ef       	ldi	r23, 0xFF	; 255
    3bec:	02 c0       	rjmp	.+4      	; 0x3bf2 <vfprintf+0x178>
    3bee:	69 2d       	mov	r22, r9
    3bf0:	70 e0       	ldi	r23, 0x00	; 0
    3bf2:	42 e0       	ldi	r20, 0x02	; 2
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	a4 0e       	add	r10, r20
    3bf8:	b5 1e       	adc	r11, r21
    3bfa:	c6 01       	movw	r24, r12
    3bfc:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <strnlen>
    3c00:	8c 01       	movw	r16, r24
    3c02:	5f e7       	ldi	r21, 0x7F	; 127
    3c04:	f5 22       	and	r15, r21
    3c06:	14 c0       	rjmp	.+40     	; 0x3c30 <vfprintf+0x1b6>
    3c08:	f5 01       	movw	r30, r10
    3c0a:	c0 80       	ld	r12, Z
    3c0c:	d1 80       	ldd	r13, Z+1	; 0x01
    3c0e:	f6 fc       	sbrc	r15, 6
    3c10:	03 c0       	rjmp	.+6      	; 0x3c18 <vfprintf+0x19e>
    3c12:	6f ef       	ldi	r22, 0xFF	; 255
    3c14:	7f ef       	ldi	r23, 0xFF	; 255
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <vfprintf+0x1a2>
    3c18:	69 2d       	mov	r22, r9
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	42 e0       	ldi	r20, 0x02	; 2
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	a4 0e       	add	r10, r20
    3c22:	b5 1e       	adc	r11, r21
    3c24:	c6 01       	movw	r24, r12
    3c26:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <strnlen_P>
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	50 e8       	ldi	r21, 0x80	; 128
    3c2e:	f5 2a       	or	r15, r21
    3c30:	f3 fe       	sbrs	r15, 3
    3c32:	07 c0       	rjmp	.+14     	; 0x3c42 <vfprintf+0x1c8>
    3c34:	1a c0       	rjmp	.+52     	; 0x3c6a <vfprintf+0x1f0>
    3c36:	80 e2       	ldi	r24, 0x20	; 32
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	b3 01       	movw	r22, r6
    3c3c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3c40:	ea 94       	dec	r14
    3c42:	8e 2d       	mov	r24, r14
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	08 17       	cp	r16, r24
    3c48:	19 07       	cpc	r17, r25
    3c4a:	a8 f3       	brcs	.-22     	; 0x3c36 <vfprintf+0x1bc>
    3c4c:	0e c0       	rjmp	.+28     	; 0x3c6a <vfprintf+0x1f0>
    3c4e:	f6 01       	movw	r30, r12
    3c50:	f7 fc       	sbrc	r15, 7
    3c52:	85 91       	lpm	r24, Z+
    3c54:	f7 fe       	sbrs	r15, 7
    3c56:	81 91       	ld	r24, Z+
    3c58:	6f 01       	movw	r12, r30
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	b3 01       	movw	r22, r6
    3c5e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3c62:	e1 10       	cpse	r14, r1
    3c64:	ea 94       	dec	r14
    3c66:	01 50       	subi	r16, 0x01	; 1
    3c68:	10 40       	sbci	r17, 0x00	; 0
    3c6a:	01 15       	cp	r16, r1
    3c6c:	11 05       	cpc	r17, r1
    3c6e:	79 f7       	brne	.-34     	; 0x3c4e <vfprintf+0x1d4>
    3c70:	ea c0       	rjmp	.+468    	; 0x3e46 <vfprintf+0x3cc>
    3c72:	94 36       	cpi	r25, 0x64	; 100
    3c74:	11 f0       	breq	.+4      	; 0x3c7a <vfprintf+0x200>
    3c76:	99 36       	cpi	r25, 0x69	; 105
    3c78:	69 f5       	brne	.+90     	; 0x3cd4 <vfprintf+0x25a>
    3c7a:	f7 fe       	sbrs	r15, 7
    3c7c:	08 c0       	rjmp	.+16     	; 0x3c8e <vfprintf+0x214>
    3c7e:	f5 01       	movw	r30, r10
    3c80:	20 81       	ld	r18, Z
    3c82:	31 81       	ldd	r19, Z+1	; 0x01
    3c84:	42 81       	ldd	r20, Z+2	; 0x02
    3c86:	53 81       	ldd	r21, Z+3	; 0x03
    3c88:	84 e0       	ldi	r24, 0x04	; 4
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0a c0       	rjmp	.+20     	; 0x3ca2 <vfprintf+0x228>
    3c8e:	f5 01       	movw	r30, r10
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	9c 01       	movw	r18, r24
    3c96:	44 27       	eor	r20, r20
    3c98:	37 fd       	sbrc	r19, 7
    3c9a:	40 95       	com	r20
    3c9c:	54 2f       	mov	r21, r20
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	a8 0e       	add	r10, r24
    3ca4:	b9 1e       	adc	r11, r25
    3ca6:	9f e6       	ldi	r25, 0x6F	; 111
    3ca8:	f9 22       	and	r15, r25
    3caa:	57 ff       	sbrs	r21, 7
    3cac:	09 c0       	rjmp	.+18     	; 0x3cc0 <vfprintf+0x246>
    3cae:	50 95       	com	r21
    3cb0:	40 95       	com	r20
    3cb2:	30 95       	com	r19
    3cb4:	21 95       	neg	r18
    3cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	e0 e8       	ldi	r30, 0x80	; 128
    3cbe:	fe 2a       	or	r15, r30
    3cc0:	ca 01       	movw	r24, r20
    3cc2:	b9 01       	movw	r22, r18
    3cc4:	a1 01       	movw	r20, r2
    3cc6:	2a e0       	ldi	r18, 0x0A	; 10
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__ultoa_invert>
    3cce:	d8 2e       	mov	r13, r24
    3cd0:	d2 18       	sub	r13, r2
    3cd2:	40 c0       	rjmp	.+128    	; 0x3d54 <vfprintf+0x2da>
    3cd4:	95 37       	cpi	r25, 0x75	; 117
    3cd6:	29 f4       	brne	.+10     	; 0x3ce2 <vfprintf+0x268>
    3cd8:	1f 2d       	mov	r17, r15
    3cda:	1f 7e       	andi	r17, 0xEF	; 239
    3cdc:	2a e0       	ldi	r18, 0x0A	; 10
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	1d c0       	rjmp	.+58     	; 0x3d1c <vfprintf+0x2a2>
    3ce2:	1f 2d       	mov	r17, r15
    3ce4:	19 7f       	andi	r17, 0xF9	; 249
    3ce6:	9f 36       	cpi	r25, 0x6F	; 111
    3ce8:	61 f0       	breq	.+24     	; 0x3d02 <vfprintf+0x288>
    3cea:	90 37       	cpi	r25, 0x70	; 112
    3cec:	20 f4       	brcc	.+8      	; 0x3cf6 <vfprintf+0x27c>
    3cee:	98 35       	cpi	r25, 0x58	; 88
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <vfprintf+0x27a>
    3cf2:	ac c0       	rjmp	.+344    	; 0x3e4c <vfprintf+0x3d2>
    3cf4:	0f c0       	rjmp	.+30     	; 0x3d14 <vfprintf+0x29a>
    3cf6:	90 37       	cpi	r25, 0x70	; 112
    3cf8:	39 f0       	breq	.+14     	; 0x3d08 <vfprintf+0x28e>
    3cfa:	98 37       	cpi	r25, 0x78	; 120
    3cfc:	09 f0       	breq	.+2      	; 0x3d00 <vfprintf+0x286>
    3cfe:	a6 c0       	rjmp	.+332    	; 0x3e4c <vfprintf+0x3d2>
    3d00:	04 c0       	rjmp	.+8      	; 0x3d0a <vfprintf+0x290>
    3d02:	28 e0       	ldi	r18, 0x08	; 8
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	0a c0       	rjmp	.+20     	; 0x3d1c <vfprintf+0x2a2>
    3d08:	10 61       	ori	r17, 0x10	; 16
    3d0a:	14 fd       	sbrc	r17, 4
    3d0c:	14 60       	ori	r17, 0x04	; 4
    3d0e:	20 e1       	ldi	r18, 0x10	; 16
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	04 c0       	rjmp	.+8      	; 0x3d1c <vfprintf+0x2a2>
    3d14:	14 fd       	sbrc	r17, 4
    3d16:	16 60       	ori	r17, 0x06	; 6
    3d18:	20 e1       	ldi	r18, 0x10	; 16
    3d1a:	32 e0       	ldi	r19, 0x02	; 2
    3d1c:	17 ff       	sbrs	r17, 7
    3d1e:	08 c0       	rjmp	.+16     	; 0x3d30 <vfprintf+0x2b6>
    3d20:	f5 01       	movw	r30, r10
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	44 e0       	ldi	r20, 0x04	; 4
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	08 c0       	rjmp	.+16     	; 0x3d40 <vfprintf+0x2c6>
    3d30:	f5 01       	movw	r30, r10
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	bc 01       	movw	r22, r24
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	42 e0       	ldi	r20, 0x02	; 2
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	a4 0e       	add	r10, r20
    3d42:	b5 1e       	adc	r11, r21
    3d44:	a1 01       	movw	r20, r2
    3d46:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__ultoa_invert>
    3d4a:	d8 2e       	mov	r13, r24
    3d4c:	d2 18       	sub	r13, r2
    3d4e:	8f e7       	ldi	r24, 0x7F	; 127
    3d50:	f8 2e       	mov	r15, r24
    3d52:	f1 22       	and	r15, r17
    3d54:	f6 fe       	sbrs	r15, 6
    3d56:	0b c0       	rjmp	.+22     	; 0x3d6e <vfprintf+0x2f4>
    3d58:	5e ef       	ldi	r21, 0xFE	; 254
    3d5a:	f5 22       	and	r15, r21
    3d5c:	d9 14       	cp	r13, r9
    3d5e:	38 f4       	brcc	.+14     	; 0x3d6e <vfprintf+0x2f4>
    3d60:	f4 fe       	sbrs	r15, 4
    3d62:	07 c0       	rjmp	.+14     	; 0x3d72 <vfprintf+0x2f8>
    3d64:	f2 fc       	sbrc	r15, 2
    3d66:	05 c0       	rjmp	.+10     	; 0x3d72 <vfprintf+0x2f8>
    3d68:	8f ee       	ldi	r24, 0xEF	; 239
    3d6a:	f8 22       	and	r15, r24
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <vfprintf+0x2f8>
    3d6e:	1d 2d       	mov	r17, r13
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <vfprintf+0x2fa>
    3d72:	19 2d       	mov	r17, r9
    3d74:	f4 fe       	sbrs	r15, 4
    3d76:	0d c0       	rjmp	.+26     	; 0x3d92 <vfprintf+0x318>
    3d78:	fe 01       	movw	r30, r28
    3d7a:	ed 0d       	add	r30, r13
    3d7c:	f1 1d       	adc	r31, r1
    3d7e:	80 81       	ld	r24, Z
    3d80:	80 33       	cpi	r24, 0x30	; 48
    3d82:	19 f4       	brne	.+6      	; 0x3d8a <vfprintf+0x310>
    3d84:	99 ee       	ldi	r25, 0xE9	; 233
    3d86:	f9 22       	and	r15, r25
    3d88:	08 c0       	rjmp	.+16     	; 0x3d9a <vfprintf+0x320>
    3d8a:	1f 5f       	subi	r17, 0xFF	; 255
    3d8c:	f2 fe       	sbrs	r15, 2
    3d8e:	05 c0       	rjmp	.+10     	; 0x3d9a <vfprintf+0x320>
    3d90:	03 c0       	rjmp	.+6      	; 0x3d98 <vfprintf+0x31e>
    3d92:	8f 2d       	mov	r24, r15
    3d94:	86 78       	andi	r24, 0x86	; 134
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <vfprintf+0x320>
    3d98:	1f 5f       	subi	r17, 0xFF	; 255
    3d9a:	0f 2d       	mov	r16, r15
    3d9c:	f3 fc       	sbrc	r15, 3
    3d9e:	14 c0       	rjmp	.+40     	; 0x3dc8 <vfprintf+0x34e>
    3da0:	f0 fe       	sbrs	r15, 0
    3da2:	0f c0       	rjmp	.+30     	; 0x3dc2 <vfprintf+0x348>
    3da4:	1e 15       	cp	r17, r14
    3da6:	10 f0       	brcs	.+4      	; 0x3dac <vfprintf+0x332>
    3da8:	9d 2c       	mov	r9, r13
    3daa:	0b c0       	rjmp	.+22     	; 0x3dc2 <vfprintf+0x348>
    3dac:	9d 2c       	mov	r9, r13
    3dae:	9e 0c       	add	r9, r14
    3db0:	91 1a       	sub	r9, r17
    3db2:	1e 2d       	mov	r17, r14
    3db4:	06 c0       	rjmp	.+12     	; 0x3dc2 <vfprintf+0x348>
    3db6:	80 e2       	ldi	r24, 0x20	; 32
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	b3 01       	movw	r22, r6
    3dbc:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3dc0:	1f 5f       	subi	r17, 0xFF	; 255
    3dc2:	1e 15       	cp	r17, r14
    3dc4:	c0 f3       	brcs	.-16     	; 0x3db6 <vfprintf+0x33c>
    3dc6:	04 c0       	rjmp	.+8      	; 0x3dd0 <vfprintf+0x356>
    3dc8:	1e 15       	cp	r17, r14
    3dca:	10 f4       	brcc	.+4      	; 0x3dd0 <vfprintf+0x356>
    3dcc:	e1 1a       	sub	r14, r17
    3dce:	01 c0       	rjmp	.+2      	; 0x3dd2 <vfprintf+0x358>
    3dd0:	ee 24       	eor	r14, r14
    3dd2:	04 ff       	sbrs	r16, 4
    3dd4:	0f c0       	rjmp	.+30     	; 0x3df4 <vfprintf+0x37a>
    3dd6:	80 e3       	ldi	r24, 0x30	; 48
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	b3 01       	movw	r22, r6
    3ddc:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3de0:	02 ff       	sbrs	r16, 2
    3de2:	1d c0       	rjmp	.+58     	; 0x3e1e <vfprintf+0x3a4>
    3de4:	01 fd       	sbrc	r16, 1
    3de6:	03 c0       	rjmp	.+6      	; 0x3dee <vfprintf+0x374>
    3de8:	88 e7       	ldi	r24, 0x78	; 120
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e c0       	rjmp	.+28     	; 0x3e0a <vfprintf+0x390>
    3dee:	88 e5       	ldi	r24, 0x58	; 88
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0b c0       	rjmp	.+22     	; 0x3e0a <vfprintf+0x390>
    3df4:	80 2f       	mov	r24, r16
    3df6:	86 78       	andi	r24, 0x86	; 134
    3df8:	91 f0       	breq	.+36     	; 0x3e1e <vfprintf+0x3a4>
    3dfa:	01 ff       	sbrs	r16, 1
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <vfprintf+0x388>
    3dfe:	8b e2       	ldi	r24, 0x2B	; 43
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <vfprintf+0x38a>
    3e02:	80 e2       	ldi	r24, 0x20	; 32
    3e04:	f7 fc       	sbrc	r15, 7
    3e06:	8d e2       	ldi	r24, 0x2D	; 45
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	b3 01       	movw	r22, r6
    3e0c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e10:	06 c0       	rjmp	.+12     	; 0x3e1e <vfprintf+0x3a4>
    3e12:	80 e3       	ldi	r24, 0x30	; 48
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b3 01       	movw	r22, r6
    3e18:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e1c:	9a 94       	dec	r9
    3e1e:	d9 14       	cp	r13, r9
    3e20:	c0 f3       	brcs	.-16     	; 0x3e12 <vfprintf+0x398>
    3e22:	da 94       	dec	r13
    3e24:	f1 01       	movw	r30, r2
    3e26:	ed 0d       	add	r30, r13
    3e28:	f1 1d       	adc	r31, r1
    3e2a:	80 81       	ld	r24, Z
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	b3 01       	movw	r22, r6
    3e30:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e34:	dd 20       	and	r13, r13
    3e36:	a9 f7       	brne	.-22     	; 0x3e22 <vfprintf+0x3a8>
    3e38:	06 c0       	rjmp	.+12     	; 0x3e46 <vfprintf+0x3cc>
    3e3a:	80 e2       	ldi	r24, 0x20	; 32
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	b3 01       	movw	r22, r6
    3e40:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fputc>
    3e44:	ea 94       	dec	r14
    3e46:	ee 20       	and	r14, r14
    3e48:	c1 f7       	brne	.-16     	; 0x3e3a <vfprintf+0x3c0>
    3e4a:	43 ce       	rjmp	.-890    	; 0x3ad2 <vfprintf+0x58>
    3e4c:	f3 01       	movw	r30, r6
    3e4e:	66 81       	ldd	r22, Z+6	; 0x06
    3e50:	77 81       	ldd	r23, Z+7	; 0x07
    3e52:	cb 01       	movw	r24, r22
    3e54:	2b 96       	adiw	r28, 0x0b	; 11
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	ff 90       	pop	r15
    3e6a:	ef 90       	pop	r14
    3e6c:	df 90       	pop	r13
    3e6e:	cf 90       	pop	r12
    3e70:	bf 90       	pop	r11
    3e72:	af 90       	pop	r10
    3e74:	9f 90       	pop	r9
    3e76:	8f 90       	pop	r8
    3e78:	7f 90       	pop	r7
    3e7a:	6f 90       	pop	r6
    3e7c:	5f 90       	pop	r5
    3e7e:	4f 90       	pop	r4
    3e80:	3f 90       	pop	r3
    3e82:	2f 90       	pop	r2
    3e84:	08 95       	ret

00003e86 <strnlen_P>:
    3e86:	fc 01       	movw	r30, r24
    3e88:	05 90       	lpm	r0, Z+
    3e8a:	61 50       	subi	r22, 0x01	; 1
    3e8c:	70 40       	sbci	r23, 0x00	; 0
    3e8e:	01 10       	cpse	r0, r1
    3e90:	d8 f7       	brcc	.-10     	; 0x3e88 <strnlen_P+0x2>
    3e92:	80 95       	com	r24
    3e94:	90 95       	com	r25
    3e96:	8e 0f       	add	r24, r30
    3e98:	9f 1f       	adc	r25, r31
    3e9a:	08 95       	ret

00003e9c <strnlen>:
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	61 50       	subi	r22, 0x01	; 1
    3ea0:	70 40       	sbci	r23, 0x00	; 0
    3ea2:	01 90       	ld	r0, Z+
    3ea4:	01 10       	cpse	r0, r1
    3ea6:	d8 f7       	brcc	.-10     	; 0x3e9e <strnlen+0x2>
    3ea8:	80 95       	com	r24
    3eaa:	90 95       	com	r25
    3eac:	8e 0f       	add	r24, r30
    3eae:	9f 1f       	adc	r25, r31
    3eb0:	08 95       	ret

00003eb2 <fputc>:
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	8c 01       	movw	r16, r24
    3ebc:	eb 01       	movw	r28, r22
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	81 ff       	sbrs	r24, 1
    3ec2:	1b c0       	rjmp	.+54     	; 0x3efa <fputc+0x48>
    3ec4:	82 ff       	sbrs	r24, 2
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <fputc+0x30>
    3ec8:	2e 81       	ldd	r18, Y+6	; 0x06
    3eca:	3f 81       	ldd	r19, Y+7	; 0x07
    3ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ece:	9d 81       	ldd	r25, Y+5	; 0x05
    3ed0:	28 17       	cp	r18, r24
    3ed2:	39 07       	cpc	r19, r25
    3ed4:	64 f4       	brge	.+24     	; 0x3eee <fputc+0x3c>
    3ed6:	e8 81       	ld	r30, Y
    3ed8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eda:	01 93       	st	Z+, r16
    3edc:	f9 83       	std	Y+1, r31	; 0x01
    3ede:	e8 83       	st	Y, r30
    3ee0:	06 c0       	rjmp	.+12     	; 0x3eee <fputc+0x3c>
    3ee2:	e8 85       	ldd	r30, Y+8	; 0x08
    3ee4:	f9 85       	ldd	r31, Y+9	; 0x09
    3ee6:	80 2f       	mov	r24, r16
    3ee8:	09 95       	icall
    3eea:	89 2b       	or	r24, r25
    3eec:	31 f4       	brne	.+12     	; 0x3efa <fputc+0x48>
    3eee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ef2:	01 96       	adiw	r24, 0x01	; 1
    3ef4:	9f 83       	std	Y+7, r25	; 0x07
    3ef6:	8e 83       	std	Y+6, r24	; 0x06
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <fputc+0x4c>
    3efa:	0f ef       	ldi	r16, 0xFF	; 255
    3efc:	1f ef       	ldi	r17, 0xFF	; 255
    3efe:	c8 01       	movw	r24, r16
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	08 95       	ret

00003f0a <__ultoa_invert>:
    3f0a:	fa 01       	movw	r30, r20
    3f0c:	aa 27       	eor	r26, r26
    3f0e:	28 30       	cpi	r18, 0x08	; 8
    3f10:	51 f1       	breq	.+84     	; 0x3f66 <__ultoa_invert+0x5c>
    3f12:	20 31       	cpi	r18, 0x10	; 16
    3f14:	81 f1       	breq	.+96     	; 0x3f76 <__ultoa_invert+0x6c>
    3f16:	e8 94       	clt
    3f18:	6f 93       	push	r22
    3f1a:	6e 7f       	andi	r22, 0xFE	; 254
    3f1c:	6e 5f       	subi	r22, 0xFE	; 254
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	8f 4f       	sbci	r24, 0xFF	; 255
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	af 4f       	sbci	r26, 0xFF	; 255
    3f26:	b1 e0       	ldi	r27, 0x01	; 1
    3f28:	3e d0       	rcall	.+124    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2a:	b4 e0       	ldi	r27, 0x04	; 4
    3f2c:	3c d0       	rcall	.+120    	; 0x3fa6 <__ultoa_invert+0x9c>
    3f2e:	67 0f       	add	r22, r23
    3f30:	78 1f       	adc	r23, r24
    3f32:	89 1f       	adc	r24, r25
    3f34:	9a 1f       	adc	r25, r26
    3f36:	a1 1d       	adc	r26, r1
    3f38:	68 0f       	add	r22, r24
    3f3a:	79 1f       	adc	r23, r25
    3f3c:	8a 1f       	adc	r24, r26
    3f3e:	91 1d       	adc	r25, r1
    3f40:	a1 1d       	adc	r26, r1
    3f42:	6a 0f       	add	r22, r26
    3f44:	71 1d       	adc	r23, r1
    3f46:	81 1d       	adc	r24, r1
    3f48:	91 1d       	adc	r25, r1
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	20 d0       	rcall	.+64     	; 0x3f8e <__ultoa_invert+0x84>
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <__ultoa_invert+0x48>
    3f50:	68 94       	set
    3f52:	3f 91       	pop	r19
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	26 9f       	mul	r18, r22
    3f58:	11 24       	eor	r1, r1
    3f5a:	30 19       	sub	r19, r0
    3f5c:	30 5d       	subi	r19, 0xD0	; 208
    3f5e:	31 93       	st	Z+, r19
    3f60:	de f6       	brtc	.-74     	; 0x3f18 <__ultoa_invert+0xe>
    3f62:	cf 01       	movw	r24, r30
    3f64:	08 95       	ret
    3f66:	46 2f       	mov	r20, r22
    3f68:	47 70       	andi	r20, 0x07	; 7
    3f6a:	40 5d       	subi	r20, 0xD0	; 208
    3f6c:	41 93       	st	Z+, r20
    3f6e:	b3 e0       	ldi	r27, 0x03	; 3
    3f70:	0f d0       	rcall	.+30     	; 0x3f90 <__ultoa_invert+0x86>
    3f72:	c9 f7       	brne	.-14     	; 0x3f66 <__ultoa_invert+0x5c>
    3f74:	f6 cf       	rjmp	.-20     	; 0x3f62 <__ultoa_invert+0x58>
    3f76:	46 2f       	mov	r20, r22
    3f78:	4f 70       	andi	r20, 0x0F	; 15
    3f7a:	40 5d       	subi	r20, 0xD0	; 208
    3f7c:	4a 33       	cpi	r20, 0x3A	; 58
    3f7e:	18 f0       	brcs	.+6      	; 0x3f86 <__ultoa_invert+0x7c>
    3f80:	49 5d       	subi	r20, 0xD9	; 217
    3f82:	31 fd       	sbrc	r19, 1
    3f84:	40 52       	subi	r20, 0x20	; 32
    3f86:	41 93       	st	Z+, r20
    3f88:	02 d0       	rcall	.+4      	; 0x3f8e <__ultoa_invert+0x84>
    3f8a:	a9 f7       	brne	.-22     	; 0x3f76 <__ultoa_invert+0x6c>
    3f8c:	ea cf       	rjmp	.-44     	; 0x3f62 <__ultoa_invert+0x58>
    3f8e:	b4 e0       	ldi	r27, 0x04	; 4
    3f90:	a6 95       	lsr	r26
    3f92:	97 95       	ror	r25
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	ba 95       	dec	r27
    3f9c:	c9 f7       	brne	.-14     	; 0x3f90 <__ultoa_invert+0x86>
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	61 05       	cpc	r22, r1
    3fa2:	71 05       	cpc	r23, r1
    3fa4:	08 95       	ret
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	0a 2e       	mov	r0, r26
    3fac:	06 94       	lsr	r0
    3fae:	57 95       	ror	r21
    3fb0:	47 95       	ror	r20
    3fb2:	37 95       	ror	r19
    3fb4:	27 95       	ror	r18
    3fb6:	ba 95       	dec	r27
    3fb8:	c9 f7       	brne	.-14     	; 0x3fac <__ultoa_invert+0xa2>
    3fba:	62 0f       	add	r22, r18
    3fbc:	73 1f       	adc	r23, r19
    3fbe:	84 1f       	adc	r24, r20
    3fc0:	95 1f       	adc	r25, r21
    3fc2:	a0 1d       	adc	r26, r0
    3fc4:	08 95       	ret

00003fc6 <_exit>:
    3fc6:	f8 94       	cli

00003fc8 <__stop_program>:
    3fc8:	ff cf       	rjmp	.-2      	; 0x3fc8 <__stop_program>
